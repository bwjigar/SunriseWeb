//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sunrise.Services.FortuneService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FortuneService.ServiceSoap")]
    public interface ServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeOfferTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeOfferTrans(string DeviseType, string UserCode, string CustomerName, string Comments, Sunrise.Services.FortuneService.HoldStone[] StoneList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeOfferTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeOfferTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, Sunrise.Services.FortuneService.HoldStone[] StoneList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeOfferTrans_New", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeOfferTrans_New(string DeviseType, string UserCode, string CustomerName, string Comments, decimal Disc_Per, short valid_days, string ref_no, string remarks, string delete_flag, decimal Offer_Amt, long Fortune_PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeOfferTrans_New", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeOfferTrans_NewAsync(string DeviseType, string UserCode, string CustomerName, string Comments, decimal Disc_Per, short valid_days, string ref_no, string remarks, string delete_flag, decimal Offer_Amt, long Fortune_PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeHoldTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeHoldTrans(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeHoldTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeHoldTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeWebHoldTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeWebHoldTrans(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeWebHoldTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeWebHoldTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeReleaseTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeReleaseTrans(string DeviseType, string UserCode, string CustomerName, string StoneList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeReleaseTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeReleaseTransAsync(string DeviseType, string UserCode, string CustomerName, string StoneList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeWebReleaseTrans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse MakeWebReleaseTrans(string DeviseType, string UserCode, string CustomerName, string StoneList, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MakeWebReleaseTrans", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeWebReleaseTransAsync(string DeviseType, string UserCode, string CustomerName, string StoneList, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStoneForHold", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckStoneForHold(string DeviseType, string StoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStoneForHold", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStoneForHoldAsync(string DeviseType, string StoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStoneForRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet CheckStoneForRelease(string DeviseType, string UserCode, string StoneId, string CustomerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckStoneForRelease", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckStoneForReleaseAsync(string DeviseType, string UserCode, string StoneId, string CustomerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OrderDetailNotification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Sunrise.Services.FortuneService.CommonResultResponse OrderDetailNotification(string OrderID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OrderDetailNotification", ReplyAction="*")]
        System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> OrderDetailNotificationAsync(string OrderID, string UserID);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class HoldStone : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ref_noField;
        
        private decimal cur_ctsField;
        
        private decimal rap_priceField;
        
        private decimal rap_valueField;
        
        private decimal sales_disc_perField;
        
        private decimal disc_perField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ref_no {
            get {
                return this.ref_noField;
            }
            set {
                this.ref_noField = value;
                this.RaisePropertyChanged("ref_no");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public decimal cur_cts {
            get {
                return this.cur_ctsField;
            }
            set {
                this.cur_ctsField = value;
                this.RaisePropertyChanged("cur_cts");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal rap_price {
            get {
                return this.rap_priceField;
            }
            set {
                this.rap_priceField = value;
                this.RaisePropertyChanged("rap_price");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal rap_value {
            get {
                return this.rap_valueField;
            }
            set {
                this.rap_valueField = value;
                this.RaisePropertyChanged("rap_value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public decimal sales_disc_per {
            get {
                return this.sales_disc_perField;
            }
            set {
                this.sales_disc_perField = value;
                this.RaisePropertyChanged("sales_disc_per");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public decimal disc_per {
            get {
                return this.disc_perField;
            }
            set {
                this.disc_perField = value;
                this.RaisePropertyChanged("disc_per");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CommonResultResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string messageField;
        
        private string statusField;
        
        private string errorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
                this.RaisePropertyChanged("Error");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceSoapChannel : Sunrise.Services.FortuneService.ServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<Sunrise.Services.FortuneService.ServiceSoap>, Sunrise.Services.FortuneService.ServiceSoap {
        
        public ServiceSoapClient() {
        }
        
        public ServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeOfferTrans(string DeviseType, string UserCode, string CustomerName, string Comments, Sunrise.Services.FortuneService.HoldStone[] StoneList) {
            return base.Channel.MakeOfferTrans(DeviseType, UserCode, CustomerName, Comments, StoneList);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeOfferTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, Sunrise.Services.FortuneService.HoldStone[] StoneList) {
            return base.Channel.MakeOfferTransAsync(DeviseType, UserCode, CustomerName, Comments, StoneList);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeOfferTrans_New(string DeviseType, string UserCode, string CustomerName, string Comments, decimal Disc_Per, short valid_days, string ref_no, string remarks, string delete_flag, decimal Offer_Amt, long Fortune_PartyCode) {
            return base.Channel.MakeOfferTrans_New(DeviseType, UserCode, CustomerName, Comments, Disc_Per, valid_days, ref_no, remarks, delete_flag, Offer_Amt, Fortune_PartyCode);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeOfferTrans_NewAsync(string DeviseType, string UserCode, string CustomerName, string Comments, decimal Disc_Per, short valid_days, string ref_no, string remarks, string delete_flag, decimal Offer_Amt, long Fortune_PartyCode) {
            return base.Channel.MakeOfferTrans_NewAsync(DeviseType, UserCode, CustomerName, Comments, Disc_Per, valid_days, ref_no, remarks, delete_flag, Offer_Amt, Fortune_PartyCode);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeHoldTrans(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode) {
            return base.Channel.MakeHoldTrans(DeviseType, UserCode, CustomerName, Comments, OrderType, StoneList, PartyCode);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeHoldTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode) {
            return base.Channel.MakeHoldTransAsync(DeviseType, UserCode, CustomerName, Comments, OrderType, StoneList, PartyCode);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeWebHoldTrans(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode) {
            return base.Channel.MakeWebHoldTrans(DeviseType, UserCode, CustomerName, Comments, OrderType, StoneList, PartyCode);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeWebHoldTransAsync(string DeviseType, string UserCode, string CustomerName, string Comments, string OrderType, Sunrise.Services.FortuneService.HoldStone[] StoneList, string PartyCode) {
            return base.Channel.MakeWebHoldTransAsync(DeviseType, UserCode, CustomerName, Comments, OrderType, StoneList, PartyCode);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeReleaseTrans(string DeviseType, string UserCode, string CustomerName, string StoneList) {
            return base.Channel.MakeReleaseTrans(DeviseType, UserCode, CustomerName, StoneList);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeReleaseTransAsync(string DeviseType, string UserCode, string CustomerName, string StoneList) {
            return base.Channel.MakeReleaseTransAsync(DeviseType, UserCode, CustomerName, StoneList);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse MakeWebReleaseTrans(string DeviseType, string UserCode, string CustomerName, string StoneList, string Status) {
            return base.Channel.MakeWebReleaseTrans(DeviseType, UserCode, CustomerName, StoneList, Status);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> MakeWebReleaseTransAsync(string DeviseType, string UserCode, string CustomerName, string StoneList, string Status) {
            return base.Channel.MakeWebReleaseTransAsync(DeviseType, UserCode, CustomerName, StoneList, Status);
        }
        
        public System.Data.DataSet CheckStoneForHold(string DeviseType, string StoneId) {
            return base.Channel.CheckStoneForHold(DeviseType, StoneId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStoneForHoldAsync(string DeviseType, string StoneId) {
            return base.Channel.CheckStoneForHoldAsync(DeviseType, StoneId);
        }
        
        public System.Data.DataSet CheckStoneForRelease(string DeviseType, string UserCode, string StoneId, string CustomerName) {
            return base.Channel.CheckStoneForRelease(DeviseType, UserCode, StoneId, CustomerName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckStoneForReleaseAsync(string DeviseType, string UserCode, string StoneId, string CustomerName) {
            return base.Channel.CheckStoneForReleaseAsync(DeviseType, UserCode, StoneId, CustomerName);
        }
        
        public Sunrise.Services.FortuneService.CommonResultResponse OrderDetailNotification(string OrderID, string UserID) {
            return base.Channel.OrderDetailNotification(OrderID, UserID);
        }
        
        public System.Threading.Tasks.Task<Sunrise.Services.FortuneService.CommonResultResponse> OrderDetailNotificationAsync(string OrderID, string UserID) {
            return base.Channel.OrderDetailNotificationAsync(OrderID, UserID);
        }
    }
}
