using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace EpExcelExportLib
{
    public class EpExcelExport
    {

        public delegate void FillingWorksheetEventHandler(object sender, ref FillingWorksheetEventArgs e);
        public delegate void BeforeCreateColumnEventHandler(object sender, ref ExcelHeader e);
        public delegate void BeforeCreateColumnEventHandler1(object sender, ref ExcelHeader e, List<ApiColSettings> columnsSettings);

        public delegate void AddHeaderEventHandler(object sender, ref AddHeaderEventArgs e);
        public delegate void AddFooterEventHandler(object sender, ref AddFooterEventArgs e);
        public delegate void BeforeCreateCellEventHandler(object sender, ref BeforeCreateCellEventArgs e);
        public delegate void AfterCreateCellEventHandler(object sender, ref ExcelCellFormat e);

        public event FillingWorksheetEventHandler FillingWorksheetEvent;
        public event AddHeaderEventHandler AddHeaderEvent;
        public event AddFooterEventHandler AddFooterEvent;


        public event BeforeCreateCellEventHandler BeforeCreateCellEvent;
        public event BeforeCreateColumnEventHandler BeforeCreateColumnEvent;
        public event BeforeCreateColumnEventHandler1 BeforeCreateColumnEvent1;
        public event AfterCreateCellEventHandler AfterCreateCellEvent;

        public const String cFORMULA_START_INDEX = "~FORMULA_START_INDEX~";
        public const String cFORMULA_END_INDEX = "~FORMULA_END_INDEX~";
        public const String External_ImageURL = "https://4e0s0i2r4n0u1s0.com/img/";
        public const String External_CertiTypeURL = "https://4e0s0i2r4n0u1s0.com:8121/DNA/CertiType?StoneNo=";

        public const String ImageURL = "https://4e0s0i2r4n0u1s0.com:8121/ViewImageVideoCerti?T=I&StoneId=";
        public const String VideoURL = "https://4e0s0i2r4n0u1s0.com:8121/ViewImageVideoCerti?T=V&StoneId=";
        public const String CertiURL = "https://4e0s0i2r4n0u1s0.com:8121/ViewImageVideoCerti?T=C&StoneId=";

        String _SheetName = "";
        String _TableName = "";
        protected ExcelWorksheet _worksheet;

        public UInt32 DefaultStyleindex;

        protected int TableHeaderStartRow;
        protected int TableDetailStartRow;
        protected int TableFooterStartRow;

        protected UInt32 CurrentRowCount;
        protected List<ExcelHeader> AllColumns;
        protected System.Collections.Generic.SortedList<UInt32, ExcelFormat> StyleList;

        protected int VisibleColumn;

        public static string GetHexValue(int val)
        {
            //return String.Format("{0:X}", val);
            return val.ToString();
        }

        // Added By Kaushal 13-12-2018 Given Bhai Tejas Bhai
        public static void Excel_Data_video(DataTable p_dt, string _strFilePath, string _strcerti)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            string _date = System.DateTime.Today.ToString("dd-MMM-yyyy");
            string _strlabName = "";
            string _strcertino = "";
            string _strloction = "";
            string _strhyperlink = "";
            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                // For Set Excel Sheet WorkSheet Name
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("TotalStock");

                // For Set Company Name, Address & Others

                //worksheet.Cells["B2"].Value = "Abbreviation";
                //worksheet.Cells["B2"].Style.Font.Bold = true;
                //worksheet.Cells["C2"].Value = "Buss. Proc";
                //worksheet.Cells["D2"].Value = "B";
                //worksheet.Cells["D2"].Style.Font.Bold = true;
                //worksheet.Cells["C3"].Value = "Promotion";
                //worksheet.Cells["D3"].Value = "P";
                //worksheet.Cells["D3"].Style.Font.Bold = true;
                //worksheet.Cells["B4:F4"].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells["B4:F4"].Merge = true;
                //worksheet.Cells["B5:E5"].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells["B5:E5"].Merge = true;

                worksheet.Cells["F1"].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + _date + "";
                //worksheet.Cells["F1:S1"].Merge = true;
                worksheet.Cells["F1"].Style.Font.Size = 24;
                worksheet.Cells["F1:S1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F1:S1"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F1:S1"].Style.Font.Bold = true;

                worksheet.Cells["F2"].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                //worksheet.Cells["F2:T2"].Merge = true;
                worksheet.Cells["F2:T2"].Style.Font.Size = 12;
                worksheet.Cells["F2:T2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F2:T2"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F2:T2"].Style.Font.Bold = true;

                worksheet.Cells["F3"].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                //worksheet.Cells["F3:S3"].Merge = true;
                worksheet.Cells["F3:S3"].Style.Font.Size = 12;
                worksheet.Cells["F3:S3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F3:S3"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F3:S3"].Style.Font.Bold = true;

                //worksheet.Cells["B2:D2"].Value = "All Prices are final Selling Cash Price";
                //worksheet.Cells["B2:D2"].Merge = true;
                //worksheet.Cells["B2:D2"].Style.Font.Bold = true;
                //worksheet.Cells["B2:D2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                //worksheet.Cells["B2:D2"].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                //worksheet.Cells["B2:D2"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                //worksheet.Cells["B2:D2"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                int rowCount = 6; // Start Printing Records

                foreach (DataRow dr in p_dt.Rows)
                {
                    rowCount += 1;
                    for (int i = 1; i < p_dt.Columns.Count + 1; i++)
                    {
                        if (rowCount == 7) // For Colounm Header Name
                        {
                            worksheet.Cells[rowCount, i].Value = p_dt.Columns[i - 1].ColumnName;
                            worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            worksheet.Cells[rowCount, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells[rowCount, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                            worksheet.Cells[rowCount, i].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        }

                        // For Set 2 Decimal 
                        if (p_dt.Columns[i - 1].ColumnName == "Cts" || p_dt.Columns[i - 1].ColumnName == "Rap Price($)"
                           || p_dt.Columns[i - 1].ColumnName == "Length" || p_dt.Columns[i - 1].ColumnName == "Disc (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Width" || p_dt.Columns[i - 1].ColumnName == "Depth"
                           || p_dt.Columns[i - 1].ColumnName == "Depth (%)" || p_dt.Columns[i - 1].ColumnName == "Table (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Cr Ang" || p_dt.Columns[i - 1].ColumnName == "Cr Ht"
                           || p_dt.Columns[i - 1].ColumnName == "Pav Ang" || p_dt.Columns[i - 1].ColumnName == "Pav Ht")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Image") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""Image"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "HDMovie") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""HDMovie"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "SImage") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SImage"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName == "Lab") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                _strcertino = (dr[7].ToString());
                                _strlabName = (dr[39].ToString()); // Lab1 column data for lab name
                                _strloction = (dr[1].ToString());

                                if (_strloction == "Hong Kong")
                                {
                                    _strhyperlink = "https://sunrisediamonds.com.hk/certi/" + _strcertino + ".pdf";
                                    worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + _strhyperlink + @""",""" + _strlabName + @""")";
                                }
                                else
                                {
                                    worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                }

                                //https://sunrisediamonds.com.hk/certi/5191592902.pdf
                                //worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "DNA") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""DNA"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "VdoLink") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SVideo"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Rap Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=L" + _intcnt + "*M" + _intcnt;
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Net Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=N" + _intcnt + "+(" + "N" + _intcnt + "*O" + _intcnt + "/100" + ")";
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Cut") // For Set Formula Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            if (dr[i - 1].ToString() == "3EX")
                            {
                                worksheet.Cells[rowCount + 1, i].Style.Font.Bold = true;
                            }
                        }
                        else // For Others Value Come Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                        }
                    }
                }
                rowCount = rowCount + 1;
                worksheet.Cells["A7:B250000"].AutoFitColumns();
                worksheet.View.FreezePanes(8, 1); // For Panel Freeze
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                package.Save();
            }
        }

        public static void Excel_Generate(DataTable p_dt, string _strFilePath)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }

            using (ExcelPackage pck = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = pck.Workbook.Worksheets.Add("Data");
                ws.Cells["A1"].LoadFromDataTable(p_dt, true);
                int rowEnd = ws.Dimension.End.Row;
                removingGreenTagWarning(ws, ws.Cells[1, 1, rowEnd, 100].Address);
                pck.Save();
            }
        }

        public static void CreateExcel_temp(DataTable dtDiamonds, string _strFilePath, string LivePath)
        {
            //string stCompanySite = RequestHelpers.GetConfigValue("CompanySite");
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("DOSSIERS");


                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = "DOSSIERS " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;


                    // Image logo = Image.FromFile(HttpContext.Current.Server.MapPath(@"~/Content/images/login-logo.png"));
                    //  Image logo1 = Image.FromFile(HttpContext.Current.Server.MapPath(@"~/Content/images/sightholder.png"));
                    //  string filPath = System.Web.Hosting.HostingEnvironment.MapPath("~/Content/images/login-logo.png");
                    // string filPath1 = System.Web.Hosting.HostingEnvironment.MapPath("~/Content/images/sightholder.png");

                    //ExcelPicture pic = worksheet.Drawings.AddPicture("FirstLogo", logo);
                    //pic.SetPosition(0, 0, 0, 50);
                    //pic.SetSize(130, 100);
                    //ExcelPicture pic2 = worksheet.Drawings.AddPicture("SecondLogo", logo1);
                    //pic2.SetPosition(0, 0, 12, 20);
                    //pic2.SetSize(130, 100);


                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE" + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //var cellBackgroundColor1_H1 = worksheet.Cells[1,6].Style.Fill;
                    //cellBackgroundColor1_H1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    //cellBackgroundColor1_H1.BackgroundColor.SetColor(colFromHex_H1);
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;


                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    // ExcelHorizontalAlignment.Right;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;

                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 41].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 41].Style.Font.Size = 11;

                    worksheet.Cells[5, 1, 5, 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 41].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 41].Style.Font.Size = 11;
                    worksheet.Cells[6, 1, 6, 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 41].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 41].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 41].Style.Font.Bold = true;

                    worksheet.Cells[6, 1, 6, 41].AutoFilter = true;
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 41].Style.Fill;
                    cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "Location";
                    worksheet.Cells[6, 3].Value = "Status";
                    worksheet.Cells[6, 4].Value = "Stock ID";
                    worksheet.Cells[6, 5].Value = "Shape";
                    worksheet.Cells[6, 6].Value = "Pointer";
                    var cellBackgroundColor_Pointer = worksheet.Cells[6, 6].Style.Fill;
                    cellBackgroundColor_Pointer.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    cellBackgroundColor_Pointer.BackgroundColor.SetColor(colFromHex_Pointer);
                    worksheet.Cells[6, 7].Value = "Lab";
                    worksheet.Cells[6, 8].Value = "CertiNo";
                    worksheet.Cells[6, 9].Value = "Shade";
                    worksheet.Cells[6, 10].Value = "Color ";
                    worksheet.Cells[6, 11].Value = "Clarity";
                    worksheet.Cells[6, 12].Value = "Cts";
                    worksheet.Cells[6, 13].Value = "Rap Price($)";
                    worksheet.Cells[6, 14].Value = "Rap Amt($)";
                    //  worksheet.Ce6ls[7, 15].Value = "Pav. Angle";
                    worksheet.Cells[6, 15].Value = "Disc (%)";
                    var cellBackgroundColor_Dis = worksheet.Cells[6, 15].Style.Fill;
                    cellBackgroundColor_Dis.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    cellBackgroundColor_Dis.BackgroundColor.SetColor(colFromHex_Dis);

                    worksheet.Cells[6, 16].Value = "Net Amt($)";
                    var cellBackgroundColor_Amt = worksheet.Cells[6, 16].Style.Fill;
                    cellBackgroundColor_Amt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Amt = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    cellBackgroundColor_Amt.BackgroundColor.SetColor(colFromHex_Amt);

                    worksheet.Cells[6, 17].Value = "Price Per Carat";

                    worksheet.Cells[6, 18].Value = "Cut";
                    worksheet.Cells[6, 19].Value = "Polish";
                    worksheet.Cells[6, 20].Value = "Symm";
                    worksheet.Cells[6, 21].Value = "Fls";
                    worksheet.Cells[6, 22].Value = "Length";
                    worksheet.Cells[6, 23].Value = "Width";
                    worksheet.Cells[6, 24].Value = "Depth";
                    worksheet.Cells[6, 25].Value = "Depth (%)";
                    worksheet.Cells[6, 26].Value = "Table (%)";
                    worksheet.Cells[6, 27].Value = "Key To Symbol";
                    worksheet.Cells[6, 28].Value = "Luster";
                    worksheet.Cells[6, 29].Value = "Table Incl.";
                    worksheet.Cells[6, 30].Value = "Crown Incl.";
                    worksheet.Cells[6, 31].Value = "Table Natts";
                    worksheet.Cells[6, 32].Value = "Crown Natts";
                    worksheet.Cells[6, 33].Value = "Cr Ang";
                    worksheet.Cells[6, 34].Value = "Cr Ht";
                    worksheet.Cells[6, 35].Value = "Pav Ang";
                    worksheet.Cells[6, 36].Value = "Pav Ht";
                    worksheet.Cells[6, 37].Value = "Girdle Type";
                    worksheet.Cells[6, 38].Value = "Laser Insc";
                    worksheet.Cells[6, 39].Value = "Image";
                    worksheet.Cells[6, 40].Value = "HD Movie";
                    worksheet.Cells[6, 41].Value = "BGM";

                    //ADD BOLD FONT FOR HEADER CALCULATION
                    //     worksheet.Cells[5, 1].Style.Font.Bold = true;
                    //  worksheet.Cells[5, 7].Style.Font.Bold = true;
                    //   worksheet.Cells[6, 10, 8, 13].Style.Font.Bold = true;
                    // worksheet.Cells[6, 1, 6, 39].Style.Font.Bold = true;

                    //ExcelStyle cellStyleHeader = worksheet.Cells[6, 1, 6, 39].Style;
                    //cellStyleHeader.Border.Left.Style = cellStyleHeader.Border.Right.Style
                    //        = cellStyleHeader.Border.Top.Style = cellStyleHeader.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    // var cellBackgroundColor = worksheet.Cells[6, 1, 6, 39].Style.Fill;
                    // cellBackgroundColor.PatternType = ExcelFillStyle.Solid;
                    // cellBackgroundColor.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 41].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;



                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inSheetNumber = 0;

                    int inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                    int TotalRow = dtDiamonds.Rows.Count;

                    string stShape = string.Empty;
                    // Double dbCarat = 0;
                    // Double dbCrtsum = 0, dbCrtsum1 = 0, dbCrtsum2 = 0, dbCrtsum3 = 0;

                    #region Set AutoFit and Decimal Number Format

                    //set worksheet  number float with center
                    //Set Worksheet Width to Column worksheet

                    worksheet.View.FreezePanes(7, 1);
                    //worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    //worksheet.Cells[6, 2].AutoFitColumns(5.43);
                    //worksheet.Cells[6, 4].AutoFitColumns(8.86);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(9);
                    worksheet.Cells[6, 6].AutoFitColumns(10.14);
                    worksheet.Cells[6, 7].AutoFitColumns(8.43);
                    worksheet.Cells[6, 8].AutoFitColumns(9.57);
                    worksheet.Cells[6, 9].AutoFitColumns(8.14);
                    worksheet.Cells[6, 10].AutoFitColumns(8.14);
                    worksheet.Cells[6, 11].AutoFitColumns(8.71);
                    worksheet.Cells[6, 12].AutoFitColumns(8.43);
                    worksheet.Cells[6, 13].AutoFitColumns(9.29);
                    worksheet.Cells[6, 14].AutoFitColumns(13);
                    worksheet.Cells[6, 15].AutoFitColumns(7.29);
                    worksheet.Cells[6, 16].AutoFitColumns(13);
                    worksheet.Cells[6, 17].AutoFitColumns(8.43);
                    worksheet.Cells[6, 18].AutoFitColumns(6);
                    worksheet.Cells[6, 19].AutoFitColumns(6);
                    worksheet.Cells[6, 20].AutoFitColumns(6);
                    worksheet.Cells[6, 21].AutoFitColumns(6);
                    worksheet.Cells[6, 22].AutoFitColumns(6);
                    worksheet.Cells[6, 23].AutoFitColumns(6);
                    worksheet.Cells[6, 24].AutoFitColumns(6);
                    worksheet.Cells[6, 25].AutoFitColumns(6);
                    worksheet.Cells[6, 26].AutoFitColumns(6);
                    worksheet.Cells[6, 27].AutoFitColumns(35.29);
                    worksheet.Cells[6, 28].AutoFitColumns(5.43);
                    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    worksheet.Cells[6, 30].AutoFitColumns(7.86);
                    worksheet.Cells[6, 31].AutoFitColumns(7.86);
                    worksheet.Cells[6, 32].AutoFitColumns(7.86);
                    worksheet.Cells[6, 33].AutoFitColumns(5.14);
                    worksheet.Cells[6, 34].AutoFitColumns(5.14);
                    worksheet.Cells[6, 35].AutoFitColumns(5.14);
                    worksheet.Cells[6, 36].AutoFitColumns(5.14);
                    worksheet.Cells[6, 37].AutoFitColumns(7.29);
                    worksheet.Cells[6, 38].AutoFitColumns(4.71);
                    worksheet.Cells[6, 39].AutoFitColumns(5.57);
                    worksheet.Cells[6, 40].AutoFitColumns(5.57);
                    worksheet.Cells[6, 41].AutoFitColumns(5.57);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 4, inEndCounter, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 18, inEndCounter, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 11, inEndCounter, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 12, inEndCounter, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 13, inEndCounter, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 16, inEndCounter, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 17, inEndCounter, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 18, inEndCounter, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 20, inEndCounter, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 21, inEndCounter, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 22, inEndCounter, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 23, inEndCounter, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 24, inEndCounter, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 25, inEndCounter, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 26, inEndCounter, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 27, inEndCounter, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 28, inEndCounter, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 29, inEndCounter, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 30, inEndCounter, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 31, inEndCounter, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 32, inEndCounter, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 33, inEndCounter, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 34, inEndCounter, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 35, inEndCounter, 35].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 36, inEndCounter, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 37, inEndCounter, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 38, inEndCounter, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 39, inEndCounter, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 40, inEndCounter, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //worksheet.Cells[inStartIndex, 1, inEndCounter, 39].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    //worksheet.Cells[inStartIndex, 1, inEndCounter, 39].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    //worksheet.Cells[inStartIndex, 1, inEndCounter, 39].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    //worksheet.Cells[inStartIndex, 1, inEndCounter, 39].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    #endregion

                    var namedStyle = p.Workbook.Styles.CreateNamedStyle("HyperLink");
                    namedStyle.Style.Font.UnderLine = true;
                    namedStyle.Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    namedStyle.Style.Font.Size = 11;
                    namedStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    namedStyle.Style.Font.Name = "Calibri";

                    for (int u = inStartIndex; u < inEndCounter; u++)
                    {
                        worksheet.Cells[u, 1, u, 39].Style.Font.Size = 9;
                        worksheet.Cells[u, 1, u, 40].Style.Font.Size = 9;
                    }
                    for (int i = inStartIndex; i < inEndCounter; i++)
                    {
                        // stShape = dtDiamonds.Rows[i - inStartIndex]["Shape"].ToString();
                        //  dbCarat = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["weightincarats"].ToString());
                        // blIsFancyColor = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["ISFANCYCOLOR"].ToString());

                        #region Assigns Value to Cell
                        //   worksheet.Cells[inwrkrow, 1].Value = inwrkrow - inStartIndex + 1;
                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]);
                        //   int Row_Count = dtDiamonds.Rows.Count;
                        // worksheet.Cells[inwrkrow, 2].Style.Font.Size = 9;

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["status"]);
                        //worksheet.Cells[inwrkrow, 3].Style.Font.Size = 9;

                        // worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        String values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                        Int64 number_1;

                        bool success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 4].Value = values_1;// _list1.Rows[i][j];                                   
                        }
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);
                        var cellBackgroundColor1_Pointer = worksheet.Cells[inwrkrow, 6].Style.Fill;
                        cellBackgroundColor1_Pointer.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Pointer1 = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                        cellBackgroundColor1_Pointer.BackgroundColor.SetColor(colFromHex_Pointer1);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                        // worksheet.Cells[inwrkrow, 8].Value = dtDiamonds.Rows[i - inStartIndex]["certi_no"] == null ? "0" : "'" + dtDiamonds.Rows[i - inStartIndex]["certi_no"] ; // Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]);// null ? 0 : Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]);
                        String values = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                        Int64 number;

                        bool success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = values;// _list1.Rows[i][j];                                   
                        }
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shade"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]);
                        worksheet.Cells[inwrkrow, 12].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 13].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]);
                        worksheet.Cells[inwrkrow, 14].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]);
                        worksheet.Cells[inwrkrow, 15].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        var cellBackgroundColor_Dis1 = worksheet.Cells[inwrkrow, 15].Style.Fill;
                        cellBackgroundColor_Dis1.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Dis1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                        cellBackgroundColor_Dis1.BackgroundColor.SetColor(colFromHex_Dis1);

                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]);
                        worksheet.Cells[inwrkrow, 16].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 16].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 16].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        var cellBackgroundColor_Amt1 = worksheet.Cells[inwrkrow, 16].Style.Fill;
                        cellBackgroundColor_Amt1.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Amt1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                        cellBackgroundColor_Amt1.BackgroundColor.SetColor(colFromHex_Amt1);

                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]);
                        worksheet.Cells[inwrkrow, 17].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 17].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 17].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 18].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                        }
                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 19].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                        }
                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);
                            worksheet.Cells[inwrkrow, 20].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);
                        }


                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]);
                        worksheet.Cells[inwrkrow, 22].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]);
                        worksheet.Cells[inwrkrow, 23].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]);
                        worksheet.Cells[inwrkrow, 24].Style.Numberformat.Format = "0.00";
                        //worksheet.Cells[inwrkrow, 25].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]);
                        worksheet.Cells[inwrkrow, 25].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);
                        worksheet.Cells[inwrkrow, 25].Style.Numberformat.Format = "0.00";

                        //worksheet.Cells[inwrkrow, 26].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]);
                        worksheet.Cells[inwrkrow, 26].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);
                        worksheet.Cells[inwrkrow, 26].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Luster"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                        worksheet.Cells[inwrkrow, 33].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];
                        worksheet.Cells[inwrkrow, 33].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 34].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];
                        worksheet.Cells[inwrkrow, 34].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 35].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];
                        worksheet.Cells[inwrkrow, 35].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 36].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];
                        worksheet.Cells[inwrkrow, 36].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);
                        worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                        //worksheet.Column(41).Hidden = true;
                        //var StoneNo = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["STONE_NO"]);
                        //var LABREPORTNO = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["LABREPORTNO"]);
                        // if (dtDiamonds.Rows[i - inStartIndex]["view_dna"] != null)
                        // {
                        var Stone_No = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        var S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        // if (S_Detail != "")
                        //  {
                        // string hyprlink = "http://103.15.28.220:8001/StoneDetail/StoneDetail?Stone_No=" + Stone_No; //Old


                        string hyprlink = LivePath + Stone_No;

                        worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + hyprlink + "\",\" DNA \")";
                        worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);

                        if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                        {
                            var Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            if (Image != "")
                            {
                                //string hyprlink1 = Image;
                                string hyprlink1 = External_ImageURL + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_no"]) + "/PR.jpg";
                                worksheet.Cells[inwrkrow, 39].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 39].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 39].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            var Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                string hyprlink2 = Video;
                                worksheet.Cells[inwrkrow, 40].Formula = "=HYPERLINK(\"" + hyprlink2 + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 40].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 40].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                        //if (Convert.ToBoolean(dtDiamonds.Rows[i - inStartIndex]["IS_Certi"]) != false)
                        {
                            var Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                            if (Certificate != "")
                            {
                                string hyprlink3 = Certificate;
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }


                        inSheetNumber = 1;
                        inwrkrow++;

                        #endregion

                    }


                    // worksheet.Cells[6, 4].Value = TotalRow; =SUBTOTAL(109,E10:E79)

                    worksheet.Cells[5, 4].Formula = "=COUNTA(D" + inStartIndex + ": D" + (inwrkrow - 1) + ")"; ///TotalRow;//"ROUND(ROWS(D" + inStartIndex + ":D" + (inwrkrow - 1) + "))";
                    var cellBackgroundTotal = worksheet.Cells[5, 4].Style.Fill;
                    cellBackgroundTotal.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundTotal.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 4].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 4].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    ///
                    worksheet.Cells[5, 12].Formula = "ROUND(SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundCaratTotal = worksheet.Cells[5, 12].Style.Fill;
                    cellBackgroundCaratTotal.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexCartTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundCaratTotal.BackgroundColor.SetColor(colFromHexCartTotal);
                    worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0.00";


                    ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 12].Style;
                    cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                            = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 14].Formula = "ROUND(SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundTotalAmt = worksheet.Cells[5, 14].Style.Fill;
                    cellBackgroundTotalAmt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexTotalAmout = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundTotalAmt.BackgroundColor.SetColor(colFromHexTotalAmout);
                    worksheet.Cells[5, 14].Style.Numberformat.Format = "#,##0";


                    ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 14].Style;
                    cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                            = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 15].Formula = "ROUND((1-(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + ")/SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")))*(-100),2)";
                    //var cellBackgroundTotalDis = worksheet.Cells[6, 15].Style.Fill;
                    //cellBackgroundTotalDis.PatternType = ExcelFillStyle.Solid;
                    //Color colFromHexTotalDis = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    //cellBackgroundTotalDis.BackgroundColor.SetColor(colFromHexTotalDis);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 15].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundNetAmt = worksheet.Cells[5, 16].Style.Fill;
                    cellBackgroundNetAmt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexNetAmout = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundNetAmt.BackgroundColor.SetColor(colFromHexNetAmout);
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0";

                    ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                            = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;
                    ////int rowpls = TotalRow + 8;
                    ////worksheet.Cells[TotalRow + 8, 1].Formula = "SUBTOTAL(2,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                    ////worksheet.Cells[TotalRow + 8, 6].Formula = "ROUND(SUBTOTAL(9,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    ////worksheet.Cells[TotalRow + 8, 20].Formula = "ROUND(AI" + rowpls + "/F" + rowpls + ",2)";
                    ////worksheet.Cells[TotalRow + 8, 21].Formula = "IF(T" + rowpls + "<> 0,ROUND((T" + rowpls + "-V" + rowpls + ")/T" + rowpls + "*-100,2),\"\")";
                    ////worksheet.Cells[TotalRow + 8, 22].Formula = "ROUND(W" + rowpls + "/F" + rowpls + ",2)";
                    ////worksheet.Cells[TotalRow + 8, 23].Formula = "ROUND(SUBTOTAL(9,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                    ////worksheet.Cells[TotalRow + 8, 35].Formula = "ROUND(SUBTOTAL(9,AI" + inStartIndex + ":AI" + (inwrkrow - 1) + "),2)"; //rapaport
                    ////worksheet.Column(35).Hidden = true;

                    ////ExcelStyle cellStyleFotor = worksheet.Cells[TotalRow + 8, 1, TotalRow + 8, 34].Style;
                    //cellStyleFotor.Border.Left.Style = cellStyleFotor.Border.Right.Style
                    //        = cellStyleFotor.Border.Top.Style = cellStyleFotor.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    //var cellBackgroundColorFotor = worksheet.Cells[TotalRow + 8, 1, TotalRow + 8, 34].Style.Fill;
                    //cellBackgroundColorFotor.PatternType = ExcelFillStyle.Solid;
                    //cellBackgroundColorFotor.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                    worksheet.Cells[6, 27].AutoFitColumns(35.29);
                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                    Byte[] bin = p.GetAsByteArray();
                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public static void CreateExcelTemp(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("DOSSIERS");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = "DOSSIERS " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE" + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 43].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 43].Style.Font.Size = 11;

                    worksheet.Cells[5, 1, 5, 43].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 43].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 43].Style.Font.Size = 11;
                    worksheet.Cells[6, 1, 6, 43].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 43].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 43].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 43].Style.Font.Bold = true;

                    worksheet.Cells[6, 1, 6, 43].AutoFilter = true;
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 43].Style.Fill;
                    cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    worksheet.Cells[6, 2].Value = "DNA";
                    worksheet.Cells[6, 3].Value = "View Image";
                    worksheet.Cells[6, 4].Value = "HD Movie";
                    worksheet.Cells[6, 5].Value = "Stock Id";
                    worksheet.Cells[6, 6].Value = "Location";
                    worksheet.Cells[6, 7].Value = "Status";
                    worksheet.Cells[6, 8].Value = "Shape";
                    worksheet.Cells[6, 9].Value = "Pointer";
                    var cellBackgroundColor_Pointer = worksheet.Cells[6, 9].Style.Fill;
                    cellBackgroundColor_Pointer.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    cellBackgroundColor_Pointer.BackgroundColor.SetColor(colFromHex_Pointer);
                    worksheet.Cells[6, 10].Value = "Lab";
                    worksheet.Cells[6, 11].Value = "Certi No.";
                    worksheet.Cells[6, 12].Value = "BGM";
                    worksheet.Cells[6, 13].Value = "Color ";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cts";

                    worksheet.Cells[6, 16].Value = "Rap Price($)";
                    worksheet.Cells[6, 17].Value = "Rap Amt($)";
                    //  worksheet.Ce6ls[7, 15].Value = "Pav. Angle";
                    worksheet.Cells[6, 18].Value = "Disc (%)";
                    var cellBackgroundColor_Dis = worksheet.Cells[6, 18].Style.Fill;
                    cellBackgroundColor_Dis.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    cellBackgroundColor_Dis.BackgroundColor.SetColor(colFromHex_Dis);

                    worksheet.Cells[6, 19].Value = "Net Amt($)";
                    var cellBackgroundColor_Amt = worksheet.Cells[6, 19].Style.Fill;
                    cellBackgroundColor_Amt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex_Amt = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    cellBackgroundColor_Amt.BackgroundColor.SetColor(colFromHex_Amt);
                    worksheet.Cells[6, 20].Value = "Price / Cts";

                    worksheet.Cells[6, 21].Value = "Cut";
                    worksheet.Cells[6, 22].Value = "Polish";
                    worksheet.Cells[6, 23].Value = "Symm";
                    worksheet.Cells[6, 24].Value = "Fls";
                    worksheet.Cells[6, 25].Value = "Length";
                    worksheet.Cells[6, 26].Value = "Width";
                    worksheet.Cells[6, 27].Value = "Depth";
                    worksheet.Cells[6, 28].Value = "Depth (%)";
                    worksheet.Cells[6, 29].Value = "Table (%)";
                    worksheet.Cells[6, 30].Value = "Key To Symbol";
                    worksheet.Cells[6, 31].Value = "Culet";
                    worksheet.Cells[6, 32].Value = "Table Black";
                    worksheet.Cells[6, 33].Value = "Crown Black";
                    worksheet.Cells[6, 34].Value = "Table White";
                    worksheet.Cells[6, 35].Value = "Crown White";
                    worksheet.Cells[6, 36].Value = "Cr Ang";
                    worksheet.Cells[6, 37].Value = "Cr Ht";
                    worksheet.Cells[6, 38].Value = "Pav Ang";
                    worksheet.Cells[6, 39].Value = "Pav Ht";
                    worksheet.Cells[6, 40].Value = "Girdle %";
                    worksheet.Cells[6, 41].Value = "Girdle Type";
                    worksheet.Cells[6, 42].Value = "Luster / Milky";
                    worksheet.Cells[6, 43].Value = "Laser Insc";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 43].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                    int TotalRow = dtDiamonds.Rows.Count;
                    string stShape = string.Empty;

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10.14);
                    worksheet.Cells[6, 7].AutoFitColumns(10.5);
                    worksheet.Cells[6, 8].AutoFitColumns(9.57);
                    worksheet.Cells[6, 9].AutoFitColumns(12);
                    worksheet.Cells[6, 10].AutoFitColumns(8.14);
                    worksheet.Cells[6, 11].AutoFitColumns(14);
                    worksheet.Cells[6, 12].AutoFitColumns(8.43);
                    worksheet.Cells[6, 13].AutoFitColumns(9.29);
                    worksheet.Cells[6, 14].AutoFitColumns(13);
                    worksheet.Cells[6, 15].AutoFitColumns(10);
                    worksheet.Cells[6, 16].AutoFitColumns(13);
                    worksheet.Cells[6, 17].AutoFitColumns(8.43);
                    worksheet.Cells[6, 18].AutoFitColumns(8.43);
                    worksheet.Cells[6, 19].AutoFitColumns(6);
                    worksheet.Cells[6, 20].AutoFitColumns(9);
                    worksheet.Cells[6, 21].AutoFitColumns(6);
                    worksheet.Cells[6, 22].AutoFitColumns(6);
                    worksheet.Cells[6, 23].AutoFitColumns(6);
                    worksheet.Cells[6, 24].AutoFitColumns(6);
                    worksheet.Cells[6, 25].AutoFitColumns(7);
                    worksheet.Cells[6, 26].AutoFitColumns(7);
                    worksheet.Cells[6, 27].AutoFitColumns(7);
                    worksheet.Cells[6, 28].AutoFitColumns(7.86);
                    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    worksheet.Cells[6, 30].AutoFitColumns(7.86);
                    worksheet.Cells[6, 31].AutoFitColumns(7.86);
                    worksheet.Cells[6, 32].AutoFitColumns(7.86);
                    worksheet.Cells[6, 33].AutoFitColumns(7.86);
                    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    worksheet.Cells[6, 35].AutoFitColumns(7.86);
                    worksheet.Cells[6, 36].AutoFitColumns(7.86);
                    worksheet.Cells[6, 37].AutoFitColumns(7.86);
                    worksheet.Cells[6, 38].AutoFitColumns(7);
                    worksheet.Cells[6, 39].AutoFitColumns(7);
                    worksheet.Cells[6, 40].AutoFitColumns(10);
                    worksheet.Cells[6, 41].AutoFitColumns(7);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 4, inEndCounter, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 18, inEndCounter, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 11, inEndCounter, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 12, inEndCounter, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 13, inEndCounter, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 16, inEndCounter, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 17, inEndCounter, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 18, inEndCounter, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 20, inEndCounter, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 21, inEndCounter, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 22, inEndCounter, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 23, inEndCounter, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 24, inEndCounter, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 25, inEndCounter, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 26, inEndCounter, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 27, inEndCounter, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 28, inEndCounter, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 29, inEndCounter, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 30, inEndCounter, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 31, inEndCounter, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 32, inEndCounter, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 33, inEndCounter, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 34, inEndCounter, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 35, inEndCounter, 35].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 36, inEndCounter, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 37, inEndCounter, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 38, inEndCounter, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 39, inEndCounter, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 40, inEndCounter, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    var namedStyle = p.Workbook.Styles.CreateNamedStyle("HyperLink");
                    namedStyle.Style.Font.UnderLine = true;
                    namedStyle.Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    namedStyle.Style.Font.Size = 11;
                    namedStyle.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    namedStyle.Style.Font.Name = "Calibri";

                    for (int u = inStartIndex; u < inEndCounter; u++)
                    {
                        worksheet.Cells[u, 1, u, 39].Style.Font.Size = 9;
                        worksheet.Cells[u, 1, u, 40].Style.Font.Size = 9;
                    }
                    for (int i = inStartIndex; i < inEndCounter; i++)
                    {
                        // stShape = dtDiamonds.Rows[i - inStartIndex]["Shape"].ToString();
                        //  dbCarat = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["weightincarats"].ToString());
                        // blIsFancyColor = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["ISFANCYCOLOR"].ToString());

                        #region Assigns Value to Cell
                        //   worksheet.Cells[inwrkrow, 1].Value = inwrkrow - inStartIndex + 1;
                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                        String values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                        Int64 number_1;

                        bool success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 5].Value = values_1;
                        }
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["status"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);
                        var cellBackgroundColor1_Pointer = worksheet.Cells[inwrkrow, 9].Style.Fill;
                        cellBackgroundColor1_Pointer.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Pointer1 = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                        cellBackgroundColor1_Pointer.BackgroundColor.SetColor(colFromHex_Pointer1);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                        String values = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                        Int64 number;

                        bool success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 11].Value = values;
                        }
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);

                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]);
                        worksheet.Cells[inwrkrow, 15].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 16].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]);
                        worksheet.Cells[inwrkrow, 17].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inwrkrow, 18].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]);
                        worksheet.Cells[inwrkrow, 18].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 18].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 18].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        var cellBackgroundColor_Dis1 = worksheet.Cells[inwrkrow, 18].Style.Fill;
                        cellBackgroundColor_Dis1.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Dis1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                        cellBackgroundColor_Dis1.BackgroundColor.SetColor(colFromHex_Dis1);

                        worksheet.Cells[inwrkrow, 19].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]);
                        worksheet.Cells[inwrkrow, 19].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 19].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        var cellBackgroundColor_Amt1 = worksheet.Cells[inwrkrow, 19].Style.Fill;
                        cellBackgroundColor_Amt1.PatternType = ExcelFillStyle.Solid;
                        Color colFromHex_Amt1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                        cellBackgroundColor_Amt1.BackgroundColor.SetColor(colFromHex_Amt1);

                        worksheet.Cells[inwrkrow, 20].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]);
                        worksheet.Cells[inwrkrow, 20].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[inwrkrow, 20].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 21].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                        }
                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                        }
                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);
                        }

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]);
                        worksheet.Cells[inwrkrow, 25].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]);
                        worksheet.Cells[inwrkrow, 26].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]);
                        worksheet.Cells[inwrkrow, 27].Style.Numberformat.Format = "0.00";

                        //worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]);
                        worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);
                        worksheet.Cells[inwrkrow, 28].Style.Numberformat.Format = "0.00";

                        //worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]);
                        worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);
                        worksheet.Cells[inwrkrow, 29].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                        worksheet.Cells[inwrkrow, 36].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];
                        worksheet.Cells[inwrkrow, 36].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 37].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];
                        worksheet.Cells[inwrkrow, 37].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 38].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];
                        worksheet.Cells[inwrkrow, 38].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];
                        worksheet.Cells[inwrkrow, 39].Style.Numberformat.Format = "0.00";

                        try
                        {
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]);
                            worksheet.Cells[inwrkrow, 40].Style.Numberformat.Format = "0.00";
                        }
                        catch { }

                        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]);
                        worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Luster"]);
                        worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);
                        var Stone_No = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        var S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        // if (S_Detail != "")
                        //  {
                        // string hyprlink = "http://103.15.28.220:8001/StoneDetail/StoneDetail?Stone_No=" + Stone_No; //Old


                        string hyprlink = LivePath + Stone_No;
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                        {
                            var Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            if (Image != "")
                            {
                                string hyprlink1 = External_ImageURL + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_no"]) + "/PR.jpg";
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            var Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                string hyprlink2 = Video;
                                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + hyprlink2 + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                        //if (Convert.ToBoolean(dtDiamonds.Rows[i - inStartIndex]["IS_Certi"]) != false)
                        {
                            var Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                            if (Certificate != "")
                            {
                                string hyprlink3 = Certificate;
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        inwrkrow++;

                        #endregion
                    }

                    // worksheet.Cells[6, 4].Value = TotalRow; =SUBTOTAL(109,E10:E79)

                    worksheet.Cells[5, 5].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundTotal = worksheet.Cells[5, 5].Style.Fill;
                    cellBackgroundTotal.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundTotal.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 5].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 5].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    ///
                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundCaratTotal = worksheet.Cells[5, 15].Style.Fill;
                    cellBackgroundCaratTotal.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexCartTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundCaratTotal.BackgroundColor.SetColor(colFromHexCartTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0.00";


                    ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 15].Style;
                    cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                            = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundTotalAmt = worksheet.Cells[5, 17].Style.Fill;
                    cellBackgroundTotalAmt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexTotalAmout = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundTotalAmt.BackgroundColor.SetColor(colFromHexTotalAmout);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";


                    ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 17].Style;
                    cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                            = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "ROUND((1-(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2)";

                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    var cellBackgroundNetAmt = worksheet.Cells[5, 19].Style.Fill;
                    cellBackgroundNetAmt.PatternType = ExcelFillStyle.Solid;
                    Color colFromHexNetAmout = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    cellBackgroundNetAmt.BackgroundColor.SetColor(colFromHexNetAmout);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";

                    ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                            = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[6, 30].AutoFitColumns(35.29);
                    worksheet.Cells[6, 11].AutoFitColumns(13.5);
                    worksheet.Cells[6, 17].AutoFitColumns(11);
                    worksheet.Cells[6, 19].AutoFitColumns(11);
                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void CreateExcel_1(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath, string ColorType = "", string iUserType = "")
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                    int TotalRow = dtDiamonds.Rows.Count;
                    int i;
                    string values_1, S_Detail, cut, status, ForCust_Hold;
                    Int64 number_1;
                    bool success1;

                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";
                    p.Workbook.Worksheets.Add("SearchStock");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    Color col_color_Red = System.Drawing.ColorTranslator.FromHtml("#ff0000");

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(col_color_Red);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 47].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;

                    worksheet.Cells[6, 1, 6, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 47].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 47].Style.Font.Bold = true;

                    worksheet.Cells[6, 1, 6, 47].AutoFilter = true;
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 47].Style.Fill;
                    cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    worksheet.Cells[6, 2].Value = "DNA";
                    worksheet.Cells[6, 3].Value = "View Image";
                    worksheet.Cells[6, 4].Value = "HD Movie";
                    worksheet.Cells[6, 5].Value = "Stock Id";
                    worksheet.Cells[6, 6].Value = "Location";
                    worksheet.Cells[6, 7].Value = "Status";

                    worksheet.Cells[6, 8].Value = "Shape";
                    worksheet.Cells[6, 9].Value = "Pointer";
                    worksheet.Cells[6, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 9].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                    worksheet.Cells[6, 10].Value = "Lab";
                    worksheet.Cells[6, 11].Value = "Certi No.";
                    worksheet.Cells[6, 12].Value = "BGM";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cts";

                    worksheet.Cells[6, 16].Value = "Rap Price($)";
                    worksheet.Cells[6, 17].Value = "Rap Amt($)";
                    worksheet.Cells[6, 18].Value = "Offer Disc.(%)"; // "Disc(%)";
                    worksheet.Cells[6, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 18].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                    worksheet.Cells[6, 19].Value = "Offer Value($)"; // "Net Amt($)";
                    worksheet.Cells[6, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                    worksheet.Cells[6, 20].Value = "Price/Cts";

                    worksheet.Cells[6, 21].Value = "Cut";
                    worksheet.Cells[6, 22].Value = "Polish";
                    worksheet.Cells[6, 23].Value = "Symm";
                    worksheet.Cells[6, 24].Value = "Fls";
                    worksheet.Cells[6, 25].Value = "Length";
                    worksheet.Cells[6, 26].Value = "Width";
                    worksheet.Cells[6, 27].Value = "Depth";
                    worksheet.Cells[6, 28].Value = "Depth(%)";
                    worksheet.Cells[6, 29].Value = "Table(%)";
                    worksheet.Cells[6, 30].Value = "Key To Symbol";
                    worksheet.Cells[6, 31].Value = "GIA Comment";
                    worksheet.Cells[6, 32].Value = "Culet";
                    worksheet.Cells[6, 33].Value = "Table Black";
                    worksheet.Cells[6, 34].Value = "Crown Black";
                    worksheet.Cells[6, 35].Value = "Table White";
                    worksheet.Cells[6, 36].Value = "Crown White";
                    worksheet.Cells[6, 37].Value = "Cr Ang";
                    worksheet.Cells[6, 38].Value = "Cr Ht";
                    worksheet.Cells[6, 39].Value = "Pav Ang";
                    worksheet.Cells[6, 40].Value = "Pav Ht";
                    worksheet.Cells[6, 41].Value = "Table Open";
                    worksheet.Cells[6, 42].Value = "Crown Open";
                    worksheet.Cells[6, 43].Value = "Pav Open";
                    worksheet.Cells[6, 44].Value = "Girdle Open";
                    worksheet.Cells[6, 45].Value = "Girdle(%)";   //41
                    worksheet.Cells[6, 46].Value = "Girdle Type"; //42
                    worksheet.Cells[6, 47].Value = "Laser Insc";  //43

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 47].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10.14);
                    worksheet.Cells[6, 7].AutoFitColumns(10.5);
                    worksheet.Cells[6, 8].AutoFitColumns(9.57);
                    worksheet.Cells[6, 9].AutoFitColumns(8.14);
                    worksheet.Cells[6, 10].AutoFitColumns(12);//8.14
                    worksheet.Cells[6, 11].AutoFitColumns(13.5);
                    worksheet.Cells[6, 12].AutoFitColumns(8.43);
                    if (ColorType == "Fancy")
                    {
                        worksheet.Cells[6, 13].AutoFitColumns(26);
                    }
                    else
                    {
                        worksheet.Cells[6, 13].AutoFitColumns(9.29);
                    }
                    worksheet.Cells[6, 14].AutoFitColumns(13);
                    worksheet.Cells[6, 15].AutoFitColumns(10.50);
                    worksheet.Cells[6, 16].AutoFitColumns(8.14);
                    worksheet.Cells[6, 17].AutoFitColumns(12);
                    worksheet.Cells[6, 18].AutoFitColumns(10.50);
                    worksheet.Cells[6, 19].AutoFitColumns(13);
                    worksheet.Cells[6, 20].AutoFitColumns(8.14);
                    worksheet.Cells[6, 21].AutoFitColumns(7.86);
                    worksheet.Cells[6, 22].AutoFitColumns(7.86);
                    worksheet.Cells[6, 23].AutoFitColumns(7.86);
                    worksheet.Cells[6, 24].AutoFitColumns(7.86);
                    worksheet.Cells[6, 25].AutoFitColumns(7.86);
                    worksheet.Cells[6, 26].AutoFitColumns(7.86);
                    worksheet.Cells[6, 27].AutoFitColumns(7.86);
                    worksheet.Cells[6, 28].AutoFitColumns(9);
                    worksheet.Cells[6, 29].AutoFitColumns(7.9);
                    worksheet.Cells[6, 30].AutoFitColumns(35.29);
                    worksheet.Cells[6, 31].AutoFitColumns(38);
                    worksheet.Cells[6, 32].AutoFitColumns(7.86);
                    worksheet.Cells[6, 33].AutoFitColumns(7.86);
                    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    worksheet.Cells[6, 35].AutoFitColumns(7.86);
                    worksheet.Cells[6, 36].AutoFitColumns(7.86);
                    worksheet.Cells[6, 37].AutoFitColumns(7.86);
                    worksheet.Cells[6, 38].AutoFitColumns(7.86);
                    worksheet.Cells[6, 39].AutoFitColumns(7.86);
                    worksheet.Cells[6, 40].AutoFitColumns(7.86);
                    worksheet.Cells[6, 41].AutoFitColumns(7.86);
                    worksheet.Cells[6, 42].AutoFitColumns(7.86);
                    worksheet.Cells[6, 43].AutoFitColumns(7.86);
                    worksheet.Cells[6, 44].AutoFitColumns(7.86);
                    worksheet.Cells[6, 45].AutoFitColumns(7.86); //41
                    worksheet.Cells[6, 46].AutoFitColumns(7.86); //42
                    worksheet.Cells[6, 47].AutoFitColumns(7.86); //43

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion
                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int pairNo, tempPairNo = 0;
                    bool PairLastColumn = false;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        if (_strFilePath.Contains("PairSearch"))
                        {
                            pairNo = ((dtDiamonds.Rows[i - inStartIndex]["pair_no"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["pair_no"].GetType().Name != "DBNull" ?
                                Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["pair_no"]) : 0) : 0);

                            if (tempPairNo > 0)
                            {
                                if (pairNo != tempPairNo)
                                {
                                    tempPairNo = pairNo;
                                    PairLastColumn = true;
                                }
                                else
                                {
                                    PairLastColumn = false;
                                }
                            }
                            else
                            {
                                tempPairNo = pairNo;
                                PairLastColumn = false;
                            }
                        }
                        else
                        {
                            PairLastColumn = false;
                        }

                        if (PairLastColumn)
                        {
                            worksheet.Cells[(inwrkrow - 1), 1, (inwrkrow - 1), 47].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        }

                        string Table_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 11].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);

                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                        //worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);

                        //worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);

                        S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                        //{
                        //    var Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                        //    if (Image != "")
                        //    {
                        //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        var img = false;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        }


                        if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            var Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                        success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 5].Value = values_1;
                        }
                        worksheet.Cells[inwrkrow, 6].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                        status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["status"]).ToLower();
                        ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                        if (status == "available offer")
                            status = "Offer";
                        else if (status == "buss. process" && ForCust_Hold == "1")
                            status = "Busy";
                        else if (status == "buss. process")
                            status = "Busy";

                        worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(status);

                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                        string certi_type = (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) : "");

                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]) + certi_type;
                        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);

                        if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                        {
                            var Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                            if (Certificate != "")
                            {
                                //worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Certificate + "\",\" " + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" " + dtDiamonds.Rows[i - inStartIndex]["lab"] + certi_type + " \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                        success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]).ToString();
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 11].Value = values_1;
                        }

                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);

                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]);

                        string cur_rap_rate = dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].ToString();

                        //16 Rap Price($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]);
                        }

                        //17 Rap Amt($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 17].Formula = "=P" + inwrkrow + "*O" + inwrkrow;
                        }

                        //18 Offer Disc.(%)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]);
                        }

                        //19 Offer Value($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 19].Formula = "=Q" + inwrkrow + "+(" + "Q" + inwrkrow + "*R" + inwrkrow + "/100" + ")";
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]);
                        }

                        //20 Price/Cts
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 20].Formula = "=S" + inwrkrow + "/O" + inwrkrow;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]);
                        }

                        cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                        worksheet.Cells[inwrkrow, 21].Value = (cut == "FR" ? "F" : cut);
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 21].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]);

                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]);

                        //worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]);
                        worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                        //worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]);
                        worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                        //worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["symbol"].ToString());
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sComments"]);
                        worksheet.Cells[inwrkrow, 32].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                        worksheet.Cells[inwrkrow, 37].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                        worksheet.Cells[inwrkrow, 38].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                        worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                        worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);
                        try
                        {
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]);
                        }
                        catch { }

                        worksheet.Cells[inwrkrow, 46].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());

                        worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 47].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 20].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Font.Bold = true;

                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                    worksheet.Cells[inStartIndex, 25, (inwrkrow - 1), 29].Style.Numberformat.Format = "0.00";
                    worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 40].Style.Numberformat.Format = "0.00";
                    worksheet.Cells[inStartIndex, 45, (inwrkrow - 1), 45].Style.Numberformat.Format = "0.00";

                    worksheet.Cells[5, 5].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 5].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 5].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 15].Style;
                    cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                            = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";

                    ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 17].Style;
                    cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                            = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //=IF(SUBTOTAL(109,Q7: Q1020)=0,0,ROUND((1-(SUBTOTAL(109,S7:S12347)/SUBTOTAL(109,Q7:Q12347)))*(-100),2))
                    worksheet.Cells[5, 18].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                            = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateExcel(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath, string ColorType = "", string iUserType = "")
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                    int TotalRow = dtDiamonds.Rows.Count;
                    int i;
                    string values_1, S_Detail, cut, status, ForCust_Hold;
                    Int64 number_1;
                    bool success1;

                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";
                    p.Workbook.Worksheets.Add("SearchStock");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    Color col_color_Red = System.Drawing.ColorTranslator.FromHtml("#ff0000");

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(col_color_Red);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 49].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;

                    worksheet.Cells[6, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 49].Style.Font.Bold = true;

                    worksheet.Cells[6, 1, 6, 49].AutoFilter = true;
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 49].Style.Fill;
                    cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    worksheet.Cells[6, 2].Value = "DNA";
                    worksheet.Cells[6, 3].Value = "View Image";
                    worksheet.Cells[6, 4].Value = "HD Movie";
                    worksheet.Cells[6, 5].Value = "Stock Id";
                    worksheet.Cells[6, 6].Value = "Location";
                    worksheet.Cells[6, 7].Value = "Status";

                    worksheet.Cells[6, 8].Value = "Shape";
                    worksheet.Cells[6, 9].Value = "Pointer";
                    worksheet.Cells[6, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 9].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                    worksheet.Cells[6, 10].Value = "Lab";
                    worksheet.Cells[6, 11].Value = "Certi Type";
                    worksheet.Cells[6, 12].Value = "Certi No.";
                    worksheet.Cells[6, 13].Value = "BGM";
                    worksheet.Cells[6, 14].Value = "Color";
                    worksheet.Cells[6, 15].Value = "Clarity";
                    worksheet.Cells[6, 16].Value = "Cts";

                    worksheet.Cells[6, 17].Value = "Rap Price($)";
                    worksheet.Cells[6, 18].Value = "Rap Amt($)";
                    worksheet.Cells[6, 19].Value = "Offer Disc.(%)"; // "Disc(%)";
                    worksheet.Cells[6, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                    worksheet.Cells[6, 20].Value = "Offer Value($)"; // "Net Amt($)";
                    worksheet.Cells[6, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                    worksheet.Cells[6, 21].Value = "Price/Cts";

                    worksheet.Cells[6, 22].Value = "Cut";
                    worksheet.Cells[6, 23].Value = "Polish";
                    worksheet.Cells[6, 24].Value = "Symm";
                    worksheet.Cells[6, 25].Value = "Fls";
                    worksheet.Cells[6, 26].Value = "Ratio";
                    worksheet.Cells[6, 27].Value = "Length";
                    worksheet.Cells[6, 28].Value = "Width";
                    worksheet.Cells[6, 29].Value = "Depth";
                    worksheet.Cells[6, 30].Value = "Depth(%)";
                    worksheet.Cells[6, 31].Value = "Table(%)";
                    worksheet.Cells[6, 32].Value = "Key To Symbol";
                    worksheet.Cells[6, 33].Value = "GIA Comment";
                    worksheet.Cells[6, 34].Value = "Culet";
                    worksheet.Cells[6, 35].Value = "Table Black";
                    worksheet.Cells[6, 36].Value = "Crown Black";
                    worksheet.Cells[6, 37].Value = "Table White";
                    worksheet.Cells[6, 38].Value = "Crown White";
                    worksheet.Cells[6, 39].Value = "Cr Ang";
                    worksheet.Cells[6, 40].Value = "Cr Ht";
                    worksheet.Cells[6, 41].Value = "Pav Ang";
                    worksheet.Cells[6, 42].Value = "Pav Ht";
                    worksheet.Cells[6, 43].Value = "Table Open";
                    worksheet.Cells[6, 44].Value = "Crown Open";
                    worksheet.Cells[6, 45].Value = "Pav Open";
                    worksheet.Cells[6, 46].Value = "Girdle Open";
                    worksheet.Cells[6, 47].Value = "Girdle(%)";   //41
                    worksheet.Cells[6, 48].Value = "Girdle Type"; //42
                    worksheet.Cells[6, 49].Value = "Laser Insc";  //43

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 49].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(9);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(9);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10.14);
                    worksheet.Cells[6, 7].AutoFitColumns(10.5);
                    worksheet.Cells[6, 8].AutoFitColumns(9.57);
                    worksheet.Cells[6, 9].AutoFitColumns(9);
                    worksheet.Cells[6, 10].AutoFitColumns(6.70);//8.14
                    worksheet.Cells[6, 11].AutoFitColumns(9.50);//8.14
                    worksheet.Cells[6, 12].AutoFitColumns(13.5);
                    worksheet.Cells[6, 13].AutoFitColumns(8.43);
                    if (ColorType == "Fancy")
                    {
                        worksheet.Cells[6, 14].AutoFitColumns(26);
                    }
                    else
                    {
                        worksheet.Cells[6, 14].AutoFitColumns(9.29);
                    }
                    worksheet.Cells[6, 15].AutoFitColumns(8.43);
                    worksheet.Cells[6, 16].AutoFitColumns(8.43);
                    worksheet.Cells[6, 17].AutoFitColumns(13);
                    worksheet.Cells[6, 18].AutoFitColumns(13);
                    worksheet.Cells[6, 19].AutoFitColumns(10.50);
                    worksheet.Cells[6, 20].AutoFitColumns(13);
                    worksheet.Cells[6, 21].AutoFitColumns(9);
                    worksheet.Cells[6, 22].AutoFitColumns(7.86);
                    worksheet.Cells[6, 23].AutoFitColumns(7.86);
                    worksheet.Cells[6, 24].AutoFitColumns(7.86);
                    worksheet.Cells[6, 25].AutoFitColumns(7.86);
                    worksheet.Cells[6, 26].AutoFitColumns(7.86);
                    worksheet.Cells[6, 27].AutoFitColumns(7.86);
                    worksheet.Cells[6, 28].AutoFitColumns(7.86);
                    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    worksheet.Cells[6, 30].AutoFitColumns(9);
                    worksheet.Cells[6, 31].AutoFitColumns(7.9);
                    worksheet.Cells[6, 32].AutoFitColumns(35.29);
                    worksheet.Cells[6, 33].AutoFitColumns(38);
                    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    worksheet.Cells[6, 35].AutoFitColumns(7.86);
                    worksheet.Cells[6, 36].AutoFitColumns(7.86);
                    worksheet.Cells[6, 37].AutoFitColumns(7.86);
                    worksheet.Cells[6, 38].AutoFitColumns(7.86);
                    worksheet.Cells[6, 39].AutoFitColumns(7.86);
                    worksheet.Cells[6, 40].AutoFitColumns(7.86);
                    worksheet.Cells[6, 41].AutoFitColumns(7.86);
                    worksheet.Cells[6, 42].AutoFitColumns(7.86);
                    worksheet.Cells[6, 43].AutoFitColumns(7.86);
                    worksheet.Cells[6, 44].AutoFitColumns(7.86);
                    worksheet.Cells[6, 45].AutoFitColumns(7.86);
                    worksheet.Cells[6, 46].AutoFitColumns(7.86);
                    worksheet.Cells[6, 47].AutoFitColumns(7.86); //41
                    worksheet.Cells[6, 48].AutoFitColumns(7.86); //42
                    worksheet.Cells[6, 49].AutoFitColumns(7.86); //43

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion
                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int pairNo, tempPairNo = 0;
                    bool PairLastColumn = false;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        if (_strFilePath.Contains("PairSearch"))
                        {
                            pairNo = ((dtDiamonds.Rows[i - inStartIndex]["pair_no"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["pair_no"].GetType().Name != "DBNull" ?
                                Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["pair_no"]) : 0) : 0);

                            if (tempPairNo > 0)
                            {
                                if (pairNo != tempPairNo)
                                {
                                    tempPairNo = pairNo;
                                    PairLastColumn = true;
                                }
                                else
                                {
                                    PairLastColumn = false;
                                }
                            }
                            else
                            {
                                tempPairNo = pairNo;
                                PairLastColumn = false;
                            }
                        }
                        else
                        {
                            PairLastColumn = false;
                        }

                        if (PairLastColumn)
                        {
                            worksheet.Cells[(inwrkrow - 1), 1, (inwrkrow - 1), 49].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        }

                        string Table_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 12].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);

                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                        //worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);

                        //worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);

                        S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                        //{
                        //    var Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                        //    if (Image != "")
                        //    {
                        //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        var img = false;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        }


                        if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            var Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                        success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 5].Value = values_1;
                        }
                        worksheet.Cells[inwrkrow, 6].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                        status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["status"]).ToLower();
                        ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                        if (status == "available offer")
                            status = "Offer";
                        else if (status == "buss. process" && ForCust_Hold == "1")
                            status = "Busy";
                        else if (status == "buss. process")
                            status = "Busy";

                        worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(status);

                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                        string certi_type = (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) : "");

                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);

                        if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                        {
                            var Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                            if (Certificate != "")
                            {
                                //worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Certificate + "\",\" " + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" " + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);
                        //worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]) != "")
                        {
                            //var CertiTypeLink = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]);
                            var CertiTypeLink = External_CertiTypeURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"];
                            var Certi_Type = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);

                            worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                            worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                        }

                        values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                        success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["certi_no"]).ToString();
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 12].Value = values_1;
                        }

                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);

                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]);

                        string cur_rap_rate = dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].ToString();

                        //16 Rap Price($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]);
                        }

                        //17 Rap Amt($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 18].Formula = "=Q" + inwrkrow + "*P" + inwrkrow;
                        }

                        //18 Offer Disc.(%)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]);
                        }

                        //19 Offer Value($)
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 20].Formula = "=R" + inwrkrow + "+(" + "R" + inwrkrow + "*S" + inwrkrow + "/100" + ")";
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]);
                        }

                        //20 Price/Cts
                        if (cur_rap_rate != "" && cur_rap_rate != null)
                        {
                            worksheet.Cells[inwrkrow, 21].Formula = "=T" + inwrkrow + "/P" + inwrkrow;
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]);
                        }

                        cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                        worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);
                        worksheet.Cells[inwrkrow, 26].Value = ((dtDiamonds.Rows[i - inStartIndex]["RATIO"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]);

                        //worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]);
                        worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                        //worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]);
                        worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                        //worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["symbol"].ToString());
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sComments"]);
                        worksheet.Cells[inwrkrow, 34].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);

                        worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];
                        worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];
                        worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];
                        worksheet.Cells[inwrkrow, 42].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                        worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);
                        worksheet.Cells[inwrkrow, 47].Value = Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]);

                        worksheet.Cells[inwrkrow, 48].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());

                        worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 49].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;

                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                    worksheet.Cells[inStartIndex, 27, (inwrkrow - 1), 31].Style.Numberformat.Format = "0.00";
                    worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 42].Style.Numberformat.Format = "0.00";
                    worksheet.Cells[inStartIndex, 47, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                    worksheet.Cells[5, 5].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 5].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 5].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                            = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";

                    ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                            = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //=IF(SUBTOTAL(109,Q7: Q1020)=0,0,ROUND((1-(SUBTOTAL(109,S7:S12347)/SUBTOTAL(109,Q7:Q12347)))*(-100),2))
                    worksheet.Cells[5, 19].Formula = "IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";

                    ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 20].Style;
                    cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                            = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateCartExcel_1(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("MyCart");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 19].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int inStartIndex, inwrkrow, inEndCounter, TotalRow, i;

                    string values_1, Image, Video, hyprlink1, S_Detail, Certificate, status, cut, ForCust_Hold;
                    Int64 number_1;
                    bool success1;

                    if (isAdmin)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 49].AutoFilter = true;

                        worksheet.Cells[6, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[6, 1, 6, 49].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 49].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "User Name";
                        worksheet.Cells[6, 4].Value = "Company Name";
                        worksheet.Cells[6, 5].Value = "Assist By";
                        worksheet.Cells[6, 6].Value = "Stock Id";
                        worksheet.Cells[6, 7].Value = "Location";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "DNA";
                        worksheet.Cells[6, 10].Value = "View Image";
                        worksheet.Cells[6, 11].Value = "HD Movie";

                        worksheet.Cells[6, 12].Value = "Shape";
                        worksheet.Cells[6, 13].Value = "Pointer";
                        var cellBackgroundColor_Pointer = worksheet.Cells[6, 13].Style.Fill;
                        cellBackgroundColor_Pointer.PatternType = ExcelFillStyle.Solid;
                        cellBackgroundColor_Pointer.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 14].Value = "Lab";
                        worksheet.Cells[6, 15].Value = "Certi No.";
                        worksheet.Cells[6, 16].Value = "BGM";
                        worksheet.Cells[6, 17].Value = "Color";
                        worksheet.Cells[6, 18].Value = "Clarity";
                        worksheet.Cells[6, 19].Value = "Cts";
                        worksheet.Cells[6, 20].Value = "Rap Price($)";
                        worksheet.Cells[6, 21].Value = "Rap Amt($)";
                        worksheet.Cells[6, 22].Value = "Disc(%)";
                        worksheet.Cells[6, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 22].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 23].Value = "Net Amt($)";
                        worksheet.Cells[6, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                        worksheet.Cells[6, 24].Value = "Price/Cts";

                        worksheet.Cells[6, 25].Value = "Cut";
                        worksheet.Cells[6, 26].Value = "Polish";
                        worksheet.Cells[6, 27].Value = "Symm";
                        worksheet.Cells[6, 28].Value = "Fls";
                        worksheet.Cells[6, 29].Value = "Length";
                        worksheet.Cells[6, 30].Value = "Width";
                        worksheet.Cells[6, 31].Value = "Depth";
                        worksheet.Cells[6, 32].Value = "Depth(%)";
                        worksheet.Cells[6, 33].Value = "Table(%)";
                        worksheet.Cells[6, 34].Value = "Key To Symbol";
                        worksheet.Cells[6, 35].Value = "Table Black";
                        worksheet.Cells[6, 36].Value = "Crown Black";
                        worksheet.Cells[6, 37].Value = "Table White";
                        worksheet.Cells[6, 38].Value = "Crown White";
                        worksheet.Cells[6, 39].Value = "Cr Ang";
                        worksheet.Cells[6, 40].Value = "Cr Ht";
                        worksheet.Cells[6, 41].Value = "Pav Ang";
                        worksheet.Cells[6, 42].Value = "Pav Ht";
                        worksheet.Cells[6, 43].Value = "Table Open";
                        worksheet.Cells[6, 44].Value = "Crown Open";
                        worksheet.Cells[6, 45].Value = "Pav Open";
                        worksheet.Cells[6, 46].Value = "Girdle Open";
                        worksheet.Cells[6, 47].Value = "Girdle %";      //43
                        worksheet.Cells[6, 48].Value = "Girdle Type";   //44
                        worksheet.Cells[6, 49].Value = "Laser Insc";    //45

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 49].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(14);
                        worksheet.Cells[6, 5].AutoFitColumns(12);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(10);
                        worksheet.Cells[6, 8].AutoFitColumns(10.5);
                        worksheet.Cells[6, 9].AutoFitColumns(8.86);
                        worksheet.Cells[6, 10].AutoFitColumns(9);
                        worksheet.Cells[6, 11].AutoFitColumns(12);
                        worksheet.Cells[6, 12].AutoFitColumns(9.57);
                        worksheet.Cells[6, 13].AutoFitColumns(8.14);
                        worksheet.Cells[6, 14].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 15].AutoFitColumns(13.5);
                        worksheet.Cells[6, 16].AutoFitColumns(8.43);
                        worksheet.Cells[6, 17].AutoFitColumns(9.29);
                        worksheet.Cells[6, 18].AutoFitColumns(13);
                        worksheet.Cells[6, 19].AutoFitColumns(8.14);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(11);
                        worksheet.Cells[6, 22].AutoFitColumns(8.14);
                        worksheet.Cells[6, 23].AutoFitColumns(16);
                        worksheet.Cells[6, 24].AutoFitColumns(8.14);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(9);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(35.29);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);    //43
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);    //44
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);    //45

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, inEndCounter, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 6, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cust_name"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["cust_name"]);
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CompName"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["CompName"]);
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["AssistBy1"]);

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(status);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            string certi_type = (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) : "");

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 15].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 15].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                            worksheet.Cells[inwrkrow, 19].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                           (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                          (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                          Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 24].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 25].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 42].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 47].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 48].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 49].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, (inwrkrow - 1), 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 24].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 33].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 42].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 47, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 6].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";


                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,U7: U1020)=0,0,100)
                        worksheet.Cells[5, 22].Formula = "=IF(SUBTOTAL(109,U" + inStartIndex + ": U" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")/SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 22].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;


                        worksheet.Cells[5, 23].Formula = "ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 23].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }
                    else if (isEmp)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 48].AutoFilter = true;

                        worksheet.Cells[6, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[6, 1, 6, 48].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 48].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Assist By";
                        worksheet.Cells[6, 4].Value = "Stock Id";
                        worksheet.Cells[6, 5].Value = "Location";
                        worksheet.Cells[6, 6].Value = "Status";
                        worksheet.Cells[6, 7].Value = "DNA";
                        worksheet.Cells[6, 8].Value = "View Image";
                        worksheet.Cells[6, 9].Value = "HD Movie";

                        worksheet.Cells[6, 10].Value = "Shape";
                        worksheet.Cells[6, 11].Value = "Pointer";
                        worksheet.Cells[6, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 11].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 12].Value = "Lab";
                        worksheet.Cells[6, 13].Value = "Certi No.";
                        worksheet.Cells[6, 14].Value = "BGM";
                        worksheet.Cells[6, 15].Value = "Color ";
                        worksheet.Cells[6, 16].Value = "Clarity";
                        worksheet.Cells[6, 17].Value = "Cts";
                        worksheet.Cells[6, 18].Value = "Rap Price($)";
                        worksheet.Cells[6, 19].Value = "Rap Amt($)";
                        worksheet.Cells[6, 20].Value = "Disc (%)";
                        worksheet.Cells[6, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 21].Value = "Net Amt($)";
                        worksheet.Cells[6, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 22].Value = "Price / Cts";
                        worksheet.Cells[6, 23].Value = "Cut";
                        worksheet.Cells[6, 24].Value = "Polish";
                        worksheet.Cells[6, 25].Value = "Symm";
                        worksheet.Cells[6, 26].Value = "Fls";
                        worksheet.Cells[6, 27].Value = "Length";
                        worksheet.Cells[6, 28].Value = "Width";
                        worksheet.Cells[6, 29].Value = "Depth";
                        worksheet.Cells[6, 30].Value = "Depth (%)";
                        worksheet.Cells[6, 31].Value = "Table (%)";
                        worksheet.Cells[6, 32].Value = "Key To Symbol";
                        worksheet.Cells[6, 33].Value = "Culet";
                        worksheet.Cells[6, 34].Value = "Table Black";
                        worksheet.Cells[6, 35].Value = "Crown Black";
                        worksheet.Cells[6, 36].Value = "Table White";
                        worksheet.Cells[6, 37].Value = "Crown White";
                        worksheet.Cells[6, 38].Value = "Cr Ang";
                        worksheet.Cells[6, 39].Value = "Cr Ht";
                        worksheet.Cells[6, 40].Value = "Pav Ang";
                        worksheet.Cells[6, 41].Value = "Pav Ht";
                        worksheet.Cells[6, 42].Value = "Table Open";
                        worksheet.Cells[6, 43].Value = "Crown Open";
                        worksheet.Cells[6, 44].Value = "Pav Open";
                        worksheet.Cells[6, 45].Value = "Girdle Open";
                        worksheet.Cells[6, 46].Value = "Girdle %";
                        worksheet.Cells[6, 47].Value = "Girdle Type";
                        worksheet.Cells[6, 48].Value = "Laser Insc";

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 48].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10.14);
                        worksheet.Cells[6, 6].AutoFitColumns(10.5);
                        worksheet.Cells[6, 7].AutoFitColumns(8.86);
                        worksheet.Cells[6, 8].AutoFitColumns(9);
                        worksheet.Cells[6, 9].AutoFitColumns(12);
                        worksheet.Cells[6, 10].AutoFitColumns(9.57);
                        worksheet.Cells[6, 11].AutoFitColumns(8.14);
                        worksheet.Cells[6, 12].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 13].AutoFitColumns(13.5);
                        worksheet.Cells[6, 14].AutoFitColumns(8.43);
                        worksheet.Cells[6, 15].AutoFitColumns(9.29);
                        worksheet.Cells[6, 16].AutoFitColumns(13);
                        worksheet.Cells[6, 17].AutoFitColumns(8.14);
                        worksheet.Cells[6, 18].AutoFitColumns(8.14);
                        worksheet.Cells[6, 19].AutoFitColumns(11);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(16);
                        worksheet.Cells[6, 22].AutoFitColumns(8.14);
                        worksheet.Cells[6, 23].AutoFitColumns(7.86);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(35.29);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);    //42
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);    //43
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);    //44

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 3, inEndCounter, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 4, inEndCounter, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["AssistBy1"]).ToLower());

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 4].Value = values_1;
                            }
                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 6].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            string certi_type = (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) : "");

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 12].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 13].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 13].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                            worksheet.Cells[inwrkrow, 17].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 18].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);
                            worksheet.Cells[inwrkrow, 27].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 33].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 38].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 46].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 47].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, (inwrkrow - 1), 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 11].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 17, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 27, (inwrkrow - 1), 31].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 38, (inwrkrow - 1), 41].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 46, (inwrkrow - 1), 46].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 4].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 4].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 4].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 4].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 17].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100)
                        worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,S" + inStartIndex + ": S" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*(-100)),2))";

                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 47].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 47].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 47].AutoFilter = true;

                        worksheet.Cells[6, 1, 6, 47].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 47].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Stock Id";
                        worksheet.Cells[6, 4].Value = "Location";
                        worksheet.Cells[6, 5].Value = "Status";
                        worksheet.Cells[6, 6].Value = "DNA";
                        worksheet.Cells[6, 7].Value = "View Image";
                        worksheet.Cells[6, 8].Value = "HD Movie";

                        worksheet.Cells[6, 9].Value = "Shape";
                        worksheet.Cells[6, 10].Value = "Pointer";
                        worksheet.Cells[6, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 11].Value = "Lab";
                        worksheet.Cells[6, 12].Value = "Certi No.";
                        worksheet.Cells[6, 13].Value = "BGM";
                        worksheet.Cells[6, 14].Value = "Color";
                        worksheet.Cells[6, 15].Value = "Clarity";
                        worksheet.Cells[6, 16].Value = "Cts";
                        worksheet.Cells[6, 17].Value = "Rap Price($)";
                        worksheet.Cells[6, 18].Value = "Rap Amt($)";
                        worksheet.Cells[6, 19].Value = "Disc(%)";
                        worksheet.Cells[6, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 20].Value = "Net Amt($)";
                        worksheet.Cells[6, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                        worksheet.Cells[6, 21].Value = "Price/Cts";
                        worksheet.Cells[6, 22].Value = "Cut";
                        worksheet.Cells[6, 23].Value = "Polish";
                        worksheet.Cells[6, 24].Value = "Symm";
                        worksheet.Cells[6, 25].Value = "Fls";
                        worksheet.Cells[6, 26].Value = "Length";
                        worksheet.Cells[6, 27].Value = "Width";
                        worksheet.Cells[6, 28].Value = "Depth";
                        worksheet.Cells[6, 29].Value = "Depth(%)";
                        worksheet.Cells[6, 30].Value = "Table(%)";
                        worksheet.Cells[6, 31].Value = "Key To Symbol";
                        worksheet.Cells[6, 32].Value = "Culet";
                        worksheet.Cells[6, 33].Value = "Table Black";
                        worksheet.Cells[6, 34].Value = "Crown Black";
                        worksheet.Cells[6, 35].Value = "Table White";
                        worksheet.Cells[6, 36].Value = "Crown White";
                        worksheet.Cells[6, 37].Value = "Cr Ang";
                        worksheet.Cells[6, 38].Value = "Cr Ht";
                        worksheet.Cells[6, 39].Value = "Pav Ang";
                        worksheet.Cells[6, 40].Value = "Pav Ht";
                        worksheet.Cells[6, 41].Value = "Table Open";
                        worksheet.Cells[6, 42].Value = "Crown Open";
                        worksheet.Cells[6, 43].Value = "Pav Open";
                        worksheet.Cells[6, 44].Value = "Girdle Open";
                        worksheet.Cells[6, 45].Value = "Girdle(%)";
                        worksheet.Cells[6, 46].Value = "Girdle Type";
                        worksheet.Cells[6, 47].Value = "Laser Insc";

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 47].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(10);
                        worksheet.Cells[6, 4].AutoFitColumns(10);
                        worksheet.Cells[6, 5].AutoFitColumns(10.5);
                        worksheet.Cells[6, 6].AutoFitColumns(8.86);
                        worksheet.Cells[6, 7].AutoFitColumns(9);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(9.57);
                        worksheet.Cells[6, 10].AutoFitColumns(8.14);
                        worksheet.Cells[6, 11].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 12].AutoFitColumns(13.5);
                        worksheet.Cells[6, 13].AutoFitColumns(8.43);
                        worksheet.Cells[6, 14].AutoFitColumns(9.29);
                        worksheet.Cells[6, 15].AutoFitColumns(13);
                        worksheet.Cells[6, 16].AutoFitColumns(8.14);
                        worksheet.Cells[6, 17].AutoFitColumns(8.14);
                        worksheet.Cells[6, 18].AutoFitColumns(11);
                        worksheet.Cells[6, 19].AutoFitColumns(8.14);
                        worksheet.Cells[6, 20].AutoFitColumns(16);
                        worksheet.Cells[6, 21].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(7.86);
                        worksheet.Cells[6, 23].AutoFitColumns(7.86);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(9);
                        worksheet.Cells[6, 30].AutoFitColumns(7.9);
                        worksheet.Cells[6, 31].AutoFitColumns(35.29);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 3].Value = values_1;
                            }
                            worksheet.Cells[inwrkrow, 4].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 6].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 6].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 6].Style.Font.Color.SetColor(Color.Blue);
                            }


                            //worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            string certi_type = (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 12].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 12].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);

                            worksheet.Cells[inwrkrow, 16].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 17].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 18].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                            worksheet.Cells[inwrkrow, 26].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 32].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 37].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 38].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 45].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 46].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 47].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 47].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[inStartIndex, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 30].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 40].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 45, (inwrkrow - 1), 45].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 3].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 3].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 3].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 3].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 16].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 18].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 19].Formula = "=IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100)),2))";

                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateCartExcel(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("MyCart");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 19].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int inStartIndex, inwrkrow, inEndCounter, TotalRow, i;

                    string values_1, Image, Video, hyprlink1, S_Detail, Certificate, status, cut, ForCust_Hold;
                    Int64 number_1;
                    bool success1;

                    if (isAdmin)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 51].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 51].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 51].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 51].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 51].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 51].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 51].AutoFilter = true;

                        worksheet.Cells[6, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[6, 1, 6, 51].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 51].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "User Name";
                        worksheet.Cells[6, 4].Value = "Company Name";
                        worksheet.Cells[6, 5].Value = "Assist By";
                        worksheet.Cells[6, 6].Value = "Stock Id";
                        worksheet.Cells[6, 7].Value = "Location";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "DNA";
                        worksheet.Cells[6, 10].Value = "View Image";
                        worksheet.Cells[6, 11].Value = "HD Movie";

                        worksheet.Cells[6, 12].Value = "Shape";
                        worksheet.Cells[6, 13].Value = "Pointer";
                        var cellBackgroundColor_Pointer = worksheet.Cells[6, 13].Style.Fill;
                        cellBackgroundColor_Pointer.PatternType = ExcelFillStyle.Solid;
                        cellBackgroundColor_Pointer.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 14].Value = "Lab";
                        worksheet.Cells[6, 15].Value = "Certi Type";
                        worksheet.Cells[6, 16].Value = "Certi No.";
                        worksheet.Cells[6, 17].Value = "BGM";
                        worksheet.Cells[6, 18].Value = "Color";
                        worksheet.Cells[6, 19].Value = "Clarity";
                        worksheet.Cells[6, 20].Value = "Cts";
                        worksheet.Cells[6, 21].Value = "Rap Price($)";
                        worksheet.Cells[6, 22].Value = "Rap Amt($)";
                        worksheet.Cells[6, 23].Value = "Disc(%)";
                        worksheet.Cells[6, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 24].Value = "Net Amt($)";
                        worksheet.Cells[6, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 24].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                        worksheet.Cells[6, 25].Value = "Price/Cts";

                        worksheet.Cells[6, 26].Value = "Cut";
                        worksheet.Cells[6, 27].Value = "Polish";
                        worksheet.Cells[6, 28].Value = "Symm";
                        worksheet.Cells[6, 29].Value = "Fls";
                        worksheet.Cells[6, 30].Value = "Ratio";
                        worksheet.Cells[6, 31].Value = "Length";
                        worksheet.Cells[6, 32].Value = "Width";
                        worksheet.Cells[6, 33].Value = "Depth";
                        worksheet.Cells[6, 34].Value = "Depth(%)";
                        worksheet.Cells[6, 35].Value = "Table(%)";
                        worksheet.Cells[6, 36].Value = "Key To Symbol";
                        worksheet.Cells[6, 37].Value = "Table Black";
                        worksheet.Cells[6, 38].Value = "Crown Black";
                        worksheet.Cells[6, 39].Value = "Table White";
                        worksheet.Cells[6, 40].Value = "Crown White";
                        worksheet.Cells[6, 41].Value = "Cr Ang";
                        worksheet.Cells[6, 42].Value = "Cr Ht";
                        worksheet.Cells[6, 43].Value = "Pav Ang";
                        worksheet.Cells[6, 44].Value = "Pav Ht";
                        worksheet.Cells[6, 45].Value = "Table Open";
                        worksheet.Cells[6, 46].Value = "Crown Open";
                        worksheet.Cells[6, 47].Value = "Pav Open";
                        worksheet.Cells[6, 48].Value = "Girdle Open";
                        worksheet.Cells[6, 49].Value = "Girdle %";      //43
                        worksheet.Cells[6, 50].Value = "Girdle Type";   //44
                        worksheet.Cells[6, 51].Value = "Laser Insc";    //45

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 51].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(14);
                        worksheet.Cells[6, 5].AutoFitColumns(12);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(10);
                        worksheet.Cells[6, 8].AutoFitColumns(10.5);
                        worksheet.Cells[6, 9].AutoFitColumns(8.86);
                        worksheet.Cells[6, 10].AutoFitColumns(9);
                        worksheet.Cells[6, 11].AutoFitColumns(12);
                        worksheet.Cells[6, 12].AutoFitColumns(9.57);
                        worksheet.Cells[6, 13].AutoFitColumns(8.14);
                        worksheet.Cells[6, 14].AutoFitColumns(6.70);//8.14
                        worksheet.Cells[6, 15].AutoFitColumns(9.50);
                        worksheet.Cells[6, 16].AutoFitColumns(13.5);
                        worksheet.Cells[6, 17].AutoFitColumns(8.43);
                        worksheet.Cells[6, 18].AutoFitColumns(9.29);
                        worksheet.Cells[6, 19].AutoFitColumns(13);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(11);
                        worksheet.Cells[6, 23].AutoFitColumns(8.14);
                        worksheet.Cells[6, 24].AutoFitColumns(16);
                        worksheet.Cells[6, 25].AutoFitColumns(8.14);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(9);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(35.29);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);    //43
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);    //44
                        worksheet.Cells[6, 51].AutoFitColumns(7.86);    //45

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, inEndCounter, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 6, inEndCounter, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cust_name"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["cust_name"]);
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CompName"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["CompName"]);
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["AssistBy1"]);

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(status);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"];
                                var Certi_Type = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 15].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 16].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 16].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                           (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 24].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                          (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                          Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 25].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 26].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 28].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["RATIO"] != null) ?
                                                          (dtDiamonds.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                                                          Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 35].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 42].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 43].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 44].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 49].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 50].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 51].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 51].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 51].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, (inwrkrow - 1), 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 24].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 30, (inwrkrow - 1), 35].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 41, (inwrkrow - 1), 44].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 49, (inwrkrow - 1), 49].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 6].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";


                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 22].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,U7: U1020)=0,0,100)
                        worksheet.Cells[5, 23].Formula = "=IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + ")/SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 23].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;


                        worksheet.Cells[5, 24].Formula = "ROUND(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 24].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 24].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }
                    else if (isEmp)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 48].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 48].AutoFilter = true;

                        worksheet.Cells[6, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[6, 1, 6, 48].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 48].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Assist By";
                        worksheet.Cells[6, 4].Value = "Stock Id";
                        worksheet.Cells[6, 5].Value = "Location";
                        worksheet.Cells[6, 6].Value = "Status";
                        worksheet.Cells[6, 7].Value = "DNA";
                        worksheet.Cells[6, 8].Value = "View Image";
                        worksheet.Cells[6, 9].Value = "HD Movie";

                        worksheet.Cells[6, 10].Value = "Shape";
                        worksheet.Cells[6, 11].Value = "Pointer";
                        worksheet.Cells[6, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 11].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 12].Value = "Lab";
                        worksheet.Cells[6, 13].Value = "Certi Type";
                        worksheet.Cells[6, 14].Value = "Certi No.";
                        worksheet.Cells[6, 15].Value = "BGM";
                        worksheet.Cells[6, 16].Value = "Color ";
                        worksheet.Cells[6, 17].Value = "Clarity";
                        worksheet.Cells[6, 18].Value = "Cts";
                        worksheet.Cells[6, 19].Value = "Rap Price($)";
                        worksheet.Cells[6, 20].Value = "Rap Amt($)";
                        worksheet.Cells[6, 21].Value = "Disc (%)";
                        worksheet.Cells[6, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 22].Value = "Net Amt($)";
                        worksheet.Cells[6, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 22].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 23].Value = "Price / Cts";
                        worksheet.Cells[6, 24].Value = "Cut";
                        worksheet.Cells[6, 25].Value = "Polish";
                        worksheet.Cells[6, 26].Value = "Symm";
                        worksheet.Cells[6, 27].Value = "Fls";
                        worksheet.Cells[6, 28].Value = "Ratio";
                        worksheet.Cells[6, 29].Value = "Length";
                        worksheet.Cells[6, 30].Value = "Width";
                        worksheet.Cells[6, 31].Value = "Depth";
                        worksheet.Cells[6, 32].Value = "Depth (%)";
                        worksheet.Cells[6, 33].Value = "Table (%)";
                        worksheet.Cells[6, 34].Value = "Key To Symbol";
                        worksheet.Cells[6, 35].Value = "Culet";
                        worksheet.Cells[6, 36].Value = "Table Black";
                        worksheet.Cells[6, 37].Value = "Crown Black";
                        worksheet.Cells[6, 38].Value = "Table White";
                        worksheet.Cells[6, 39].Value = "Crown White";
                        worksheet.Cells[6, 40].Value = "Cr Ang";
                        worksheet.Cells[6, 41].Value = "Cr Ht";
                        worksheet.Cells[6, 42].Value = "Pav Ang";
                        worksheet.Cells[6, 43].Value = "Pav Ht";
                        worksheet.Cells[6, 44].Value = "Table Open";
                        worksheet.Cells[6, 45].Value = "Crown Open";
                        worksheet.Cells[6, 46].Value = "Pav Open";
                        worksheet.Cells[6, 47].Value = "Girdle Open";
                        worksheet.Cells[6, 48].Value = "Girdle %";
                        worksheet.Cells[6, 49].Value = "Girdle Type";
                        worksheet.Cells[6, 50].Value = "Laser Insc";

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 50].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10.14);
                        worksheet.Cells[6, 6].AutoFitColumns(10.5);
                        worksheet.Cells[6, 7].AutoFitColumns(8.86);
                        worksheet.Cells[6, 8].AutoFitColumns(9);
                        worksheet.Cells[6, 9].AutoFitColumns(12);
                        worksheet.Cells[6, 10].AutoFitColumns(9.57);
                        worksheet.Cells[6, 11].AutoFitColumns(8.14);
                        worksheet.Cells[6, 12].AutoFitColumns(6.75);//8.14
                        worksheet.Cells[6, 13].AutoFitColumns(9.50);
                        worksheet.Cells[6, 14].AutoFitColumns(13.5);
                        worksheet.Cells[6, 15].AutoFitColumns(8.43);
                        worksheet.Cells[6, 16].AutoFitColumns(9.29);
                        worksheet.Cells[6, 17].AutoFitColumns(13);
                        worksheet.Cells[6, 18].AutoFitColumns(8.14);
                        worksheet.Cells[6, 19].AutoFitColumns(8.14);
                        worksheet.Cells[6, 20].AutoFitColumns(11);
                        worksheet.Cells[6, 21].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(16);
                        worksheet.Cells[6, 23].AutoFitColumns(8.14);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(35.29);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);    //42
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);    //43
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);    //44

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 3, inEndCounter, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 4, inEndCounter, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["AssistBy1"]).ToLower());

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 4].Value = values_1;
                            }
                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 6].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                            worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 12].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"];
                                var Certi_Type = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 14].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 14].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                            worksheet.Cells[inwrkrow, 18].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 24].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null); 
                            
                            worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 35].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 42].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 43].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 48].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 49].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 50].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 50].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 3, (inwrkrow - 1), 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 11].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 23].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 33].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 40, (inwrkrow - 1), 43].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 48, (inwrkrow - 1), 48].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 4].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 4].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 4].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 4].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 18].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100)
                        worksheet.Cells[5, 21].Formula = "=IF(SUBTOTAL(109,T" + inStartIndex + ": T" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")/SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 22].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 49].AutoFilter = true;

                        worksheet.Cells[6, 1, 6, 49].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 49].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Stock Id";
                        worksheet.Cells[6, 4].Value = "Location";
                        worksheet.Cells[6, 5].Value = "Status";
                        worksheet.Cells[6, 6].Value = "DNA";
                        worksheet.Cells[6, 7].Value = "View Image";
                        worksheet.Cells[6, 8].Value = "HD Movie";

                        worksheet.Cells[6, 9].Value = "Shape";
                        worksheet.Cells[6, 10].Value = "Pointer";
                        worksheet.Cells[6, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[6, 11].Value = "Lab";
                        worksheet.Cells[6, 12].Value = "Certi Type";
                        worksheet.Cells[6, 13].Value = "Certi No.";
                        worksheet.Cells[6, 14].Value = "BGM";
                        worksheet.Cells[6, 15].Value = "Color";
                        worksheet.Cells[6, 16].Value = "Clarity";
                        worksheet.Cells[6, 17].Value = "Cts";
                        worksheet.Cells[6, 18].Value = "Rap Price($)";
                        worksheet.Cells[6, 19].Value = "Rap Amt($)";
                        worksheet.Cells[6, 20].Value = "Disc(%)";
                        worksheet.Cells[6, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[6, 21].Value = "Net Amt($)";
                        worksheet.Cells[6, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);
                        worksheet.Cells[6, 22].Value = "Price/Cts";
                        worksheet.Cells[6, 23].Value = "Cut";
                        worksheet.Cells[6, 24].Value = "Polish";
                        worksheet.Cells[6, 25].Value = "Symm";
                        worksheet.Cells[6, 26].Value = "Fls";
                        worksheet.Cells[6, 27].Value = "Ratio";
                        worksheet.Cells[6, 28].Value = "Length";
                        worksheet.Cells[6, 29].Value = "Width";
                        worksheet.Cells[6, 30].Value = "Depth";
                        worksheet.Cells[6, 31].Value = "Depth(%)";
                        worksheet.Cells[6, 32].Value = "Table(%)";
                        worksheet.Cells[6, 33].Value = "Key To Symbol";
                        worksheet.Cells[6, 34].Value = "Culet";
                        worksheet.Cells[6, 35].Value = "Table Black";
                        worksheet.Cells[6, 36].Value = "Crown Black";
                        worksheet.Cells[6, 37].Value = "Table White";
                        worksheet.Cells[6, 38].Value = "Crown White";
                        worksheet.Cells[6, 39].Value = "Cr Ang";
                        worksheet.Cells[6, 40].Value = "Cr Ht";
                        worksheet.Cells[6, 41].Value = "Pav Ang";
                        worksheet.Cells[6, 42].Value = "Pav Ht";
                        worksheet.Cells[6, 43].Value = "Table Open";
                        worksheet.Cells[6, 44].Value = "Crown Open";
                        worksheet.Cells[6, 45].Value = "Pav Open";
                        worksheet.Cells[6, 46].Value = "Girdle Open";
                        worksheet.Cells[6, 47].Value = "Girdle(%)";
                        worksheet.Cells[6, 48].Value = "Girdle Type";
                        worksheet.Cells[6, 49].Value = "Laser Insc";

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 49].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        inStartIndex = 7;
                        inwrkrow = 7;
                        inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                        TotalRow = dtDiamonds.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(10);
                        worksheet.Cells[6, 4].AutoFitColumns(10);
                        worksheet.Cells[6, 5].AutoFitColumns(10.5);
                        worksheet.Cells[6, 6].AutoFitColumns(8.86);
                        worksheet.Cells[6, 7].AutoFitColumns(9);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(9.57);
                        worksheet.Cells[6, 10].AutoFitColumns(8.14);
                        worksheet.Cells[6, 11].AutoFitColumns(6.75);//8.14
                        worksheet.Cells[6, 12].AutoFitColumns(9.50);
                        worksheet.Cells[6, 13].AutoFitColumns(13.5);
                        worksheet.Cells[6, 14].AutoFitColumns(8.43);
                        worksheet.Cells[6, 15].AutoFitColumns(9.29);
                        worksheet.Cells[6, 16].AutoFitColumns(13);
                        worksheet.Cells[6, 17].AutoFitColumns(8.14);
                        worksheet.Cells[6, 18].AutoFitColumns(8.14);
                        worksheet.Cells[6, 19].AutoFitColumns(11);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(16);
                        worksheet.Cells[6, 22].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(7.86);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(9);
                        worksheet.Cells[6, 32].AutoFitColumns(7.9);
                        worksheet.Cells[6, 33].AutoFitColumns(35.29);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["TempOrderDate"]);

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 3].Value = values_1;
                            }
                            worksheet.Cells[inwrkrow, 4].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Stock_Staus"]).ToLower();
                            ForCust_Hold = dtDiamonds.Rows[i - inStartIndex]["ForCust_Hold"].ToString();

                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";
                            else if (status == "new")
                                status = "Available";

                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 6].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 6].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 6].Style.Font.Color.SetColor(Color.Blue);
                            }


                            //worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //if (dtDiamonds.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                            //    if (Image != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtDiamonds.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null || dtDiamonds.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                            if (dtDiamonds.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);

                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                            if (dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"];
                                var Certi_Type = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 12].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_1 = dtDiamonds.Rows[i - inStartIndex]["certi_no"].ToString();
                            success1 = Int64.TryParse(values_1, out number_1);
                            if (success1)
                            {
                                worksheet.Cells[inwrkrow, 13].Value = Convert.ToInt64(values_1);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 13].Value = values_1;
                            }

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);

                            worksheet.Cells[inwrkrow, 17].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 18].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                            worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                            if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtDiamonds.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtDiamonds.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 34].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 39].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 40].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                            worksheet.Cells[inwrkrow, 41].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                            worksheet.Cells[inwrkrow, 42].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Girdle_Open"]);

                            worksheet.Cells[inwrkrow, 47].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                               (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 48].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());
                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[inStartIndex, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 17, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 27, (inwrkrow - 1), 32].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 42].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 47, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 3].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 3].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 3].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 3].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 17].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,S" + inStartIndex + ": S" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }

        public static void CreateOrderExcel_1(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("OrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "ORDER HISTORY FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    if (isAdmin)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 58].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 58].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 6, 58].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 58].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 58].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 58].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 58].AutoFilter = true;

                        worksheet.Cells[6, 7, 6, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 9, 6, 58].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 58].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 58].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "User Name";
                        worksheet.Cells[6, 8].Value = "Company Name";
                        worksheet.Cells[6, 9].Value = "Party Code";
                        worksheet.Cells[6, 10].Value = "Customer Name";
                        worksheet.Cells[6, 11].Value = "Assist By";
                        worksheet.Cells[6, 12].Value = "Stock Id";
                        worksheet.Cells[6, 13].Value = "Location";
                        worksheet.Cells[6, 14].Value = "Status";
                        worksheet.Cells[6, 15].Value = "Arrival in HK";
                        worksheet.Cells[6, 16].Value = "Ready to Pick up";
                        worksheet.Cells[6, 17].Value = "Collected Date";
                        worksheet.Cells[6, 18].Value = "Shape";
                        worksheet.Cells[6, 19].Value = "Pointer";
                        worksheet.Cells[6, 20].Value = "Lab";
                        worksheet.Cells[6, 21].Value = "Certi No.";
                        worksheet.Cells[6, 22].Value = "BGM";
                        worksheet.Cells[6, 23].Value = "Color";
                        worksheet.Cells[6, 24].Value = "Clarity";
                        worksheet.Cells[6, 25].Value = "Cts";
                        worksheet.Cells[6, 26].Value = "Rap Price($)";
                        worksheet.Cells[6, 27].Value = "Rap Amt($)";
                        worksheet.Cells[6, 28].Value = "Offer Disc.(%)"; //"Disc(%)";
                        worksheet.Cells[6, 29].Value = "Offer Value($)"; //"Net Amt($)";
                        worksheet.Cells[6, 30].Value = "Web Disc.($)";
                        worksheet.Cells[6, 31].Value = "Final Value";
                        worksheet.Cells[6, 32].Value = "Final Disc.(%)";
                        //worksheet.Cells[6, 29].Value = "Price/Cts";
                        worksheet.Cells[6, 33].Value = "Cut";
                        worksheet.Cells[6, 34].Value = "Polish";
                        worksheet.Cells[6, 35].Value = "Symm";
                        worksheet.Cells[6, 36].Value = "Fls";
                        worksheet.Cells[6, 37].Value = "Length";
                        worksheet.Cells[6, 38].Value = "Width";
                        worksheet.Cells[6, 39].Value = "Depth";
                        worksheet.Cells[6, 40].Value = "Depth(%)";
                        worksheet.Cells[6, 41].Value = "Table(%)";
                        worksheet.Cells[6, 42].Value = "Key To Symbol";
                        worksheet.Cells[6, 43].Value = "Culet";
                        worksheet.Cells[6, 44].Value = "Table Black";
                        worksheet.Cells[6, 45].Value = "Crown Black";
                        worksheet.Cells[6, 46].Value = "Table White";
                        worksheet.Cells[6, 47].Value = "Crown White";
                        worksheet.Cells[6, 48].Value = "Cr Ang";
                        worksheet.Cells[6, 49].Value = "Cr Ht";
                        worksheet.Cells[6, 50].Value = "Pav Ang";
                        worksheet.Cells[6, 51].Value = "Pav Ht";
                        worksheet.Cells[6, 52].Value = "Table Open";
                        worksheet.Cells[6, 53].Value = "Crown Open";
                        worksheet.Cells[6, 54].Value = "Pav Open";
                        worksheet.Cells[6, 55].Value = "Girdle Open";
                        worksheet.Cells[6, 56].Value = "Girdle(%)";     //52
                        worksheet.Cells[6, 57].Value = "Girdle Type";   //53
                        worksheet.Cells[6, 58].Value = "Laser Insc";    //54

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 58].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(16);
                        worksheet.Cells[6, 8].AutoFitColumns(38);
                        worksheet.Cells[6, 9].AutoFitColumns(10);
                        worksheet.Cells[6, 10].AutoFitColumns(38);
                        worksheet.Cells[6, 11].AutoFitColumns(16);
                        worksheet.Cells[6, 12].AutoFitColumns(12);
                        worksheet.Cells[6, 13].AutoFitColumns(10.14);
                        worksheet.Cells[6, 14].AutoFitColumns(25);
                        worksheet.Cells[6, 15].AutoFitColumns(10);
                        worksheet.Cells[6, 16].AutoFitColumns(10);
                        worksheet.Cells[6, 17].AutoFitColumns(10);
                        worksheet.Cells[6, 18].AutoFitColumns(9.57);
                        worksheet.Cells[6, 19].AutoFitColumns(8.14);
                        worksheet.Cells[6, 20].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 21].AutoFitColumns(13.5);
                        worksheet.Cells[6, 22].AutoFitColumns(8.43);
                        worksheet.Cells[6, 23].AutoFitColumns(9.29);
                        worksheet.Cells[6, 24].AutoFitColumns(13);
                        worksheet.Cells[6, 25].AutoFitColumns(8.14);
                        worksheet.Cells[6, 26].AutoFitColumns(15);
                        worksheet.Cells[6, 27].AutoFitColumns(15);
                        worksheet.Cells[6, 28].AutoFitColumns(11); //"Offer Disc.(%)"
                        worksheet.Cells[6, 29].AutoFitColumns(17); //"Offer Value($)"
                        worksheet.Cells[6, 30].AutoFitColumns(12); //"Web Disc.($)"; 
                        worksheet.Cells[6, 31].AutoFitColumns(12); //"Final Value";
                        worksheet.Cells[6, 32].AutoFitColumns(12); //"Final Disc.(%)";
                        //worksheet.Cells[6, 29].AutoFitColumns(8.14);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(9);
                        worksheet.Cells[6, 41].AutoFitColumns(7.9);
                        worksheet.Cells[6, 42].AutoFitColumns(35.29);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);
                        worksheet.Cells[6, 51].AutoFitColumns(7.86);
                        worksheet.Cells[6, 52].AutoFitColumns(7.86);
                        worksheet.Cells[6, 53].AutoFitColumns(7.86);
                        worksheet.Cells[6, 54].AutoFitColumns(7.86);
                        worksheet.Cells[6, 55].AutoFitColumns(7.86);
                        worksheet.Cells[6, 56].AutoFitColumns(10);      //52
                        worksheet.Cells[6, 57].AutoFitColumns(7);       //53
                        worksheet.Cells[6, 58].AutoFitColumns(7.9);     //54

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 10, inEndCounter, 58].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 58].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["AssistBy1"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 12].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 12].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Exp_Del_Date"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["PickUp_Status"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Delivery_Date"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 20].Style.Font.Color.SetColor(Color.Blue);
                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 20].Formula = "=HYPERLINK(\"" + Certificate + "\",\" " + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 20].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" " + dtOrders.Rows[i - inStartIndex]["sLab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 20].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 20].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 21].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 21].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 26].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["Web_Benefit"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Web_Benefit"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Web_Benefit"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                            //   (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                            //   Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 33].Value = (cut == "FR" ? "F" : cut);

                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 33].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 34].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 35].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 37].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 38].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 39].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 40].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 41].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 48].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 49].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 50].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 51].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 52].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 53].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 54].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 55].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 56].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 57].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 58].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[6, 19, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 19, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 25, (inwrkrow - 1), 32].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 32].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 30].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 30, (inwrkrow - 1), 32].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                        worksheet.Cells[6, 28, (inwrkrow - 1), 29].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 28, (inwrkrow - 1), 29].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 30, (inwrkrow - 1), 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 30, (inwrkrow - 1), 30].Style.Fill.BackgroundColor.SetColor(_PISTA);

                        worksheet.Cells[6, 31, (inwrkrow - 1), 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 31, (inwrkrow - 1), 32].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                        worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 41].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 48, (inwrkrow - 1), 51].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 56, (inwrkrow - 1), 56].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 12].Formula = "ROUND(SUBTOTAL(103,L" + inStartIndex + ":L" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 12].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 12].Style.Border.Left.Style = worksheet.Cells[5, 12].Style.Border.Right.Style
                                = worksheet.Cells[5, 12].Style.Border.Top.Style = worksheet.Cells[5, 12].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 25].Formula = "ROUND(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 25].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 25].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 25].Style.Border.Left.Style = worksheet.Cells[5, 25].Style.Border.Right.Style
                                = worksheet.Cells[5, 25].Style.Border.Top.Style = worksheet.Cells[5, 25].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 27].Formula = "ROUND(SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 27].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 27].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 27].Style.Border.Left.Style = worksheet.Cells[5, 27].Style.Border.Right.Style
                                = worksheet.Cells[5, 27].Style.Border.Top.Style = worksheet.Cells[5, 27].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                        worksheet.Cells[5, 28].Formula = "IF(SUBTOTAL(109,AA" + inStartIndex + ": AA" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,AC" + inStartIndex + ":AC" + (inwrkrow - 1) + ")/SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")))*(-100),2))";
                        worksheet.Cells[5, 28].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 28].Style.Border.Left.Style = worksheet.Cells[5, 28].Style.Border.Right.Style
                                = worksheet.Cells[5, 28].Style.Border.Top.Style = worksheet.Cells[5, 28].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 29].Formula = "ROUND(SUBTOTAL(109,AC" + inStartIndex + ":AC" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 29].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 29].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 29].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 29].Style.Border.Left.Style = worksheet.Cells[5, 29].Style.Border.Right.Style
                                = worksheet.Cells[5, 29].Style.Border.Top.Style = worksheet.Cells[5, 29].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 30].Formula = "ROUND(SUBTOTAL(109,AD" + inStartIndex + ":AD" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 30].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 30].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 30].Style.Border.Left.Style = worksheet.Cells[5, 30].Style.Border.Right.Style
                                = worksheet.Cells[5, 30].Style.Border.Top.Style = worksheet.Cells[5, 30].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 31].Formula = "ROUND(SUBTOTAL(109,AE" + inStartIndex + ":AE" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 31].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 31].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 31].Style.Border.Left.Style = worksheet.Cells[5, 31].Style.Border.Right.Style
                                = worksheet.Cells[5, 31].Style.Border.Top.Style = worksheet.Cells[5, 31].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                        worksheet.Cells[5, 32].Formula = "IF(SUBTOTAL(109,AA" + inStartIndex + ": AA" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,AE" + inStartIndex + ":AE" + (inwrkrow - 1) + ") / SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + "))) * 100,2))";
                        worksheet.Cells[5, 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 32].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 32].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 32].Style.Border.Left.Style = worksheet.Cells[5, 32].Style.Border.Right.Style
                                = worksheet.Cells[5, 32].Style.Border.Top.Style = worksheet.Cells[5, 32].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else if (isEmp)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 49].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 49].AutoFilter = true;

                        worksheet.Cells[6, 7, 6, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 8, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 49].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 49].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "Assist By";
                        worksheet.Cells[6, 8].Value = "Stock Id";
                        worksheet.Cells[6, 9].Value = "Location";
                        worksheet.Cells[6, 10].Value = "Status";
                        worksheet.Cells[6, 11].Value = "Shape";
                        worksheet.Cells[6, 12].Value = "Pointer";
                        worksheet.Cells[6, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 13].Value = "Lab";
                        worksheet.Cells[6, 14].Value = "Certi No.";
                        worksheet.Cells[6, 15].Value = "BGM";
                        worksheet.Cells[6, 16].Value = "Color";
                        worksheet.Cells[6, 17].Value = "Clarity";
                        worksheet.Cells[6, 18].Value = "Cts";
                        worksheet.Cells[6, 19].Value = "Rap Price($)";
                        worksheet.Cells[6, 20].Value = "Rap Amt($)";

                        worksheet.Cells[6, 21].Value = "Disc(%)";
                        worksheet.Cells[6, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 21].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 22].Value = "Net Amt($)";
                        worksheet.Cells[6, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 22].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 23].Value = "Price/Cts";
                        worksheet.Cells[6, 24].Value = "Cut";
                        worksheet.Cells[6, 25].Value = "Polish";
                        worksheet.Cells[6, 26].Value = "Symm";
                        worksheet.Cells[6, 27].Value = "Fls";
                        worksheet.Cells[6, 28].Value = "Length";
                        worksheet.Cells[6, 29].Value = "Width";
                        worksheet.Cells[6, 30].Value = "Depth";
                        worksheet.Cells[6, 31].Value = "Depth(%)";
                        worksheet.Cells[6, 32].Value = "Table(%)";
                        worksheet.Cells[6, 33].Value = "Key To Symbol";
                        worksheet.Cells[6, 34].Value = "Culet";
                        worksheet.Cells[6, 35].Value = "Table Black";
                        worksheet.Cells[6, 36].Value = "Crown Black";
                        worksheet.Cells[6, 37].Value = "Table White";
                        worksheet.Cells[6, 38].Value = "Crown White";
                        worksheet.Cells[6, 39].Value = "Cr Ang";
                        worksheet.Cells[6, 40].Value = "Cr Ht";
                        worksheet.Cells[6, 41].Value = "Pav Ang";
                        worksheet.Cells[6, 42].Value = "Pav Ht";
                        worksheet.Cells[6, 43].Value = "Table Open";
                        worksheet.Cells[6, 44].Value = "Crown Open";
                        worksheet.Cells[6, 45].Value = "Pav Open";
                        worksheet.Cells[6, 46].Value = "Girdle Open";
                        worksheet.Cells[6, 47].Value = "Girdle(%)";     //43
                        worksheet.Cells[6, 48].Value = "Girdle Type";   //44
                        worksheet.Cells[6, 49].Value = "Laser Insc";    //45

                        worksheet.Cells[6, 1, 6, 49].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 49].Style.Border.Right.Style
                                = worksheet.Cells[6, 1, 6, 49].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 49].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(16);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(10.14);
                        worksheet.Cells[6, 10].AutoFitColumns(8.43);
                        worksheet.Cells[6, 11].AutoFitColumns(9.57);
                        worksheet.Cells[6, 12].AutoFitColumns(8.14);
                        worksheet.Cells[6, 13].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 14].AutoFitColumns(13.5);
                        worksheet.Cells[6, 15].AutoFitColumns(8.43);
                        worksheet.Cells[6, 16].AutoFitColumns(9.29);
                        worksheet.Cells[6, 17].AutoFitColumns(13);
                        worksheet.Cells[6, 19].AutoFitColumns(15);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(11);
                        worksheet.Cells[6, 18].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(11);
                        worksheet.Cells[6, 23].AutoFitColumns(8.14);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(9);
                        worksheet.Cells[6, 32].AutoFitColumns(7.9);
                        worksheet.Cells[6, 33].AutoFitColumns(35.29);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(10);   //43
                        worksheet.Cells[6, 48].AutoFitColumns(7);    //44
                        worksheet.Cells[6, 49].AutoFitColumns(7.9);  //45

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 7, inEndCounter, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 8, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 8].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 14].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 14].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 24].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 39].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 40].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 41].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 47].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 23].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 32].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 42].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 47, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 8].Formula = "ROUND(SUBTOTAL(103,H" + inStartIndex + ":H" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 8].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 8].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 8].Style.Border.Left.Style = worksheet.Cells[5, 8].Style.Border.Right.Style
                                = worksheet.Cells[5, 8].Style.Border.Top.Style = worksheet.Cells[5, 8].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 18].Style.Border.Left.Style = worksheet.Cells[5, 18].Style.Border.Right.Style
                                = worksheet.Cells[5, 18].Style.Border.Top.Style = worksheet.Cells[5, 18].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                                = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND((1-(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")/SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")))*(-100),2)";
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                                = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                                = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 53].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 53].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 6, 53].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 53].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 53].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 53].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 53].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 53].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 53].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "Stock Id";
                        worksheet.Cells[6, 8].Value = "Location";
                        worksheet.Cells[6, 9].Value = "Status";
                        worksheet.Cells[6, 10].Value = "Arrival in HK";
                        worksheet.Cells[6, 11].Value = "Ready to Pick up";
                        worksheet.Cells[6, 12].Value = "Collected Date";
                        worksheet.Cells[6, 13].Value = "Shape";

                        worksheet.Cells[6, 14].Value = "Pointer";
                        worksheet.Cells[6, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 15].Value = "Lab";
                        worksheet.Cells[6, 16].Value = "Certi No.";
                        worksheet.Cells[6, 17].Value = "BGM";
                        worksheet.Cells[6, 18].Value = "Color";
                        worksheet.Cells[6, 19].Value = "Clarity";
                        worksheet.Cells[6, 20].Value = "Cts";
                        worksheet.Cells[6, 21].Value = "Rap Price($)";
                        worksheet.Cells[6, 22].Value = "Rap Amt($)";

                        worksheet.Cells[6, 23].Value = "Offer Disc.(%)"; //"Disc(%)";
                        worksheet.Cells[6, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 24].Value = "Offer Value($)"; //"Net Amt($)";
                        worksheet.Cells[6, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 24].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 25].Value = "Web Disc.($)";
                        worksheet.Cells[6, 26].Value = "Final Value";
                        worksheet.Cells[6, 27].Value = "Final Disc.(%)";

                        //worksheet.Cells[6, 25].Value = "Price/Cts";
                        worksheet.Cells[6, 28].Value = "Cut";
                        worksheet.Cells[6, 29].Value = "Polish";
                        worksheet.Cells[6, 30].Value = "Symm";
                        worksheet.Cells[6, 31].Value = "Fls";
                        worksheet.Cells[6, 32].Value = "Length";
                        worksheet.Cells[6, 33].Value = "Width";
                        worksheet.Cells[6, 34].Value = "Depth";
                        worksheet.Cells[6, 35].Value = "Depth(%)";
                        worksheet.Cells[6, 36].Value = "Table(%)";
                        worksheet.Cells[6, 37].Value = "Key To Symbol";
                        worksheet.Cells[6, 38].Value = "Culet";
                        worksheet.Cells[6, 39].Value = "Table Black";
                        worksheet.Cells[6, 40].Value = "Crown Black";
                        worksheet.Cells[6, 41].Value = "Table White";
                        worksheet.Cells[6, 42].Value = "Crown White";
                        worksheet.Cells[6, 43].Value = "Cr Ang";
                        worksheet.Cells[6, 44].Value = "Cr Ht";
                        worksheet.Cells[6, 45].Value = "Pav Ang";
                        worksheet.Cells[6, 46].Value = "Pav Ht";
                        worksheet.Cells[6, 47].Value = "Table Open";
                        worksheet.Cells[6, 48].Value = "Crown Open";
                        worksheet.Cells[6, 49].Value = "Pav Open";
                        worksheet.Cells[6, 50].Value = "Girdle Open";
                        worksheet.Cells[6, 51].Value = "Girdle(%)";     //47
                        worksheet.Cells[6, 52].Value = "Girdle Type";   //48
                        worksheet.Cells[6, 53].Value = "Laser Insc";    //49

                        worksheet.Cells[6, 1, 6, 53].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 53].Style.Border.Right.Style
                                = worksheet.Cells[6, 1, 6, 53].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 53].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(12);
                        worksheet.Cells[6, 8].AutoFitColumns(10.14);
                        worksheet.Cells[6, 9].AutoFitColumns(16);
                        worksheet.Cells[6, 10].AutoFitColumns(10);
                        worksheet.Cells[6, 11].AutoFitColumns(10);
                        worksheet.Cells[6, 12].AutoFitColumns(10);
                        worksheet.Cells[6, 13].AutoFitColumns(9.57);
                        worksheet.Cells[6, 14].AutoFitColumns(8.14);
                        worksheet.Cells[6, 15].AutoFitColumns(12);//8.14
                        worksheet.Cells[6, 16].AutoFitColumns(13.5);
                        worksheet.Cells[6, 17].AutoFitColumns(8.43);
                        worksheet.Cells[6, 18].AutoFitColumns(9.29);
                        worksheet.Cells[6, 19].AutoFitColumns(13);
                        worksheet.Cells[6, 20].AutoFitColumns(8.14);
                        worksheet.Cells[6, 21].AutoFitColumns(15);
                        worksheet.Cells[6, 22].AutoFitColumns(11);
                        worksheet.Cells[6, 23].AutoFitColumns(11); //"Offer Disc.(%)"
                        worksheet.Cells[6, 24].AutoFitColumns(17); //"Offer Value($)"
                        worksheet.Cells[6, 25].AutoFitColumns(12); //"Web Disc.($)"; 
                        worksheet.Cells[6, 26].AutoFitColumns(12); //"Final Value";
                        worksheet.Cells[6, 27].AutoFitColumns(12); //"Final Disc.(%)";

                        //worksheet.Cells[6, 25].AutoFitColumns(8.14);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(9);
                        worksheet.Cells[6, 36].AutoFitColumns(7.9);
                        worksheet.Cells[6, 37].AutoFitColumns(35.29);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);
                        worksheet.Cells[6, 51].AutoFitColumns(10);  //47
                        worksheet.Cells[6, 52].AutoFitColumns(7);   //48
                        worksheet.Cells[6, 53].AutoFitColumns(7.9); //49

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 53].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 53].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            //worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);

                            S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = dtOrders.Rows[i - inStartIndex]["image_url"] == null || dtOrders.Rows[i - inStartIndex]["image_url"].ToString() == "" ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}
                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 7].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Exp_Del_Date"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["PickUp_Status"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Delivery_Date"]);

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 15].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 16].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 16].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 24].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["Web_Benefit"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Web_Benefit"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Web_Benefit"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 26].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                            //   (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                            //   Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 28].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 28].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 29].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 35].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 36].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 43].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 44].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 45].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 46].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 51].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 52].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 53].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 27].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 23, (inwrkrow - 1), 27].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 23, (inwrkrow - 1), 24].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 25, (inwrkrow - 1), 27].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                        worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 25, (inwrkrow - 1), 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 25, (inwrkrow - 1), 25].Style.Fill.BackgroundColor.SetColor(_PISTA);

                        worksheet.Cells[6, 26, (inwrkrow - 1), 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 26, (inwrkrow - 1), 27].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                        worksheet.Cells[inStartIndex, 32, (inwrkrow - 1), 36].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 43, (inwrkrow - 1), 46].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 51, (inwrkrow - 1), 51].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 7].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 7].Style.Border.Left.Style = worksheet.Cells[5, 7].Style.Border.Right.Style
                                = worksheet.Cells[5, 7].Style.Border.Top.Style = worksheet.Cells[5, 7].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                                = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                                = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                        worksheet.Cells[5, 23].Formula = "IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + ")/SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")))*(-100),2))";
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 23].Style.Border.Left.Style = worksheet.Cells[5, 23].Style.Border.Right.Style
                                = worksheet.Cells[5, 23].Style.Border.Top.Style = worksheet.Cells[5, 23].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 24].Formula = "ROUND(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 24].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 24].Style.Border.Left.Style = worksheet.Cells[5, 24].Style.Border.Right.Style
                                = worksheet.Cells[5, 24].Style.Border.Top.Style = worksheet.Cells[5, 24].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 25].Formula = "ROUND(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 25].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 25].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 25].Style.Border.Left.Style = worksheet.Cells[5, 25].Style.Border.Right.Style
                                = worksheet.Cells[5, 25].Style.Border.Top.Style = worksheet.Cells[5, 25].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 26].Formula = "ROUND(SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 26].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 26].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 26].Style.Border.Left.Style = worksheet.Cells[5, 26].Style.Border.Right.Style
                                = worksheet.Cells[5, 26].Style.Border.Top.Style = worksheet.Cells[5, 26].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                        worksheet.Cells[5, 27].Formula = "IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + ") / SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "))) * 100,2))";
                        worksheet.Cells[5, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 27].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 27].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 27].Style.Border.Left.Style = worksheet.Cells[5, 27].Style.Border.Right.Style
                                = worksheet.Cells[5, 27].Style.Border.Top.Style = worksheet.Cells[5, 27].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateOrderExcel(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("OrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "ORDER HISTORY FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    if (isAdmin)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 60].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 60].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 6, 60].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 60].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 60].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 60].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 60].AutoFilter = true;

                        worksheet.Cells[6, 7, 6, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 9, 6, 60].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 60].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 60].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "User Name";
                        worksheet.Cells[6, 8].Value = "Company Name";
                        worksheet.Cells[6, 9].Value = "Party Code";
                        worksheet.Cells[6, 10].Value = "Customer Name";
                        worksheet.Cells[6, 11].Value = "Assist By";
                        worksheet.Cells[6, 12].Value = "Stock Id";
                        worksheet.Cells[6, 13].Value = "Location";
                        worksheet.Cells[6, 14].Value = "Status";
                        worksheet.Cells[6, 15].Value = "Arrival in HK";
                        worksheet.Cells[6, 16].Value = "Ready to Pick up";
                        worksheet.Cells[6, 17].Value = "Collected Date";
                        worksheet.Cells[6, 18].Value = "Shape";
                        worksheet.Cells[6, 19].Value = "Pointer";
                        worksheet.Cells[6, 20].Value = "Lab";
                        worksheet.Cells[6, 21].Value = "Certi Type";
                        worksheet.Cells[6, 22].Value = "Certi No.";
                        worksheet.Cells[6, 23].Value = "BGM";
                        worksheet.Cells[6, 24].Value = "Color";
                        worksheet.Cells[6, 25].Value = "Clarity";
                        worksheet.Cells[6, 26].Value = "Cts";
                        worksheet.Cells[6, 27].Value = "Rap Price($)";
                        worksheet.Cells[6, 28].Value = "Rap Amt($)";
                        worksheet.Cells[6, 29].Value = "Offer Disc.(%)"; //"Disc(%)";
                        worksheet.Cells[6, 30].Value = "Offer Value($)"; //"Net Amt($)";
                        worksheet.Cells[6, 31].Value = "Web Disc.($)";
                        worksheet.Cells[6, 32].Value = "Final Value";
                        worksheet.Cells[6, 33].Value = "Final Disc.(%)";
                        //worksheet.Cells[6, 29].Value = "Price/Cts";
                        worksheet.Cells[6, 34].Value = "Cut";
                        worksheet.Cells[6, 35].Value = "Polish";
                        worksheet.Cells[6, 36].Value = "Symm";
                        worksheet.Cells[6, 37].Value = "Fls";
                        worksheet.Cells[6, 38].Value = "Ratio";
                        worksheet.Cells[6, 39].Value = "Length";
                        worksheet.Cells[6, 40].Value = "Width";
                        worksheet.Cells[6, 41].Value = "Depth";
                        worksheet.Cells[6, 42].Value = "Depth(%)";
                        worksheet.Cells[6, 43].Value = "Table(%)";
                        worksheet.Cells[6, 44].Value = "Key To Symbol";
                        worksheet.Cells[6, 45].Value = "Culet";
                        worksheet.Cells[6, 46].Value = "Table Black";
                        worksheet.Cells[6, 47].Value = "Crown Black";
                        worksheet.Cells[6, 48].Value = "Table White";
                        worksheet.Cells[6, 49].Value = "Crown White";
                        worksheet.Cells[6, 50].Value = "Cr Ang";
                        worksheet.Cells[6, 51].Value = "Cr Ht";
                        worksheet.Cells[6, 52].Value = "Pav Ang";
                        worksheet.Cells[6, 53].Value = "Pav Ht";
                        worksheet.Cells[6, 54].Value = "Table Open";
                        worksheet.Cells[6, 55].Value = "Crown Open";
                        worksheet.Cells[6, 56].Value = "Pav Open";
                        worksheet.Cells[6, 57].Value = "Girdle Open";
                        worksheet.Cells[6, 58].Value = "Girdle(%)";     //52
                        worksheet.Cells[6, 59].Value = "Girdle Type";   //53
                        worksheet.Cells[6, 60].Value = "Laser Insc";    //54

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 60].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(16);
                        worksheet.Cells[6, 8].AutoFitColumns(38);
                        worksheet.Cells[6, 9].AutoFitColumns(10);
                        worksheet.Cells[6, 10].AutoFitColumns(38);
                        worksheet.Cells[6, 11].AutoFitColumns(16);
                        worksheet.Cells[6, 12].AutoFitColumns(12);
                        worksheet.Cells[6, 13].AutoFitColumns(10.14);
                        worksheet.Cells[6, 14].AutoFitColumns(25);
                        worksheet.Cells[6, 15].AutoFitColumns(10);
                        worksheet.Cells[6, 16].AutoFitColumns(10);
                        worksheet.Cells[6, 17].AutoFitColumns(10);
                        worksheet.Cells[6, 18].AutoFitColumns(9.57);
                        worksheet.Cells[6, 19].AutoFitColumns(8.14);
                        worksheet.Cells[6, 20].AutoFitColumns(6.75);//8.14
                        worksheet.Cells[6, 21].AutoFitColumns(9.50);
                        worksheet.Cells[6, 22].AutoFitColumns(13.5);
                        worksheet.Cells[6, 23].AutoFitColumns(8.43);
                        worksheet.Cells[6, 24].AutoFitColumns(9.29);
                        worksheet.Cells[6, 25].AutoFitColumns(13);
                        worksheet.Cells[6, 26].AutoFitColumns(8.14);
                        worksheet.Cells[6, 27].AutoFitColumns(15);
                        worksheet.Cells[6, 28].AutoFitColumns(15);
                        worksheet.Cells[6, 29].AutoFitColumns(11); //"Offer Disc.(%)"
                        worksheet.Cells[6, 30].AutoFitColumns(17); //"Offer Value($)"
                        worksheet.Cells[6, 31].AutoFitColumns(12); //"Web Disc.($)"; 
                        worksheet.Cells[6, 32].AutoFitColumns(12); //"Final Value";
                        worksheet.Cells[6, 33].AutoFitColumns(12); //"Final Disc.(%)";
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(9);
                        worksheet.Cells[6, 43].AutoFitColumns(7.9);
                        worksheet.Cells[6, 44].AutoFitColumns(35.29);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);
                        worksheet.Cells[6, 51].AutoFitColumns(7.86);
                        worksheet.Cells[6, 52].AutoFitColumns(7.86);
                        worksheet.Cells[6, 53].AutoFitColumns(7.86);
                        worksheet.Cells[6, 54].AutoFitColumns(7.86);
                        worksheet.Cells[6, 55].AutoFitColumns(7.86);
                        worksheet.Cells[6, 56].AutoFitColumns(7.86);
                        worksheet.Cells[6, 57].AutoFitColumns(7.86);
                        worksheet.Cells[6, 58].AutoFitColumns(10);      //52
                        worksheet.Cells[6, 59].AutoFitColumns(7);       //53
                        worksheet.Cells[6, 60].AutoFitColumns(7.9);     //54

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 10, inEndCounter, 60].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 60].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["AssistBy1"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 12].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 12].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Exp_Del_Date"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["PickUp_Status"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Delivery_Date"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                            worksheet.Cells[inwrkrow, 20].Style.Font.Color.SetColor(Color.Blue);
                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 20].Formula = "=HYPERLINK(\"" + Certificate + "\",\" " + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 20].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" " + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 20].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 20].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 21].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["sRefNo"];
                                var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 21].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 21].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 21].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 22].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 22].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 26].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["Web_Benefit"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Web_Benefit"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Web_Benefit"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                            //   (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                            //   Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 34].Value = (cut == "FR" ? "F" : cut);

                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 34].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 35].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 36].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 38].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 39].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 40].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 41].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 42].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 43].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 50].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 51].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 52].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 53].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 54].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 55].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 56].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 57].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 58].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 59].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 60].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[6, 19, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 19, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 33].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 33].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 31].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 31, (inwrkrow - 1), 33].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                        worksheet.Cells[6, 29, (inwrkrow - 1), 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 29, (inwrkrow - 1), 30].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 31, (inwrkrow - 1), 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 31, (inwrkrow - 1), 31].Style.Fill.BackgroundColor.SetColor(_PISTA);

                        worksheet.Cells[6, 32, (inwrkrow - 1), 33].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 32, (inwrkrow - 1), 33].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                        worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 43].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 50, (inwrkrow - 1), 53].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 58, (inwrkrow - 1), 58].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 12].Formula = "ROUND(SUBTOTAL(103,L" + inStartIndex + ":L" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 12].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 12].Style.Border.Left.Style = worksheet.Cells[5, 12].Style.Border.Right.Style
                                = worksheet.Cells[5, 12].Style.Border.Top.Style = worksheet.Cells[5, 12].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 26].Formula = "ROUND(SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 26].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 26].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 26].Style.Border.Left.Style = worksheet.Cells[5, 26].Style.Border.Right.Style
                                = worksheet.Cells[5, 26].Style.Border.Top.Style = worksheet.Cells[5, 26].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 28].Formula = "ROUND(SUBTOTAL(109,AB" + inStartIndex + ":AB" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 28].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 28].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 28].Style.Border.Left.Style = worksheet.Cells[5, 28].Style.Border.Right.Style
                                = worksheet.Cells[5, 28].Style.Border.Top.Style = worksheet.Cells[5, 28].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                        worksheet.Cells[5, 29].Formula = "IF(SUBTOTAL(109,AB" + inStartIndex + ": AB" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,AD" + inStartIndex + ":AD" + (inwrkrow - 1) + ")/SUBTOTAL(109,AB" + inStartIndex + ":AB" + (inwrkrow - 1) + ")))*(-100),2))";
                        worksheet.Cells[5, 29].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 29].Style.Border.Left.Style = worksheet.Cells[5, 29].Style.Border.Right.Style
                                = worksheet.Cells[5, 29].Style.Border.Top.Style = worksheet.Cells[5, 29].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 30].Formula = "ROUND(SUBTOTAL(109,AD" + inStartIndex + ":AD" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 30].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 30].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 30].Style.Border.Left.Style = worksheet.Cells[5, 30].Style.Border.Right.Style
                                = worksheet.Cells[5, 30].Style.Border.Top.Style = worksheet.Cells[5, 30].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 31].Formula = "ROUND(SUBTOTAL(109,AE" + inStartIndex + ":AE" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 31].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 31].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 31].Style.Border.Left.Style = worksheet.Cells[5, 31].Style.Border.Right.Style
                                = worksheet.Cells[5, 31].Style.Border.Top.Style = worksheet.Cells[5, 31].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 32].Formula = "ROUND(SUBTOTAL(109,AF" + inStartIndex + ":AF" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 32].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 32].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 32].Style.Border.Left.Style = worksheet.Cells[5, 32].Style.Border.Right.Style
                                = worksheet.Cells[5, 32].Style.Border.Top.Style = worksheet.Cells[5, 32].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                        worksheet.Cells[5, 33].Formula = "IF(SUBTOTAL(109,AB" + inStartIndex + ": AB" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,AF" + inStartIndex + ":AF" + (inwrkrow - 1) + ") / SUBTOTAL(109,AB" + inStartIndex + ":AB" + (inwrkrow - 1) + "))) * 100,2))";
                        worksheet.Cells[5, 33].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 33].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 33].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 33].Style.Border.Left.Style = worksheet.Cells[5, 33].Style.Border.Right.Style
                                = worksheet.Cells[5, 33].Style.Border.Top.Style = worksheet.Cells[5, 33].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else if (isEmp)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 51].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 51].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 6, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 51].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 51].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 51].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 51].AutoFilter = true;

                        worksheet.Cells[6, 7, 6, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 8, 6, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 51].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 51].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "Assist By";
                        worksheet.Cells[6, 8].Value = "Stock Id";
                        worksheet.Cells[6, 9].Value = "Location";
                        worksheet.Cells[6, 10].Value = "Status";
                        worksheet.Cells[6, 11].Value = "Shape";
                        worksheet.Cells[6, 12].Value = "Pointer";
                        worksheet.Cells[6, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 13].Value = "Lab";
                        worksheet.Cells[6, 14].Value = "Certi Type";
                        worksheet.Cells[6, 15].Value = "Certi No.";
                        worksheet.Cells[6, 16].Value = "BGM";
                        worksheet.Cells[6, 17].Value = "Color";
                        worksheet.Cells[6, 18].Value = "Clarity";
                        worksheet.Cells[6, 19].Value = "Cts";
                        worksheet.Cells[6, 20].Value = "Rap Price($)";
                        worksheet.Cells[6, 21].Value = "Rap Amt($)";

                        worksheet.Cells[6, 22].Value = "Disc(%)";
                        worksheet.Cells[6, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 22].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 23].Value = "Net Amt($)";
                        worksheet.Cells[6, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 24].Value = "Price/Cts";
                        worksheet.Cells[6, 25].Value = "Cut";
                        worksheet.Cells[6, 26].Value = "Polish";
                        worksheet.Cells[6, 27].Value = "Symm";
                        worksheet.Cells[6, 28].Value = "Fls";
                        worksheet.Cells[6, 29].Value = "Ratio";
                        worksheet.Cells[6, 30].Value = "Length";
                        worksheet.Cells[6, 31].Value = "Width";
                        worksheet.Cells[6, 32].Value = "Depth";
                        worksheet.Cells[6, 33].Value = "Depth(%)";
                        worksheet.Cells[6, 34].Value = "Table(%)";
                        worksheet.Cells[6, 35].Value = "Key To Symbol";
                        worksheet.Cells[6, 36].Value = "Culet";
                        worksheet.Cells[6, 37].Value = "Table Black";
                        worksheet.Cells[6, 38].Value = "Crown Black";
                        worksheet.Cells[6, 39].Value = "Table White";
                        worksheet.Cells[6, 40].Value = "Crown White";
                        worksheet.Cells[6, 41].Value = "Cr Ang";
                        worksheet.Cells[6, 42].Value = "Cr Ht";
                        worksheet.Cells[6, 43].Value = "Pav Ang";
                        worksheet.Cells[6, 44].Value = "Pav Ht";
                        worksheet.Cells[6, 45].Value = "Table Open";
                        worksheet.Cells[6, 46].Value = "Crown Open";
                        worksheet.Cells[6, 47].Value = "Pav Open";
                        worksheet.Cells[6, 48].Value = "Girdle Open";
                        worksheet.Cells[6, 49].Value = "Girdle(%)";     //43
                        worksheet.Cells[6, 50].Value = "Girdle Type";   //44
                        worksheet.Cells[6, 51].Value = "Laser Insc";    //45

                        worksheet.Cells[6, 1, 6, 51].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 51].Style.Border.Right.Style
                                = worksheet.Cells[6, 1, 6, 51].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 51].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(16);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(10.14);
                        worksheet.Cells[6, 10].AutoFitColumns(8.43);
                        worksheet.Cells[6, 11].AutoFitColumns(9.57);
                        worksheet.Cells[6, 12].AutoFitColumns(8.14);
                        worksheet.Cells[6, 13].AutoFitColumns(6.75);//8.14
                        worksheet.Cells[6, 14].AutoFitColumns(9.50);
                        worksheet.Cells[6, 15].AutoFitColumns(13.5);
                        worksheet.Cells[6, 16].AutoFitColumns(8.43);
                        worksheet.Cells[6, 17].AutoFitColumns(9.29);
                        worksheet.Cells[6, 18].AutoFitColumns(11); 
                        worksheet.Cells[6, 19].AutoFitColumns(13);
                        worksheet.Cells[6, 20].AutoFitColumns(15);
                        worksheet.Cells[6, 21].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(8.14);
                        worksheet.Cells[6, 23].AutoFitColumns(11);
                        worksheet.Cells[6, 24].AutoFitColumns(8.14);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(9);
                        worksheet.Cells[6, 34].AutoFitColumns(7.9);
                        worksheet.Cells[6, 35].AutoFitColumns(35.29);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(10);   //43
                        worksheet.Cells[6, 50].AutoFitColumns(7);    //44
                        worksheet.Cells[6, 51].AutoFitColumns(7.9);  //45

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 7, inEndCounter, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 8, inEndCounter, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 51].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 8].Value = values_2;
                            }
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                            worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                            //.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["sRefNo"];
                                var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 15].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 15].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 24].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 25].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 41].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 43].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 44].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 49].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 51].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 24].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[inStartIndex, 30, (inwrkrow - 1), 34].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 41, (inwrkrow - 1), 44].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 49, (inwrkrow - 1), 49].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 8].Formula = "ROUND(SUBTOTAL(103,H" + inStartIndex + ":H" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 8].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 8].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 8].Style.Border.Left.Style = worksheet.Cells[5, 8].Style.Border.Right.Style
                                = worksheet.Cells[5, 8].Style.Border.Top.Style = worksheet.Cells[5, 8].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 19].Style.Border.Left.Style = worksheet.Cells[5, 19].Style.Border.Right.Style
                                = worksheet.Cells[5, 19].Style.Border.Top.Style = worksheet.Cells[5, 19].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                                = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND((1-(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")/SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")))*(-100),2)";
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                                = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 23].Formula = "ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 23].Style.Border.Left.Style = worksheet.Cells[5, 23].Style.Border.Right.Style
                                = worksheet.Cells[5, 23].Style.Border.Top.Style = worksheet.Cells[5, 23].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 53].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 53].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 6, 53].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 53].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 53].Style.Font.Size = 10;
                        worksheet.Cells[5, 1, 6, 53].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 53].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 53].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 53].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "DNA";
                        worksheet.Cells[6, 3].Value = "View Image";
                        worksheet.Cells[6, 4].Value = "HD Movie";
                        worksheet.Cells[6, 5].Value = "Order Date";
                        worksheet.Cells[6, 6].Value = "Order No.";
                        worksheet.Cells[6, 7].Value = "Stock Id";
                        worksheet.Cells[6, 8].Value = "Location";
                        worksheet.Cells[6, 9].Value = "Status";
                        worksheet.Cells[6, 10].Value = "Arrival in HK";
                        worksheet.Cells[6, 11].Value = "Ready to Pick up";
                        worksheet.Cells[6, 12].Value = "Collected Date";
                        worksheet.Cells[6, 13].Value = "Shape";

                        worksheet.Cells[6, 14].Value = "Pointer";
                        worksheet.Cells[6, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 15].Value = "Lab";
                        worksheet.Cells[6, 16].Value = "Certi Type";
                        worksheet.Cells[6, 17].Value = "Certi No.";
                        worksheet.Cells[6, 18].Value = "BGM";
                        worksheet.Cells[6, 19].Value = "Color";
                        worksheet.Cells[6, 20].Value = "Clarity";
                        worksheet.Cells[6, 21].Value = "Cts";
                        worksheet.Cells[6, 22].Value = "Rap Price($)";
                        worksheet.Cells[6, 23].Value = "Rap Amt($)";

                        worksheet.Cells[6, 24].Value = "Offer Disc.(%)"; //"Disc(%)";
                        worksheet.Cells[6, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 24].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 25].Value = "Offer Value($)"; //"Net Amt($)";
                        worksheet.Cells[6, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 25].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 26].Value = "Web Disc.($)";
                        worksheet.Cells[6, 27].Value = "Final Value";
                        worksheet.Cells[6, 28].Value = "Final Disc.(%)";

                        worksheet.Cells[6, 29].Value = "Cut";
                        worksheet.Cells[6, 30].Value = "Polish";
                        worksheet.Cells[6, 31].Value = "Symm";
                        worksheet.Cells[6, 32].Value = "Fls";
                        worksheet.Cells[6, 33].Value = "Ratio";
                        worksheet.Cells[6, 34].Value = "Length";
                        worksheet.Cells[6, 35].Value = "Width";
                        worksheet.Cells[6, 36].Value = "Depth";
                        worksheet.Cells[6, 37].Value = "Depth(%)";
                        worksheet.Cells[6, 38].Value = "Table(%)";
                        worksheet.Cells[6, 39].Value = "Key To Symbol";
                        worksheet.Cells[6, 40].Value = "Culet";
                        worksheet.Cells[6, 41].Value = "Table Black";
                        worksheet.Cells[6, 42].Value = "Crown Black";
                        worksheet.Cells[6, 43].Value = "Table White";
                        worksheet.Cells[6, 44].Value = "Crown White";
                        worksheet.Cells[6, 45].Value = "Cr Ang";
                        worksheet.Cells[6, 46].Value = "Cr Ht";
                        worksheet.Cells[6, 47].Value = "Pav Ang";
                        worksheet.Cells[6, 48].Value = "Pav Ht";
                        worksheet.Cells[6, 49].Value = "Table Open";
                        worksheet.Cells[6, 50].Value = "Crown Open";
                        worksheet.Cells[6, 51].Value = "Pav Open";
                        worksheet.Cells[6, 52].Value = "Girdle Open";
                        worksheet.Cells[6, 53].Value = "Girdle(%)";     //47
                        worksheet.Cells[6, 54].Value = "Girdle Type";   //48
                        worksheet.Cells[6, 55].Value = "Laser Insc";    //49

                        worksheet.Cells[6, 1, 6, 55].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 55].Style.Border.Right.Style
                                = worksheet.Cells[6, 1, 6, 55].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 55].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(8.86);
                        worksheet.Cells[6, 3].AutoFitColumns(9);
                        worksheet.Cells[6, 4].AutoFitColumns(12);
                        worksheet.Cells[6, 5].AutoFitColumns(10);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(12);
                        worksheet.Cells[6, 8].AutoFitColumns(10.14);
                        worksheet.Cells[6, 9].AutoFitColumns(16);
                        worksheet.Cells[6, 10].AutoFitColumns(10);
                        worksheet.Cells[6, 11].AutoFitColumns(10);
                        worksheet.Cells[6, 12].AutoFitColumns(10);
                        worksheet.Cells[6, 13].AutoFitColumns(9.57);
                        worksheet.Cells[6, 14].AutoFitColumns(8.14);
                        worksheet.Cells[6, 15].AutoFitColumns(6.75);//8.14
                        worksheet.Cells[6, 16].AutoFitColumns(9.50);
                        worksheet.Cells[6, 17].AutoFitColumns(13.5);
                        worksheet.Cells[6, 18].AutoFitColumns(8.43);
                        worksheet.Cells[6, 19].AutoFitColumns(9.29);
                        worksheet.Cells[6, 20].AutoFitColumns(13);
                        worksheet.Cells[6, 21].AutoFitColumns(8.14);
                        worksheet.Cells[6, 22].AutoFitColumns(15);
                        worksheet.Cells[6, 23].AutoFitColumns(11);
                        worksheet.Cells[6, 24].AutoFitColumns(11); //"Offer Disc.(%)"
                        worksheet.Cells[6, 25].AutoFitColumns(17); //"Offer Value($)"
                        worksheet.Cells[6, 26].AutoFitColumns(12); //"Web Disc.($)"; 
                        worksheet.Cells[6, 27].AutoFitColumns(12); //"Final Value";
                        worksheet.Cells[6, 28].AutoFitColumns(12); //"Final Disc.(%)";

                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(9);
                        worksheet.Cells[6, 38].AutoFitColumns(7.9);
                        worksheet.Cells[6, 39].AutoFitColumns(35.29);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);
                        worksheet.Cells[6, 51].AutoFitColumns(7.86);
                        worksheet.Cells[6, 52].AutoFitColumns(7.86);
                        worksheet.Cells[6, 53].AutoFitColumns(10);  //47
                        worksheet.Cells[6, 54].AutoFitColumns(7);   //48
                        worksheet.Cells[6, 55].AutoFitColumns(7.9); //49

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 55].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 55].Style.Font.Size = 9;
                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                            //worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);

                            S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            if (!string.IsNullOrEmpty(S_Detail))
                            {
                                worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    Image = dtOrders.Rows[i - inStartIndex]["image_url"] == null || dtOrders.Rows[i - inStartIndex]["image_url"].ToString() == "" ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (!string.IsNullOrEmpty(Image))
                            //    {
                            //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}
                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (!string.IsNullOrEmpty(Video))
                                {
                                    //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                            values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values_2;
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 7].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Exp_Del_Date"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["PickUp_Status"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Delivery_Date"]);

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                            worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    //worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                                    worksheet.Cells[inwrkrow, 15].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 16].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                // var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["sRefNo"];
                                var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 16].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 16].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 16].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                            success2 = Int64.TryParse(values_2, out number_2);
                            if (success2)
                            {
                                worksheet.Cells[inwrkrow, 17].Value = Convert.ToInt64(values_2);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 17].Value = values_2;
                            }

                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                            worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 24].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 26].Value = ((dtOrders.Rows[i - inStartIndex]["Web_Benefit"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Web_Benefit"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Web_Benefit"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                            //   (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                            //   Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                            worksheet.Cells[inwrkrow, 29].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 29].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                            worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 35].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 36].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 37].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 38].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                            worksheet.Cells[inwrkrow, 45].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                            worksheet.Cells[inwrkrow, 46].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                            worksheet.Cells[inwrkrow, 47].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                            worksheet.Cells[inwrkrow, 48].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 51].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 52].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 53].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 54].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                            worksheet.Cells[inwrkrow, 55].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 28].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[inStartIndex, 24, (inwrkrow - 1), 28].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 24, (inwrkrow - 1), 25].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 28].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                        worksheet.Cells[6, 24, (inwrkrow - 1), 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 24, (inwrkrow - 1), 25].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                        worksheet.Cells[6, 26, (inwrkrow - 1), 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 26, (inwrkrow - 1), 26].Style.Fill.BackgroundColor.SetColor(_PISTA);

                        worksheet.Cells[6, 27, (inwrkrow - 1), 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 27, (inwrkrow - 1), 28].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                        worksheet.Cells[inStartIndex, 34, (inwrkrow - 1), 38].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 45, (inwrkrow - 1), 48].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 53, (inwrkrow - 1), 53].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 7].Style.Numberformat.Format = "#,##";
                        worksheet.Cells[5, 7].Style.Border.Left.Style = worksheet.Cells[5, 7].Style.Border.Right.Style
                                = worksheet.Cells[5, 7].Style.Border.Top.Style = worksheet.Cells[5, 7].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                                = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 23].Formula = "ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[5, 23].Style.Border.Left.Style = worksheet.Cells[5, 23].Style.Border.Right.Style
                                = worksheet.Cells[5, 23].Style.Border.Top.Style = worksheet.Cells[5, 23].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                        worksheet.Cells[5, 24].Formula = "IF(SUBTOTAL(109,W" + inStartIndex + ": W" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + ")/SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")))*(-100),2))";
                        worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 24].Style.Border.Left.Style = worksheet.Cells[5, 24].Style.Border.Right.Style
                                = worksheet.Cells[5, 24].Style.Border.Top.Style = worksheet.Cells[5, 24].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 25].Formula = "ROUND(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 25].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 25].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 25].Style.Border.Left.Style = worksheet.Cells[5, 25].Style.Border.Right.Style
                                = worksheet.Cells[5, 25].Style.Border.Top.Style = worksheet.Cells[5, 25].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 26].Formula = "ROUND(SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 26].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 26].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 26].Style.Border.Left.Style = worksheet.Cells[5, 26].Style.Border.Right.Style
                                = worksheet.Cells[5, 26].Style.Border.Top.Style = worksheet.Cells[5, 26].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 27].Formula = "ROUND(SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 27].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 27].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 27].Style.Border.Left.Style = worksheet.Cells[5, 27].Style.Border.Right.Style
                                = worksheet.Cells[5, 27].Style.Border.Top.Style = worksheet.Cells[5, 27].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                        worksheet.Cells[5, 28].Formula = "IF(SUBTOTAL(109,W" + inStartIndex + ": W" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ") / SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "))) * 100,2))";
                        worksheet.Cells[5, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 28].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 28].Style.Numberformat.Format = "#,##0.00";
                        worksheet.Cells[5, 28].Style.Border.Left.Style = worksheet.Cells[5, 28].Style.Border.Right.Style
                                = worksheet.Cells[5, 28].Style.Border.Top.Style = worksheet.Cells[5, 28].Style.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateFTPAPIExcel(DataTable dtAPIs, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("Client FTP API");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 11].Style.Font.Bold = true;

                    worksheet.Cells[1, 3].Value = "CLIENT FTP API FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 3].Style.Font.Size = 24;
                    worksheet.Cells[1, 3].Style.Font.Bold = true;
                    worksheet.Cells[1, 3, 1, 11].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 3].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    //worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    //worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[2, 2].Style.Font.Size = 11;
                    //worksheet.Cells[2, 2].Style.Font.Bold = true;
                    //worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 3].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 3].Style.Font.Size = 11;
                    worksheet.Cells[2, 3].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 3].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 3, 2, 11].Merge = true;

                    worksheet.Cells[3, 3].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 3].Style.Font.Size = 11;
                    worksheet.Cells[3, 3].Style.Font.Bold = true;
                    worksheet.Cells[3, 3].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 3, 3, 11].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtAPIs.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Created Date & Time";
                    worksheet.Cells[6, 3].Value = "Created By";
                    worksheet.Cells[6, 4].Value = "User Name";
                    worksheet.Cells[6, 5].Value = "Company Name";
                    worksheet.Cells[6, 6].Value = "Customer Name";
                    worksheet.Cells[6, 7].Value = "AssistBy";
                    worksheet.Cells[6, 8].Value = "API Method";
                    worksheet.Cells[6, 9].Value = "Export Type";
                    worksheet.Cells[6, 10].Value = "API Url";
                    worksheet.Cells[6, 11].Value = "Active";
                    worksheet.Cells[6, 12].Value = "Last Updated Date";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(20);
                    worksheet.Cells[6, 3].AutoFitColumns(18);
                    worksheet.Cells[6, 4].AutoFitColumns(17);
                    worksheet.Cells[6, 5].AutoFitColumns(35);
                    worksheet.Cells[6, 6].AutoFitColumns(23);
                    worksheet.Cells[6, 7].AutoFitColumns(23);
                    worksheet.Cells[6, 8].AutoFitColumns(13);
                    worksheet.Cells[6, 9].AutoFitColumns(13);
                    worksheet.Cells[6, 10].AutoFitColumns(83);
                    worksheet.Cells[6, 11].AutoFitColumns(9);
                    worksheet.Cells[6, 12].AutoFitColumns(20);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 12].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 12].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 12].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 12].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 12].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["iSr"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["iSr"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["dCreationDate"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["dCreationDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sfullname"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sfullname"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["Username"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["Username"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["CompanyName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["AssistBy"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["AssistBy"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["ApiMethodName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["ApiMethodName"]);

                        if (dtAPIs.Rows[i - inStartIndex]["ApiMethod"].ToString() == "WEBAPI")
                        {
                            ExportType = "EXCEL(.xlsx)";
                        }
                        else if (dtAPIs.Rows[i - inStartIndex]["ApiMethod"].ToString() == "URL")
                        {
                            ExportType = dtAPIs.Rows[i - inStartIndex]["URLExportType"].ToString();
                        }
                        else if (dtAPIs.Rows[i - inStartIndex]["ApiMethod"].ToString() == "FTP")
                        {
                            ExportType = dtAPIs.Rows[i - inStartIndex]["FTPExportType"].ToString();
                        }
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(ExportType == null ? "" : ExportType);

                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["APIUrl"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["APIUrl"]);
                        worksheet.Cells[inwrkrow, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                        //if (dtAPIs.Rows[i - inStartIndex]["APIUrl"] != null)
                        //{
                        //    URL = dtAPIs.Rows[i - inStartIndex]["APIUrl"] == null ? "" : Convert.ToString(dtAPIs.Rows[i - inStartIndex]["APIUrl"]);
                        //    if (!string.IsNullOrEmpty(URL))
                        //    {
                        //        worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + URL + "\",\" API \")";
                        //        worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["APIStatus"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["APIStatus"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 11].Value = "Yes";
                            worksheet.Cells[inwrkrow, 11].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 11].Value = "No";
                            worksheet.Cells[inwrkrow, 11].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Red);
                        }
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["dTransDate"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["dTransDate"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void Excel_UserManagement(DataTable dtAPIs, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("User Management");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";

                    worksheet.Cells[1, 4].Value = "SUNRISE DIAMONDS PVT. LTD.";
                    worksheet.Cells[1, 4].Style.Font.Size = 24;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 4].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[3, 4].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[1, 4, 3, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 4, 3, 4].Style.Font.Size = 11;
                    worksheet.Cells[1, 4, 3, 4].Style.Font.Bold = true;
                    worksheet.Cells[1, 4, 3, 4].Style.Font.Color.SetColor(colFromHex_H1);

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    worksheet.Cells[6, 1, 6, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 14].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 14].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 14].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 14].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtAPIs.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Create Date";
                    worksheet.Cells[6, 3].Value = "User Name";
                    worksheet.Cells[6, 4].Value = "Company Name";
                    worksheet.Cells[6, 5].Value = "Customer Name";
                    worksheet.Cells[6, 6].Value = "Email Id";
                    worksheet.Cells[6, 7].Value = "Mobile No.";
                    worksheet.Cells[6, 8].Value = "Active";
                    worksheet.Cells[6, 9].Value = "Search Stock";
                    worksheet.Cells[6, 10].Value = "Place Order";
                    worksheet.Cells[6, 11].Value = "Order History";
                    worksheet.Cells[6, 12].Value = "My Cart";
                    worksheet.Cells[6, 13].Value = "My Wishlist";
                    worksheet.Cells[6, 14].Value = "Quick Search";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(11);
                    worksheet.Cells[6, 3].AutoFitColumns(16);
                    worksheet.Cells[6, 4].AutoFitColumns(27);
                    worksheet.Cells[6, 5].AutoFitColumns(20);
                    worksheet.Cells[6, 6].AutoFitColumns(20);
                    worksheet.Cells[6, 7].AutoFitColumns(16.5);
                    worksheet.Cells[6, 8].AutoFitColumns(8);
                    worksheet.Cells[6, 9].AutoFitColumns(12);
                    worksheet.Cells[6, 10].AutoFitColumns(12);
                    worksheet.Cells[6, 11].AutoFitColumns(12.5);
                    worksheet.Cells[6, 12].AutoFitColumns(12);
                    worksheet.Cells[6, 13].AutoFitColumns(12);
                    worksheet.Cells[6, 14].AutoFitColumns(12);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 14].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 14].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 14].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 14].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 14].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["iSr"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["iSr"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["CreatedDate"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["CreatedDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sUsername"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sUsername"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["CustName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["CustName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCompEmail"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCompEmail"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCompMobile"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCompMobile"]);
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["IsActive"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["IsActive"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "Yes";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "No";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Red);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["SearchStock"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["SearchStock"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 9].Value = "Yes";
                            worksheet.Cells[inwrkrow, 9].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Green);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["PlaceOrder"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["PlaceOrder"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 10].Value = "Yes";
                            worksheet.Cells[inwrkrow, 10].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Green);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["OrderHisrory"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["OrderHisrory"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 11].Value = "Yes";
                            worksheet.Cells[inwrkrow, 11].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Green);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["MyCart"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["MyCart"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 12].Value = "Yes";
                            worksheet.Cells[inwrkrow, 12].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Green);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["MyWishlist"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["MyWishlist"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 13].Value = "Yes";
                            worksheet.Cells[inwrkrow, 13].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Green);
                        }
                        if (Convert.ToString(dtAPIs.Rows[i - inStartIndex]["QuickSearch"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["QuickSearch"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 14].Value = "Yes";
                            worksheet.Cells[inwrkrow, 14].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Green);
                        }
                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void ExcelGetConfirmOrder(DataTable dtAPIs, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("Confirm Order List");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 11].Style.Font.Bold = true;

                    worksheet.Cells[1, 3].Value = "CONFIRM ORDER FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 3].Style.Font.Size = 24;
                    worksheet.Cells[1, 3].Style.Font.Bold = true;
                    worksheet.Cells[1, 3, 1, 11].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 3].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    //worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    //worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[2, 2].Style.Font.Size = 11;
                    //worksheet.Cells[2, 2].Style.Font.Bold = true;
                    //worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 3].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 3].Style.Font.Size = 11;
                    worksheet.Cells[2, 3].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 3].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 3, 2, 11].Merge = true;

                    worksheet.Cells[3, 3].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 3].Style.Font.Size = 11;
                    worksheet.Cells[3, 3].Style.Font.Bold = true;
                    worksheet.Cells[3, 3].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 3, 3, 11].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtAPIs.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Order Date";
                    worksheet.Cells[6, 3].Value = "Order No.";
                    worksheet.Cells[6, 4].Value = "Assist 1";
                    worksheet.Cells[6, 5].Value = "Assist 2";
                    worksheet.Cells[6, 6].Value = "Company Name";
                    worksheet.Cells[6, 7].Value = "User Name";
                    worksheet.Cells[6, 8].Value = "Stock Id";
                    worksheet.Cells[6, 9].Value = "Certi No.";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(15);
                    worksheet.Cells[6, 3].AutoFitColumns(13);
                    worksheet.Cells[6, 4].AutoFitColumns(22);
                    worksheet.Cells[6, 5].AutoFitColumns(22);
                    worksheet.Cells[6, 6].AutoFitColumns(48);
                    worksheet.Cells[6, 7].AutoFitColumns(22);
                    worksheet.Cells[6, 8].AutoFitColumns(13);
                    worksheet.Cells[6, 9].AutoFitColumns(13);


                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 9].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 9].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 9].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 9].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 9].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["iSr"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["iSr"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["dtOrderDate1"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["dtOrderDate1"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["iOrderid"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["iOrderid"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["Assist1"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["Assist1"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["Assist2"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["Assist2"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sUsername"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sUsername"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sRefNo"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sRefNo"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCertiNo"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCertiNo"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateUserDiscExcel(DataTable dtDisc, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("Stock & Disc Mgt. Report");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 11].Style.Font.Bold = true;

                    worksheet.Cells[1, 3].Value = "STOCK & DISCOUNT MANAGEMENT REPORT";
                    worksheet.Cells[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 3].Style.Font.Size = 24;
                    worksheet.Cells[1, 3].Style.Font.Bold = true;
                    worksheet.Cells[1, 3, 1, 11].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 3].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    //worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    //worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[2, 2].Style.Font.Size = 11;
                    //worksheet.Cells[2, 2].Style.Font.Bold = true;
                    //worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 3].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 3].Style.Font.Size = 11;
                    worksheet.Cells[2, 3].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 3].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 3, 2, 11].Merge = true;

                    worksheet.Cells[3, 3].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 3].Style.Font.Size = 11;
                    worksheet.Cells[3, 3].Style.Font.Bold = true;
                    worksheet.Cells[3, 3].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 3, 3, 11].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDisc.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Entry Date";
                    worksheet.Cells[6, 3].Value = "Customer Name";
                    worksheet.Cells[6, 4].Value = "Company Name";
                    worksheet.Cells[6, 5].Value = "User Name";
                    worksheet.Cells[6, 6].Value = "Assist By";
                    worksheet.Cells[6, 7].Value = "Active";
                    worksheet.Cells[6, 8].Value = "Vendor";
                    worksheet.Cells[6, 9].Value = "Stock";
                    worksheet.Cells[6, 10].Value = "Location";
                    worksheet.Cells[6, 11].Value = "From Shape";
                    worksheet.Cells[6, 12].Value = "To Shape";
                    worksheet.Cells[6, 13].Value = "Lab";
                    worksheet.Cells[6, 14].Value = "From Cts";
                    worksheet.Cells[6, 15].Value = "To Cts";
                    worksheet.Cells[6, 16].Value = "From Color";
                    worksheet.Cells[6, 17].Value = "To Color";
                    worksheet.Cells[6, 18].Value = "From Clarity";
                    worksheet.Cells[6, 19].Value = "To Clarity";
                    worksheet.Cells[6, 20].Value = "From Cut";
                    worksheet.Cells[6, 21].Value = "To Cut";
                    worksheet.Cells[6, 22].Value = "From Fls";
                    worksheet.Cells[6, 23].Value = "To Fls";
                    worksheet.Cells[6, 24].Value = "Discount";
                    worksheet.Cells[6, 25].Value = "Val Discount";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(20);
                    worksheet.Cells[6, 3].AutoFitColumns(27);
                    worksheet.Cells[6, 4].AutoFitColumns(35);
                    worksheet.Cells[6, 5].AutoFitColumns(27);
                    worksheet.Cells[6, 6].AutoFitColumns(27);
                    worksheet.Cells[6, 7].AutoFitColumns(7);
                    worksheet.Cells[6, 8].AutoFitColumns(27);
                    worksheet.Cells[6, 9].AutoFitColumns(15);
                    worksheet.Cells[6, 10].AutoFitColumns(18.5);
                    worksheet.Cells[6, 11].AutoFitColumns(11);
                    worksheet.Cells[6, 12].AutoFitColumns(11);
                    worksheet.Cells[6, 13].AutoFitColumns(8);
                    worksheet.Cells[6, 14].AutoFitColumns(9);
                    worksheet.Cells[6, 15].AutoFitColumns(9);
                    worksheet.Cells[6, 16].AutoFitColumns(9);
                    worksheet.Cells[6, 17].AutoFitColumns(9);
                    worksheet.Cells[6, 18].AutoFitColumns(9);
                    worksheet.Cells[6, 19].AutoFitColumns(9);
                    worksheet.Cells[6, 20].AutoFitColumns(9);
                    worksheet.Cells[6, 21].AutoFitColumns(9);
                    worksheet.Cells[6, 22].AutoFitColumns(9);
                    worksheet.Cells[6, 23].AutoFitColumns(9);
                    worksheet.Cells[6, 24].AutoFitColumns(9);
                    worksheet.Cells[6, 25].AutoFitColumns(9);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 25].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 25].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 25].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 25].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 25].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 25].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["RowNo"] == null ? "" : dtDisc.Rows[i - inStartIndex]["RowNo"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["EntryDate"] == null ? "" : dtDisc.Rows[i - inStartIndex]["EntryDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["FullName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["FullName"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Username"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Username"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["AssistBy"] == null ? "" : dtDisc.Rows[i - inStartIndex]["AssistBy"]);

                        if (Convert.ToString(dtDisc.Rows[i - inStartIndex]["IsActive"] == null ? "" : dtDisc.Rows[i - inStartIndex]["IsActive"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 7].Value = "Yes";
                            worksheet.Cells[inwrkrow, 7].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = "No";
                            worksheet.Cells[inwrkrow, 7].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sPartyName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sPartyName"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Stock"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Stock"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Location"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Location"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFromShape"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFromShape"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sToShape"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sToShape"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sLab"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sLab"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["rFromCts"] == null ? "" : dtDisc.Rows[i - inStartIndex]["rFromCts"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["rToCts"] == null ? "" : dtDisc.Rows[i - inStartIndex]["rToCts"]);
                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFromColor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFromColor"]);
                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sToColor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sToColor"]);
                        worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFromClarity"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFromClarity"]);
                        worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sToClarity"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sToClarity"]);
                        worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFromCut"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFromCut"]);
                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sToCut"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sToCut"]);
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFromFls"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFromFls"]);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sToFls"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sToFls"]);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["rDisc"] == null ? "" : dtDisc.Rows[i - inStartIndex]["rDisc"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["rValDisc"] == null ? "" : dtDisc.Rows[i - inStartIndex]["rValDisc"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateStockDiscExcel(DataTable dtDisc, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("Stock & Disc Mgt. Report");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 11].Style.Font.Bold = true;

                    worksheet.Cells[1, 3].Value = "STOCK & DISCOUNT MANAGEMENT REPORT";
                    worksheet.Cells[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 3].Style.Font.Size = 24;
                    worksheet.Cells[1, 3].Style.Font.Bold = true;
                    worksheet.Cells[1, 3, 1, 11].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 3].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf
                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 3].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 3].Style.Font.Size = 11;
                    worksheet.Cells[2, 3].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 3].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 3, 2, 11].Merge = true;

                    worksheet.Cells[3, 3].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 3].Style.Font.Size = 11;
                    worksheet.Cells[3, 3].Style.Font.Bold = true;
                    worksheet.Cells[3, 3].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 3, 3, 11].Merge = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDisc.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Entry Date";
                    worksheet.Cells[6, 3].Value = "Customer Name";
                    worksheet.Cells[6, 4].Value = "Country";
                    worksheet.Cells[6, 5].Value = "Company Name";
                    worksheet.Cells[6, 6].Value = "User Name";
                    worksheet.Cells[6, 7].Value = "Assist By";
                    worksheet.Cells[6, 8].Value = "Active";
                    worksheet.Cells[6, 9].Value = "Supplier";
                    worksheet.Cells[6, 10].Value = "Location";
                    worksheet.Cells[6, 11].Value = "Shape";
                    worksheet.Cells[6, 12].Value = "Carat";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cut";
                    worksheet.Cells[6, 16].Value = "Polish";
                    worksheet.Cells[6, 17].Value = "Symm";
                    worksheet.Cells[6, 18].Value = "Fls";
                    worksheet.Cells[6, 19].Value = "Lab";
                    worksheet.Cells[6, 20].Value = "From Length";
                    worksheet.Cells[6, 21].Value = "To Length";
                    worksheet.Cells[6, 22].Value = "From Width";
                    worksheet.Cells[6, 23].Value = "To Width";
                    worksheet.Cells[6, 24].Value = "From Depth";
                    worksheet.Cells[6, 25].Value = "To Depth";
                    worksheet.Cells[6, 26].Value = "From Depth Per.";
                    worksheet.Cells[6, 27].Value = "To Depth Per.";
                    worksheet.Cells[6, 28].Value = "From Table Per.";
                    worksheet.Cells[6, 29].Value = "To Table Per.";
                    worksheet.Cells[6, 30].Value = "From Cr Ang";
                    worksheet.Cells[6, 31].Value = "To Cr Ang";
                    worksheet.Cells[6, 32].Value = "From Cr Ht";
                    worksheet.Cells[6, 33].Value = "To Cr Ht";
                    worksheet.Cells[6, 34].Value = "From Pav Ang";
                    worksheet.Cells[6, 35].Value = "To Pav Ang";
                    worksheet.Cells[6, 36].Value = "From Pav Ht";
                    worksheet.Cells[6, 37].Value = "To Pav Ht";
                    worksheet.Cells[6, 38].Value = "Key To Symbol";
                    worksheet.Cells[6, 39].Value = "BGM";
                    worksheet.Cells[6, 40].Value = "Crown Black";
                    worksheet.Cells[6, 41].Value = "Table Black";
                    worksheet.Cells[6, 42].Value = "Crown White";
                    worksheet.Cells[6, 43].Value = "Table White";
                    worksheet.Cells[6, 44].Value = "Used For";
                    worksheet.Cells[6, 45].Value = "Image";
                    worksheet.Cells[6, 46].Value = "Video";
                    worksheet.Cells[6, 47].Value = "Price Method";
                    worksheet.Cells[6, 48].Value = "Price Per.";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);           //"Sr.";
                    worksheet.Cells[6, 2].AutoFitColumns(19);             //"Entry Date";
                    worksheet.Cells[6, 3].AutoFitColumns(18);             //"Customer Name";
                    worksheet.Cells[6, 4].AutoFitColumns(14);             //"Country";
                    worksheet.Cells[6, 5].AutoFitColumns(35);             //"Company Name";
                    worksheet.Cells[6, 6].AutoFitColumns(15);             //"User Name";
                    worksheet.Cells[6, 7].AutoFitColumns(18);             //"Assist By";
                    worksheet.Cells[6, 8].AutoFitColumns(6);              //"Active";
                    worksheet.Cells[6, 9].AutoFitColumns(35);             //"Supplier";
                    worksheet.Cells[6, 10].AutoFitColumns(20);            //"Location";
                    worksheet.Cells[6, 11].AutoFitColumns(35);            //"Shape";
                    worksheet.Cells[6, 12].AutoFitColumns(35);            //"Carat";
                    worksheet.Cells[6, 13].AutoFitColumns(35);            //"Color";
                    worksheet.Cells[6, 14].AutoFitColumns(15);            //"Clarity";
                    worksheet.Cells[6, 15].AutoFitColumns(15);            //"Cut";
                    worksheet.Cells[6, 16].AutoFitColumns(15);            //"Polish";
                    worksheet.Cells[6, 17].AutoFitColumns(15);            //"Symm";
                    worksheet.Cells[6, 18].AutoFitColumns(15);            //"Fls";
                    worksheet.Cells[6, 19].AutoFitColumns(15);            //"Lab";
                    worksheet.Cells[6, 20].AutoFitColumns(8);            //"From Length";
                    worksheet.Cells[6, 21].AutoFitColumns(8);            //"To Length";
                    worksheet.Cells[6, 22].AutoFitColumns(8);          //"From Width";
                    worksheet.Cells[6, 23].AutoFitColumns(8);          //"To Width";
                    worksheet.Cells[6, 24].AutoFitColumns(8);          //"From Depth";
                    worksheet.Cells[6, 25].AutoFitColumns(8);          //"To Depth";
                    worksheet.Cells[6, 26].AutoFitColumns(8);          //"From Depth Per.";
                    worksheet.Cells[6, 27].AutoFitColumns(8);          //"To Depth Per.";
                    worksheet.Cells[6, 28].AutoFitColumns(8);          //"From Table Per.";
                    worksheet.Cells[6, 29].AutoFitColumns(8);          //"To Table Per.";
                    worksheet.Cells[6, 30].AutoFitColumns(8);          //"From Cr Ang";
                    worksheet.Cells[6, 31].AutoFitColumns(8);          //"To Cr Ang";
                    worksheet.Cells[6, 32].AutoFitColumns(8);          //"From Cr Ht";
                    worksheet.Cells[6, 33].AutoFitColumns(8);          //"To Cr Ht";
                    worksheet.Cells[6, 34].AutoFitColumns(8);          //"From Pav Ang";
                    worksheet.Cells[6, 35].AutoFitColumns(8);          //"To Pav Ang";
                    worksheet.Cells[6, 36].AutoFitColumns(8);          //"From Pav Ht";
                    worksheet.Cells[6, 37].AutoFitColumns(8);          //"To Pav Ht";
                    worksheet.Cells[6, 38].AutoFitColumns(35);          //"Key To Symbol";
                    worksheet.Cells[6, 39].AutoFitColumns(13);          //"BGM";
                    worksheet.Cells[6, 40].AutoFitColumns(13);          //"Crown Black";
                    worksheet.Cells[6, 41].AutoFitColumns(13);          //"Table Black";
                    worksheet.Cells[6, 42].AutoFitColumns(13);          //"Crown White";
                    worksheet.Cells[6, 43].AutoFitColumns(13);          //"Table White";
                    worksheet.Cells[6, 44].AutoFitColumns(13);          //"Used For";
                    worksheet.Cells[6, 45].AutoFitColumns(7);          //"Image";
                    worksheet.Cells[6, 46].AutoFitColumns(7);          //"Video";
                    worksheet.Cells[6, 47].AutoFitColumns(9);          //"Price Method";
                    worksheet.Cells[6, 48].AutoFitColumns(8);          //"Price Per.";

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 48].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 48].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 48].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 48].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 48].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 48].Style.WrapText = true;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 48].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["RowNo"] == null ? "" : dtDisc.Rows[i - inStartIndex]["RowNo"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["CreationDate"] == null ? "" : dtDisc.Rows[i - inStartIndex]["CreationDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["CustName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["CustName"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCompCountry"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCompCountry"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Username"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Username"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["AssistBy"] == null ? "" : dtDisc.Rows[i - inStartIndex]["AssistBy"]);

                        if (Convert.ToString(dtDisc.Rows[i - inStartIndex]["IsActive"] == null ? "" : dtDisc.Rows[i - inStartIndex]["IsActive"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "Yes";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "No";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["iVendor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["iVendor"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["iLocation"] == null ? "" : dtDisc.Rows[i - inStartIndex]["iLocation"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sShape"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sShape"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sPointer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sPointer"]);

                        string sColorType = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sColorType"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sColorType"]);
                        string sColor = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sColor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sColor"]);
                        string sINTENSITY = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sINTENSITY"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sINTENSITY"]);
                        string sOVERTONE = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sOVERTONE"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sOVERTONE"]);
                        string sFANCY_COLOR = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFANCY_COLOR"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFANCY_COLOR"]);
                        string FinalColor = "";
                        if (sColor != "")
                        {
                            FinalColor += sColor;
                        }
                        if (sINTENSITY != "")
                        {
                            FinalColor += (FinalColor == "" ? "" : " ") + "INTENSITY : " + sINTENSITY;
                        }
                        if (sOVERTONE != "")
                        {
                            FinalColor += (FinalColor == "" ? "" : " ") + "OVERTONE : " + sOVERTONE;
                        }
                        if (sFANCY_COLOR != "")
                        {
                            FinalColor += (FinalColor == "" ? "" : " ") + "FANCY COLOR : " + sFANCY_COLOR;
                        }
                        if (sColorType != "")
                        {
                            if (sColorType == "Regular")
                            {
                                FinalColor = "REGULAR ALL";
                            }
                            else if (sColorType == "Fancy")
                            {
                                FinalColor = "FANCY ALL";
                            }
                        }
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(FinalColor);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sClarity"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCut"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sPolish"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sSymm"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFls"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFls"]);
                        worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sLab"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sLab"]);
                        worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromLength"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromLength"]);
                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToLength"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToLength"]);
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromWidth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromWidth"]);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToWidth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToWidth"]);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromDepth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromDepth"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToDepth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToDepth"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromDepthPer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromDepthPer"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToDepthPer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToDepthPer"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromTablePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromTablePer"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToTablePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToTablePer"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromCrAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromCrAng"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToCrAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToCrAng"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromCrHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromCrHt"]);
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToCrHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToCrHt"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromPavAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromPavAng"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToPavAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToPavAng"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromPavHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromPavHt"]);
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToPavHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToPavHt"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dKeytosymbol"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dKeytosymbol"]);
                        worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sBGM"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sBGM"]);
                        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCrownBlack"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCrownBlack"]);
                        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sTableBlack"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sTableBlack"]);
                        worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCrownWhite"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCrownWhite"]);
                        worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sTableWhite"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sTableWhite"]);

                        Boolean View, Download;
                        string UsedFor = "";
                        View = Convert.ToBoolean(dtDisc.Rows[i - inStartIndex]["View"] == null ? "" : dtDisc.Rows[i - inStartIndex]["View"]);
                        Download = Convert.ToBoolean(dtDisc.Rows[i - inStartIndex]["Download"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Download"]);
                        UsedFor = (View == true ? "View" : "");
                        UsedFor += (Download == true ? (View == true ? ", Download" : "Download") : "");
                        worksheet.Cells[inwrkrow, 44].Value = UsedFor;

                        worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Img"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Img"]);
                        worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Vdo"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Vdo"]);
                        worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["PriceMethod"] == null ? "" : dtDisc.Rows[i - inStartIndex]["PriceMethod"]);
                        worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["PricePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["PricePer"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateUploadMethodReportExcel(DataTable dtDisc, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("Client FTP / API Portal Report");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 11].Style.Font.Bold = true;

                    worksheet.Cells[1, 3].Value = "CLIENT FTP / API PORTAL REPORT";
                    worksheet.Cells[1, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 3].Style.Font.Size = 24;
                    worksheet.Cells[1, 3].Style.Font.Bold = true;
                    worksheet.Cells[1, 3, 1, 11].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 3].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf
                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 3].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 3].Style.Font.Size = 11;
                    worksheet.Cells[2, 3].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 3].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 3, 2, 11].Merge = true;

                    worksheet.Cells[3, 3].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 3].Style.Font.Size = 11;
                    worksheet.Cells[3, 3].Style.Font.Bold = true;
                    worksheet.Cells[3, 3].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 3, 3, 11].Merge = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtDisc.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Entry Date";
                    worksheet.Cells[6, 3].Value = "Customer Name";
                    worksheet.Cells[6, 4].Value = "Country";
                    worksheet.Cells[6, 5].Value = "Company Name";
                    worksheet.Cells[6, 6].Value = "User Name";
                    worksheet.Cells[6, 7].Value = "Assist By";
                    worksheet.Cells[6, 8].Value = "Active";
                    worksheet.Cells[6, 9].Value = "Supplier";
                    worksheet.Cells[6, 10].Value = "Location";
                    worksheet.Cells[6, 11].Value = "Shape";
                    worksheet.Cells[6, 12].Value = "Carat";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cut";
                    worksheet.Cells[6, 16].Value = "Polish";
                    worksheet.Cells[6, 17].Value = "Symm";
                    worksheet.Cells[6, 18].Value = "Fls";
                    worksheet.Cells[6, 19].Value = "Lab";
                    worksheet.Cells[6, 20].Value = "Shade";
                    worksheet.Cells[6, 21].Value = "Luster";
                    worksheet.Cells[6, 22].Value = "From Length";
                    worksheet.Cells[6, 23].Value = "To Length";
                    worksheet.Cells[6, 24].Value = "From Width";
                    worksheet.Cells[6, 25].Value = "To Width";
                    worksheet.Cells[6, 26].Value = "From Depth";
                    worksheet.Cells[6, 27].Value = "To Depth";
                    worksheet.Cells[6, 28].Value = "From Depth Per.";
                    worksheet.Cells[6, 29].Value = "To Depth Per.";
                    worksheet.Cells[6, 30].Value = "From Table Per.";
                    worksheet.Cells[6, 31].Value = "To Table Per.";
                    worksheet.Cells[6, 32].Value = "From Cr Ang";
                    worksheet.Cells[6, 33].Value = "To Cr Ang";
                    worksheet.Cells[6, 34].Value = "From Cr Ht";
                    worksheet.Cells[6, 35].Value = "To Cr Ht";
                    worksheet.Cells[6, 36].Value = "From Pav Ang";
                    worksheet.Cells[6, 37].Value = "To Pav Ang";
                    worksheet.Cells[6, 38].Value = "From Pav Ht";
                    worksheet.Cells[6, 39].Value = "To Pav Ht";
                    worksheet.Cells[6, 40].Value = "Key To Symbol";
                    worksheet.Cells[6, 41].Value = "BGM";
                    worksheet.Cells[6, 42].Value = "Crown Black";
                    worksheet.Cells[6, 43].Value = "Table Black";
                    worksheet.Cells[6, 44].Value = "Crown White";
                    worksheet.Cells[6, 45].Value = "Table White";
                    worksheet.Cells[6, 46].Value = "Image";
                    worksheet.Cells[6, 47].Value = "Video";
                    worksheet.Cells[6, 48].Value = "Include Bluenile";
                    worksheet.Cells[6, 49].Value = "Price Method";
                    worksheet.Cells[6, 50].Value = "Price Per.";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);           //"Sr.";
                    worksheet.Cells[6, 2].AutoFitColumns(19);             //"Entry Date";
                    worksheet.Cells[6, 3].AutoFitColumns(18);             //"Customer Name";
                    worksheet.Cells[6, 4].AutoFitColumns(14);             //"Country";
                    worksheet.Cells[6, 5].AutoFitColumns(35);             //"Company Name";
                    worksheet.Cells[6, 6].AutoFitColumns(15);             //"User Name";
                    worksheet.Cells[6, 7].AutoFitColumns(18);             //"Assist By";
                    worksheet.Cells[6, 8].AutoFitColumns(6);              //"Active";
                    worksheet.Cells[6, 9].AutoFitColumns(35);             //"Supplier";
                    worksheet.Cells[6, 10].AutoFitColumns(20);             //"Location";
                    worksheet.Cells[6, 11].AutoFitColumns(35);            //"Shape";
                    worksheet.Cells[6, 12].AutoFitColumns(35);            //"Carat";
                    worksheet.Cells[6, 13].AutoFitColumns(35);            //"Color";
                    worksheet.Cells[6, 14].AutoFitColumns(15);            //"Clarity";
                    worksheet.Cells[6, 15].AutoFitColumns(15);            //"Cut";
                    worksheet.Cells[6, 16].AutoFitColumns(15);            //"Polish";
                    worksheet.Cells[6, 17].AutoFitColumns(15);            //"Symm";
                    worksheet.Cells[6, 18].AutoFitColumns(15);            //"Fls";
                    worksheet.Cells[6, 19].AutoFitColumns(15);            //"Lab";
                    worksheet.Cells[6, 20].AutoFitColumns(15);            //"Shade";
                    worksheet.Cells[6, 21].AutoFitColumns(15);            //"Luster";
                    worksheet.Cells[6, 22].AutoFitColumns(8);            //"From Length";
                    worksheet.Cells[6, 23].AutoFitColumns(8);            //"To Length";
                    worksheet.Cells[6, 24].AutoFitColumns(8);          //"From Width";
                    worksheet.Cells[6, 25].AutoFitColumns(8);          //"To Width";
                    worksheet.Cells[6, 26].AutoFitColumns(8);          //"From Depth";
                    worksheet.Cells[6, 27].AutoFitColumns(8);          //"To Depth";
                    worksheet.Cells[6, 28].AutoFitColumns(8);          //"From Depth Per.";
                    worksheet.Cells[6, 29].AutoFitColumns(8);          //"To Depth Per.";
                    worksheet.Cells[6, 30].AutoFitColumns(8);          //"From Table Per.";
                    worksheet.Cells[6, 31].AutoFitColumns(8);          //"To Table Per.";
                    worksheet.Cells[6, 32].AutoFitColumns(8);          //"From Cr Ang";
                    worksheet.Cells[6, 33].AutoFitColumns(8);          //"To Cr Ang";
                    worksheet.Cells[6, 34].AutoFitColumns(8);          //"From Cr Ht";
                    worksheet.Cells[6, 35].AutoFitColumns(8);          //"To Cr Ht";
                    worksheet.Cells[6, 36].AutoFitColumns(8);          //"From Pav Ang";
                    worksheet.Cells[6, 37].AutoFitColumns(8);          //"To Pav Ang";
                    worksheet.Cells[6, 38].AutoFitColumns(8);          //"From Pav Ht";
                    worksheet.Cells[6, 39].AutoFitColumns(8);          //"To Pav Ht";
                    worksheet.Cells[6, 40].AutoFitColumns(35);          //"Key To Symbol";
                    worksheet.Cells[6, 41].AutoFitColumns(13);          //"BGM";
                    worksheet.Cells[6, 42].AutoFitColumns(13);          //"Crown Black";
                    worksheet.Cells[6, 43].AutoFitColumns(13);          //"Table Black";
                    worksheet.Cells[6, 44].AutoFitColumns(13);          //"Crown White";
                    worksheet.Cells[6, 45].AutoFitColumns(13);          //"Table White";
                    worksheet.Cells[6, 46].AutoFitColumns(7);          //"Image";
                    worksheet.Cells[6, 47].AutoFitColumns(7);          //"Video";
                    worksheet.Cells[6, 48].AutoFitColumns(11);          //"Include Bluenile";
                    worksheet.Cells[6, 49].AutoFitColumns(9);          //"Price Method";
                    worksheet.Cells[6, 50].AutoFitColumns(8);          //"Price Per.";

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 50].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 50].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 50].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 50].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 50].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 50].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 50].Style.WrapText = true;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 50].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 50].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["RowNo"] == null ? "" : dtDisc.Rows[i - inStartIndex]["RowNo"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["CreationDate"] == null ? "" : dtDisc.Rows[i - inStartIndex]["CreationDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["CustName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["CustName"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCompCountry"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCompCountry"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Username"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Username"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["AssistBy"] == null ? "" : dtDisc.Rows[i - inStartIndex]["AssistBy"]);

                        if (Convert.ToString(dtDisc.Rows[i - inStartIndex]["IsActive"] == null ? "" : dtDisc.Rows[i - inStartIndex]["IsActive"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "Yes";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = "No";
                            worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["iVendor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["iVendor"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["iLocation"] == null ? "" : dtDisc.Rows[i - inStartIndex]["iLocation"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sShape"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sShape"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sPointer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sColor"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sClarity"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCut"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sPolish"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sSymm"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sFls"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sFls"]);
                        worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sLab"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sLab"]);
                        worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sShade"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sShade"]);
                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sLuster"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sLuster"]);
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromLength"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromLength"]);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToLength"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToLength"]);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromWidth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromWidth"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToWidth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToWidth"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromDepth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromDepth"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToDepth"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToDepth"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromDepthPer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromDepthPer"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToDepthPer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToDepthPer"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromTablePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromTablePer"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToTablePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToTablePer"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromCrAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromCrAng"]);
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToCrAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToCrAng"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromCrHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromCrHt"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToCrHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToCrHt"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromPavAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromPavAng"]);
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToPavAng"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToPavAng"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dFromPavHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dFromPavHt"]);
                        worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dToPavHt"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dToPavHt"]);
                        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["dKeytosymbol"] == null ? "" : dtDisc.Rows[i - inStartIndex]["dKeytosymbol"]);
                        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sBGM"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sBGM"]);
                        worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCrownBlack"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCrownBlack"]);
                        worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sTableBlack"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sTableBlack"]);
                        worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sCrownWhite"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sCrownWhite"]);
                        worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["sTableWhite"] == null ? "" : dtDisc.Rows[i - inStartIndex]["sTableWhite"]);
                        worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Img"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Img"]);
                        worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Vdo"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Vdo"]);
                        worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["Bluenile"] == null ? "" : dtDisc.Rows[i - inStartIndex]["Bluenile"]);
                        worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["PriceMethod"] == null ? "" : dtDisc.Rows[i - inStartIndex]["PriceMethod"]);
                        worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtDisc.Rows[i - inStartIndex]["PricePer"] == null ? "" : dtDisc.Rows[i - inStartIndex]["PricePer"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateWishListExcel_1(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, bool isAssistBy)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("WishList");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS WISHLIST FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int inStartIndex = 7, inwrkrow = 7, inEndCounter = dtOrders.Rows.Count + inStartIndex, TotalRow = dtOrders.Rows.Count, i;
                    string values, Image, Video, hyprlink1, S_Detail, Certificate, status, cut, ForCust_Hold;
                    Int64 number;
                    bool success;

                    if (isAssistBy)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 50].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 50].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 50].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 50].Style.Font.Size = 11;

                        worksheet.Cells[6, 1, 6, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 50].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 50].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 50].Style.Font.Bold = true;

                        worksheet.Cells[6, 1, 6, 50].AutoFilter = true;
                        worksheet.Cells[6, 2, 6, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 1, 6, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 5, 6, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 50].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 50].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "User Name";
                        worksheet.Cells[6, 4].Value = "Company Name";
                        worksheet.Cells[6, 5].Value = "Assist By";
                        worksheet.Cells[6, 6].Value = "Stock Id";
                        worksheet.Cells[6, 7].Value = "Location";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "DNA";
                        worksheet.Cells[6, 10].Value = "View Image";
                        worksheet.Cells[6, 11].Value = "HD Movie";
                        worksheet.Cells[6, 12].Value = "Shape";
                        worksheet.Cells[6, 13].Value = "Pointer";
                        worksheet.Cells[6, 14].Value = "Lab";
                        worksheet.Cells[6, 15].Value = "Certi No.";
                        worksheet.Cells[6, 16].Value = "BGM";
                        worksheet.Cells[6, 17].Value = "Color";
                        worksheet.Cells[6, 18].Value = "Clarity";
                        worksheet.Cells[6, 19].Value = "Cts";
                        worksheet.Cells[6, 20].Value = "Rap Price($)";
                        worksheet.Cells[6, 21].Value = "Rap Amt($)";
                        worksheet.Cells[6, 22].Value = "Disc(%)";
                        worksheet.Cells[6, 23].Value = "Net Amt($)";
                        worksheet.Cells[6, 24].Value = "Price/Cts";
                        worksheet.Cells[6, 25].Value = "Cut";
                        worksheet.Cells[6, 26].Value = "Polish";
                        worksheet.Cells[6, 27].Value = "Symm";
                        worksheet.Cells[6, 28].Value = "Fls";
                        worksheet.Cells[6, 29].Value = "Length";
                        worksheet.Cells[6, 30].Value = "Width";
                        worksheet.Cells[6, 31].Value = "Depth";
                        worksheet.Cells[6, 32].Value = "Depth(%)";
                        worksheet.Cells[6, 33].Value = "Table(%)";
                        worksheet.Cells[6, 34].Value = "Key To Symbol";
                        worksheet.Cells[6, 35].Value = "Culet";
                        worksheet.Cells[6, 36].Value = "Table Black";
                        worksheet.Cells[6, 37].Value = "Crown Black";
                        worksheet.Cells[6, 38].Value = "Table White";
                        worksheet.Cells[6, 39].Value = "Crown White";
                        worksheet.Cells[6, 40].Value = "Cr Ang";
                        worksheet.Cells[6, 41].Value = "Cr Ht";
                        worksheet.Cells[6, 42].Value = "Pav Ang";
                        worksheet.Cells[6, 43].Value = "Pav Ht";
                        worksheet.Cells[6, 44].Value = "Table Open";
                        worksheet.Cells[6, 45].Value = "Crown Open";
                        worksheet.Cells[6, 46].Value = "Pav Open";
                        worksheet.Cells[6, 47].Value = "Girdle Open";
                        worksheet.Cells[6, 48].Value = "Girdle(%)";     //44
                        worksheet.Cells[6, 49].Value = "Girdle Type";   //45
                        worksheet.Cells[6, 50].Value = "Laser Insc";    //46

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 50].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(14);
                        worksheet.Cells[6, 5].AutoFitColumns(12);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(10);
                        worksheet.Cells[6, 8].AutoFitColumns(10.5);
                        worksheet.Cells[6, 9].AutoFitColumns(8.86);
                        worksheet.Cells[6, 10].AutoFitColumns(9);
                        worksheet.Cells[6, 11].AutoFitColumns(12);
                        worksheet.Cells[6, 12].AutoFitColumns(9.57);
                        worksheet.Cells[6, 13].AutoFitColumns(8.14);
                        worksheet.Cells[6, 14].AutoFitColumns(12);
                        worksheet.Cells[6, 15].AutoFitColumns(13.5);
                        worksheet.Cells[6, 16].AutoFitColumns(8.43);
                        worksheet.Cells[6, 17].AutoFitColumns(9.29);
                        worksheet.Cells[6, 18].AutoFitColumns(9.29);
                        worksheet.Cells[6, 19].AutoFitColumns(9.29);
                        worksheet.Cells[6, 20].AutoFitColumns(9.29);
                        worksheet.Cells[6, 21].AutoFitColumns(12);
                        worksheet.Cells[6, 22].AutoFitColumns(9.29);
                        worksheet.Cells[6, 23].AutoFitColumns(12);
                        worksheet.Cells[6, 24].AutoFitColumns(8.14);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(9);
                        worksheet.Cells[6, 33].AutoFitColumns(7.9);
                        worksheet.Cells[6, 34].AutoFitColumns(35.29);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);    //44
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);    //45
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);    //46

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 2, inEndCounter, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 5, inEndCounter, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtOrders.Rows[i - inStartIndex]["vsr"]);

                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Trans_date"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Trans_date"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompName"]);
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["AssistBy1"]);

                            values = dtOrders.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Status1"]).ToLower();
                            ForCust_Hold = dtOrders.Rows[i - inStartIndex]["ForCust_Hold"].ToString();
                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";

                            worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                            }


                            //worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    hyprlink1 = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (hyprlink1 != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Shape"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pointer"]);

                            string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Lab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    string hyprlink3 = Certificate;
                                    //worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values = dtOrders.Rows[i - inStartIndex]["certi_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 15].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 15].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Color"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Clarity"]);
                            worksheet.Cells[inwrkrow, 19].Value = (dtOrders.Rows[i - inStartIndex]["Cts"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["Cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Cts"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 20].Value = (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 21].Value = (dtOrders.Rows[i - inStartIndex]["rap_amount"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 22].Value = (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 23].Value = (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 24].Value = (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null;

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]);
                            worksheet.Cells[inwrkrow, 25].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Polish"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Symm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Fls"]);
                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Length"]);
                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Width"]);
                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth"]);

                            //worksheet.Cells[inwrkrow, 32].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]);
                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["Depth_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Depth_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 33].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]);
                            worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["Table_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Table_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sculet"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["TABLE_NATTS"] == null ? "" : dtOrders.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 40].Value = dtOrders.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 41].Value = dtOrders.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"];
                            worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"];
                            worksheet.Cells[inwrkrow, 43].Value = dtOrders.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 48].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtOrders.Rows[i - inStartIndex]["girdle_type"]);

                            worksheet.Cells[inwrkrow, 50].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 50].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 24].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 22, (inwrkrow - 1), 23].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[6, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 33].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 40, (inwrkrow - 1), 43].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 48, (inwrkrow - 1), 48].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 6].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 22].Formula = "=IF(SUBTOTAL(109,U" + inStartIndex + ": U" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")/SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")))*(-100)),2))";

                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 22].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;


                        worksheet.Cells[5, 23].Formula = "ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 23].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 5, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 47].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 47].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 47].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 47].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 47].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 47].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 47].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Stock Id";
                        worksheet.Cells[6, 4].Value = "Location";
                        worksheet.Cells[6, 5].Value = "Status";
                        worksheet.Cells[6, 6].Value = "DNA";
                        worksheet.Cells[6, 7].Value = "View Image";
                        worksheet.Cells[6, 8].Value = "HD Movie";
                        worksheet.Cells[6, 9].Value = "Shape";
                        worksheet.Cells[6, 10].Value = "Pointer";
                        worksheet.Cells[6, 11].Value = "Lab";
                        worksheet.Cells[6, 12].Value = "Certi No.";
                        worksheet.Cells[6, 13].Value = "BGM";
                        worksheet.Cells[6, 14].Value = "Color";
                        worksheet.Cells[6, 15].Value = "Clarity";
                        worksheet.Cells[6, 16].Value = "Cts";
                        worksheet.Cells[6, 17].Value = "Rap Price($)";
                        worksheet.Cells[6, 18].Value = "Rap Amt($)";
                        worksheet.Cells[6, 19].Value = "Disc(%)";
                        worksheet.Cells[6, 20].Value = "Net Amt($)";
                        worksheet.Cells[6, 21].Value = "Price/Cts";
                        worksheet.Cells[6, 22].Value = "Cut";
                        worksheet.Cells[6, 23].Value = "Polish";
                        worksheet.Cells[6, 24].Value = "Symm";
                        worksheet.Cells[6, 25].Value = "Fls";
                        worksheet.Cells[6, 26].Value = "Length";
                        worksheet.Cells[6, 27].Value = "Width";
                        worksheet.Cells[6, 28].Value = "Depth";
                        worksheet.Cells[6, 29].Value = "Depth(%)";
                        worksheet.Cells[6, 30].Value = "Table(%)";
                        worksheet.Cells[6, 31].Value = "Key To Symbol";
                        worksheet.Cells[6, 32].Value = "Culet";
                        worksheet.Cells[6, 33].Value = "Table Black";
                        worksheet.Cells[6, 34].Value = "Crown Black";
                        worksheet.Cells[6, 35].Value = "Table White";
                        worksheet.Cells[6, 36].Value = "Crown White";
                        worksheet.Cells[6, 37].Value = "Cr Ang";
                        worksheet.Cells[6, 38].Value = "Cr Ht";
                        worksheet.Cells[6, 39].Value = "Pav Ang";
                        worksheet.Cells[6, 40].Value = "Pav Ht";
                        worksheet.Cells[6, 41].Value = "Table Open";
                        worksheet.Cells[6, 42].Value = "Crown Open";
                        worksheet.Cells[6, 43].Value = "Pav Open";
                        worksheet.Cells[6, 44].Value = "Girdle Open";
                        worksheet.Cells[6, 45].Value = "Girdle(%)";     //41
                        worksheet.Cells[6, 46].Value = "Girdle Type";   //42
                        worksheet.Cells[6, 47].Value = "Laser Insc";    //43

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 47].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(10);
                        worksheet.Cells[6, 4].AutoFitColumns(10);
                        worksheet.Cells[6, 5].AutoFitColumns(10.5);
                        worksheet.Cells[6, 6].AutoFitColumns(8.86);
                        worksheet.Cells[6, 7].AutoFitColumns(9);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(8.43);
                        worksheet.Cells[6, 10].AutoFitColumns(9.57);
                        worksheet.Cells[6, 11].AutoFitColumns(12);//8.43
                        worksheet.Cells[6, 12].AutoFitColumns(13.5);
                        worksheet.Cells[6, 13].AutoFitColumns(12);
                        worksheet.Cells[6, 14].AutoFitColumns(8.43);
                        worksheet.Cells[6, 15].AutoFitColumns(9.29);
                        worksheet.Cells[6, 16].AutoFitColumns(9.29);
                        worksheet.Cells[6, 17].AutoFitColumns(9.29);
                        worksheet.Cells[6, 18].AutoFitColumns(12);
                        worksheet.Cells[6, 19].AutoFitColumns(9.29);
                        worksheet.Cells[6, 20].AutoFitColumns(12);
                        worksheet.Cells[6, 21].AutoFitColumns(9.29);
                        worksheet.Cells[6, 22].AutoFitColumns(8.14);
                        worksheet.Cells[6, 23].AutoFitColumns(7.86);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(9);
                        worksheet.Cells[6, 30].AutoFitColumns(7.9);
                        worksheet.Cells[6, 31].AutoFitColumns(35.29);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);    //41
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);    //42
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);    //43

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtOrders.Rows[i - inStartIndex]["vsr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Trans_date"]);

                            values = dtOrders.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 3].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);

                            status = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Status1"]).ToLower();
                            ForCust_Hold = dtOrders.Rows[i - inStartIndex]["ForCust_Hold"].ToString();
                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";

                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 6].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 6].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 6].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    hyprlink1 = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (hyprlink1 != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Shape"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pointer"]);

                            string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Lab"]) + certi_type;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    string hyprlink3 = Certificate;
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + certi_type + " \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            values = dtOrders.Rows[i - inStartIndex]["certi_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 12].Value = Convert.ToInt64(dtOrders.Rows[i - inStartIndex]["certi_no"]);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 12].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Color"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Clarity"]);
                            worksheet.Cells[inwrkrow, 16].Value = (dtOrders.Rows[i - inStartIndex]["Cts"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["Cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Cts"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 17].Value = (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 18].Value = (dtOrders.Rows[i - inStartIndex]["rap_amount"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 19].Value = (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 20].Value = (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 21].Value = (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null;

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]);
                            worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Polish"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Symm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Fls"]);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Length"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Width"]);
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth"]);

                            //worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]);
                            worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["Depth_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Depth_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 30].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]);
                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["Table_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Table_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sculet"]);
                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["TABLE_NATTS"] == null ? "" : dtOrders.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"]);

                            worksheet.Cells[inwrkrow, 37].Value = dtOrders.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"];
                            worksheet.Cells[inwrkrow, 38].Value = dtOrders.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"];
                            worksheet.Cells[inwrkrow, 39].Value = dtOrders.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"];
                            worksheet.Cells[inwrkrow, 40].Value = dtOrders.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 45].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtOrders.Rows[i - inStartIndex]["girdle_type"]);

                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 47].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 30].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 40].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 45, (inwrkrow - 1), 45].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 3].Formula = "ROUND(SUBTOTAL(103,E" + inStartIndex + ":E" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 3].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 3].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 3].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 16].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 18].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 19].Formula = "=IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);
                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }
        public static void CreateWishListExcel(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, bool isAssistBy)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("WishList");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS WISHLIST FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    int inStartIndex = 7, inwrkrow = 7, inEndCounter = dtOrders.Rows.Count + inStartIndex, TotalRow = dtOrders.Rows.Count, i;
                    string values, Image, Video, hyprlink1, S_Detail, Certificate, status, cut, ForCust_Hold;
                    Int64 number;
                    bool success;

                    if (isAssistBy)
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 52].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 52].Style.Font.Size = 11;
                        worksheet.Cells[5, 1, 5, 52].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 52].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 52].Style.Font.Size = 11;

                        worksheet.Cells[6, 1, 6, 52].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 52].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 52].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 52].Style.Font.Bold = true;

                        worksheet.Cells[6, 1, 6, 52].AutoFilter = true;
                        worksheet.Cells[6, 2, 6, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[6, 1, 6, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 5, 6, 52].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        worksheet.Cells[6, 1, 6, 52].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 52].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "User Name";
                        worksheet.Cells[6, 4].Value = "Company Name";
                        worksheet.Cells[6, 5].Value = "Assist By";
                        worksheet.Cells[6, 6].Value = "Stock Id";
                        worksheet.Cells[6, 7].Value = "Location";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "DNA";
                        worksheet.Cells[6, 10].Value = "View Image";
                        worksheet.Cells[6, 11].Value = "HD Movie";
                        worksheet.Cells[6, 12].Value = "Shape";
                        worksheet.Cells[6, 13].Value = "Pointer";
                        worksheet.Cells[6, 14].Value = "Lab";
                        worksheet.Cells[6, 15].Value = "Certi Type";
                        worksheet.Cells[6, 16].Value = "Certi No.";
                        worksheet.Cells[6, 17].Value = "BGM";
                        worksheet.Cells[6, 18].Value = "Color";
                        worksheet.Cells[6, 19].Value = "Clarity";
                        worksheet.Cells[6, 20].Value = "Cts";
                        worksheet.Cells[6, 21].Value = "Rap Price($)";
                        worksheet.Cells[6, 22].Value = "Rap Amt($)";
                        worksheet.Cells[6, 23].Value = "Disc(%)";
                        worksheet.Cells[6, 24].Value = "Net Amt($)";
                        worksheet.Cells[6, 25].Value = "Price/Cts";
                        worksheet.Cells[6, 26].Value = "Cut";
                        worksheet.Cells[6, 27].Value = "Polish";
                        worksheet.Cells[6, 28].Value = "Symm";
                        worksheet.Cells[6, 29].Value = "Fls";
                        worksheet.Cells[6, 30].Value = "Ratio";
                        worksheet.Cells[6, 31].Value = "Length";
                        worksheet.Cells[6, 32].Value = "Width";
                        worksheet.Cells[6, 33].Value = "Depth";
                        worksheet.Cells[6, 34].Value = "Depth(%)";
                        worksheet.Cells[6, 35].Value = "Table(%)";
                        worksheet.Cells[6, 36].Value = "Key To Symbol";
                        worksheet.Cells[6, 37].Value = "Culet";
                        worksheet.Cells[6, 38].Value = "Table Black";
                        worksheet.Cells[6, 39].Value = "Crown Black";
                        worksheet.Cells[6, 40].Value = "Table White";
                        worksheet.Cells[6, 41].Value = "Crown White";
                        worksheet.Cells[6, 42].Value = "Cr Ang";
                        worksheet.Cells[6, 43].Value = "Cr Ht";
                        worksheet.Cells[6, 44].Value = "Pav Ang";
                        worksheet.Cells[6, 45].Value = "Pav Ht";
                        worksheet.Cells[6, 46].Value = "Table Open";
                        worksheet.Cells[6, 47].Value = "Crown Open";
                        worksheet.Cells[6, 48].Value = "Pav Open";
                        worksheet.Cells[6, 49].Value = "Girdle Open";
                        worksheet.Cells[6, 50].Value = "Girdle(%)";     //44
                        worksheet.Cells[6, 51].Value = "Girdle Type";   //45
                        worksheet.Cells[6, 52].Value = "Laser Insc";    //46

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 52].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(12);
                        worksheet.Cells[6, 4].AutoFitColumns(14);
                        worksheet.Cells[6, 5].AutoFitColumns(12);
                        worksheet.Cells[6, 6].AutoFitColumns(10);
                        worksheet.Cells[6, 7].AutoFitColumns(10);
                        worksheet.Cells[6, 8].AutoFitColumns(10.5);
                        worksheet.Cells[6, 9].AutoFitColumns(8.86);
                        worksheet.Cells[6, 10].AutoFitColumns(9);
                        worksheet.Cells[6, 11].AutoFitColumns(12);
                        worksheet.Cells[6, 12].AutoFitColumns(9.57);
                        worksheet.Cells[6, 13].AutoFitColumns(8.14);
                        worksheet.Cells[6, 14].AutoFitColumns(6.75);
                        worksheet.Cells[6, 15].AutoFitColumns(9.50);
                        worksheet.Cells[6, 16].AutoFitColumns(13.5);
                        worksheet.Cells[6, 17].AutoFitColumns(8.43);
                        worksheet.Cells[6, 18].AutoFitColumns(9.29);
                        worksheet.Cells[6, 19].AutoFitColumns(9.29);
                        worksheet.Cells[6, 20].AutoFitColumns(9.29);
                        worksheet.Cells[6, 21].AutoFitColumns(9.29);
                        worksheet.Cells[6, 22].AutoFitColumns(12);
                        worksheet.Cells[6, 23].AutoFitColumns(9.29);
                        worksheet.Cells[6, 24].AutoFitColumns(12);
                        worksheet.Cells[6, 25].AutoFitColumns(8.14);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(7.86);
                        worksheet.Cells[6, 32].AutoFitColumns(7.86);
                        worksheet.Cells[6, 33].AutoFitColumns(7.86);
                        worksheet.Cells[6, 34].AutoFitColumns(9);
                        worksheet.Cells[6, 35].AutoFitColumns(7.9);
                        worksheet.Cells[6, 36].AutoFitColumns(35.29);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);
                        worksheet.Cells[6, 50].AutoFitColumns(7.86);    //44
                        worksheet.Cells[6, 51].AutoFitColumns(7.86);    //45
                        worksheet.Cells[6, 52].AutoFitColumns(7.86);    //46

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 2, inEndCounter, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[inStartIndex, 5, inEndCounter, 52].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtOrders.Rows[i - inStartIndex]["vsr"]);

                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Trans_date"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Trans_date"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompName"]);
                            worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["AssistBy1"]);

                            values = dtOrders.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 6].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 7].Value = asTitleCase.ToTitleCase(Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]).ToLower());

                            status = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Status1"]).ToLower();
                            ForCust_Hold = dtOrders.Rows[i - inStartIndex]["ForCust_Hold"].ToString();
                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";

                            worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                            }


                            //worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    hyprlink1 = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (hyprlink1 != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Shape"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pointer"]);

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Lab"]);
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    string hyprlink3 = Certificate;
                                    //worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"];
                                var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 15].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);
                            }

                            values = dtOrders.Rows[i - inStartIndex]["certi_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 16].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 16].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Color"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Clarity"]);
                            worksheet.Cells[inwrkrow, 20].Value = (dtOrders.Rows[i - inStartIndex]["Cts"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["Cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Cts"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 21].Value = (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 22].Value = (dtOrders.Rows[i - inStartIndex]["rap_amount"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 23].Value = (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 24].Value = (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 25].Value = (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null;

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]);
                            worksheet.Cells[inwrkrow, 26].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Polish"]);
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Symm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 28].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Fls"]);

                            worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Length"]);
                            worksheet.Cells[inwrkrow, 32].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Width"]);
                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth"]);

                            //worksheet.Cells[inwrkrow, 32].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]);
                            worksheet.Cells[inwrkrow, 34].Value = ((dtOrders.Rows[i - inStartIndex]["Depth_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Depth_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 33].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]);
                            worksheet.Cells[inwrkrow, 35].Value = ((dtOrders.Rows[i - inStartIndex]["Table_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Table_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sculet"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["TABLE_NATTS"] == null ? "" : dtOrders.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"]);
                            worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"];

                            worksheet.Cells[inwrkrow, 43].Value = dtOrders.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"];
                            worksheet.Cells[inwrkrow, 44].Value = dtOrders.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"];
                            worksheet.Cells[inwrkrow, 45].Value = dtOrders.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 47].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 50].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 51].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtOrders.Rows[i - inStartIndex]["girdle_type"]);

                            worksheet.Cells[inwrkrow, 52].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 52].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 25].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 24].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 31, (inwrkrow - 1), 35].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 42, (inwrkrow - 1), 45].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 50, (inwrkrow - 1), 50].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 6].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 22].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 23].Formula = "=IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + ")/SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 23].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;


                        worksheet.Cells[5, 24].Formula = "ROUND(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 24].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 24].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }
                    else
                    {
                        worksheet.Cells[5, 1].Value = "Total";
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Bold = true;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;

                        worksheet.Cells[5, 1, 5, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                        worksheet.Cells[6, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 49].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 49].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 49].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 49].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Sr. No";
                        worksheet.Cells[6, 2].Value = "Date";
                        worksheet.Cells[6, 3].Value = "Stock Id";
                        worksheet.Cells[6, 4].Value = "Location";
                        worksheet.Cells[6, 5].Value = "Status";
                        worksheet.Cells[6, 6].Value = "DNA";
                        worksheet.Cells[6, 7].Value = "View Image";
                        worksheet.Cells[6, 8].Value = "HD Movie";
                        worksheet.Cells[6, 9].Value = "Shape";
                        worksheet.Cells[6, 10].Value = "Pointer";
                        worksheet.Cells[6, 11].Value = "Lab";
                        worksheet.Cells[6, 12].Value = "Certi Type";
                        worksheet.Cells[6, 13].Value = "Certi No.";
                        worksheet.Cells[6, 14].Value = "BGM";
                        worksheet.Cells[6, 15].Value = "Color";
                        worksheet.Cells[6, 16].Value = "Clarity";
                        worksheet.Cells[6, 17].Value = "Cts";
                        worksheet.Cells[6, 18].Value = "Rap Price($)";
                        worksheet.Cells[6, 19].Value = "Rap Amt($)";
                        worksheet.Cells[6, 20].Value = "Disc(%)";
                        worksheet.Cells[6, 21].Value = "Net Amt($)";
                        worksheet.Cells[6, 22].Value = "Price/Cts";
                        worksheet.Cells[6, 23].Value = "Cut";
                        worksheet.Cells[6, 24].Value = "Polish";
                        worksheet.Cells[6, 25].Value = "Symm";
                        worksheet.Cells[6, 26].Value = "Fls";
                        worksheet.Cells[6, 27].Value = "Ratio";
                        worksheet.Cells[6, 28].Value = "Length";
                        worksheet.Cells[6, 29].Value = "Width";
                        worksheet.Cells[6, 30].Value = "Depth";
                        worksheet.Cells[6, 31].Value = "Depth(%)";
                        worksheet.Cells[6, 32].Value = "Table(%)";
                        worksheet.Cells[6, 33].Value = "Key To Symbol";
                        worksheet.Cells[6, 34].Value = "Culet";
                        worksheet.Cells[6, 35].Value = "Table Black";
                        worksheet.Cells[6, 36].Value = "Crown Black";
                        worksheet.Cells[6, 37].Value = "Table White";
                        worksheet.Cells[6, 38].Value = "Crown White";
                        worksheet.Cells[6, 39].Value = "Cr Ang";
                        worksheet.Cells[6, 40].Value = "Cr Ht";
                        worksheet.Cells[6, 41].Value = "Pav Ang";
                        worksheet.Cells[6, 42].Value = "Pav Ht";
                        worksheet.Cells[6, 43].Value = "Table Open";
                        worksheet.Cells[6, 44].Value = "Crown Open";
                        worksheet.Cells[6, 45].Value = "Pav Open";
                        worksheet.Cells[6, 46].Value = "Girdle Open";
                        worksheet.Cells[6, 47].Value = "Girdle(%)";     //41
                        worksheet.Cells[6, 48].Value = "Girdle Type";   //42
                        worksheet.Cells[6, 49].Value = "Laser Insc";    //43

                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 49].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                        #endregion

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);

                        worksheet.Cells[6, 1].AutoFitColumns(5.43);
                        worksheet.Cells[6, 2].AutoFitColumns(10);
                        worksheet.Cells[6, 3].AutoFitColumns(10);
                        worksheet.Cells[6, 4].AutoFitColumns(10);
                        worksheet.Cells[6, 5].AutoFitColumns(10.5);
                        worksheet.Cells[6, 6].AutoFitColumns(8.86);
                        worksheet.Cells[6, 7].AutoFitColumns(9);
                        worksheet.Cells[6, 8].AutoFitColumns(12);
                        worksheet.Cells[6, 9].AutoFitColumns(8.43);
                        worksheet.Cells[6, 10].AutoFitColumns(9.57);
                        worksheet.Cells[6, 11].AutoFitColumns(6.75);//8.43
                        worksheet.Cells[6, 12].AutoFitColumns(9.50);
                        worksheet.Cells[6, 13].AutoFitColumns(13.5);
                        worksheet.Cells[6, 14].AutoFitColumns(12);
                        worksheet.Cells[6, 15].AutoFitColumns(8.43);
                        worksheet.Cells[6, 16].AutoFitColumns(9.29);
                        worksheet.Cells[6, 17].AutoFitColumns(9.29);
                        worksheet.Cells[6, 18].AutoFitColumns(9.29);
                        worksheet.Cells[6, 19].AutoFitColumns(12);
                        worksheet.Cells[6, 20].AutoFitColumns(9.29);
                        worksheet.Cells[6, 21].AutoFitColumns(12);
                        worksheet.Cells[6, 22].AutoFitColumns(9.29);
                        worksheet.Cells[6, 23].AutoFitColumns(8.14);
                        worksheet.Cells[6, 24].AutoFitColumns(7.86);
                        worksheet.Cells[6, 25].AutoFitColumns(7.86);
                        worksheet.Cells[6, 26].AutoFitColumns(7.86);
                        worksheet.Cells[6, 27].AutoFitColumns(7.86);
                        worksheet.Cells[6, 28].AutoFitColumns(7.86);
                        worksheet.Cells[6, 29].AutoFitColumns(7.86);
                        worksheet.Cells[6, 30].AutoFitColumns(7.86);
                        worksheet.Cells[6, 31].AutoFitColumns(9);
                        worksheet.Cells[6, 32].AutoFitColumns(7.9);
                        worksheet.Cells[6, 33].AutoFitColumns(35.29);
                        worksheet.Cells[6, 34].AutoFitColumns(7.86);
                        worksheet.Cells[6, 35].AutoFitColumns(7.86);
                        worksheet.Cells[6, 36].AutoFitColumns(7.86);
                        worksheet.Cells[6, 37].AutoFitColumns(7.86);
                        worksheet.Cells[6, 38].AutoFitColumns(7.86);
                        worksheet.Cells[6, 39].AutoFitColumns(7.86);
                        worksheet.Cells[6, 40].AutoFitColumns(7.86);
                        worksheet.Cells[6, 41].AutoFitColumns(7.86);
                        worksheet.Cells[6, 42].AutoFitColumns(7.86);
                        worksheet.Cells[6, 43].AutoFitColumns(7.86);
                        worksheet.Cells[6, 44].AutoFitColumns(7.86);
                        worksheet.Cells[6, 45].AutoFitColumns(7.86);
                        worksheet.Cells[6, 46].AutoFitColumns(7.86);
                        worksheet.Cells[6, 47].AutoFitColumns(7.86);    //41
                        worksheet.Cells[6, 48].AutoFitColumns(7.86);    //42
                        worksheet.Cells[6, 49].AutoFitColumns(7.86);    //43

                        //Set Cell Faoat value with Alignment
                        worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        for (i = inStartIndex; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtOrders.Rows[i - inStartIndex]["vsr"]);
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Trans_date"]);

                            values = dtOrders.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 3].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);

                            status = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Status1"]).ToLower();
                            ForCust_Hold = dtOrders.Rows[i - inStartIndex]["ForCust_Hold"].ToString();
                            if (status == "available offer")
                                status = "Offer";
                            else if (status == "buss. process" && ForCust_Hold == "1")
                                status = "Busy";
                            else if (status == "buss. process")
                                status = "Busy";

                            worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(status);

                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtOrders.Rows[i - inStartIndex]["view_dna"]);

                            S_Detail = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);
                            if (S_Detail != "")
                            {
                                worksheet.Cells[inwrkrow, 6].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                                worksheet.Cells[inwrkrow, 6].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 6].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                            //{
                            //    hyprlink1 = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                            //    if (hyprlink1 != "")
                            //    {
                            //        worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                            //        worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            //    }
                            //}

                            var img = false;
                            if (dtOrders.Rows[i - inStartIndex]["image_url"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                                img = true;
                            if (dtOrders.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                                img = true;

                            if (img == true)
                            {
                                worksheet.Cells[inwrkrow, 7].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Image \")";
                                worksheet.Cells[inwrkrow, 7].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Blue);
                            }

                            //worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null || dtOrders.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]);

                            if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                            {
                                Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                                if (Video != "")
                                {
                                    //worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\" Video \")";
                                    worksheet.Cells[inwrkrow, 8].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Shape"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pointer"]);

                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Lab"]);
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                            if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                            {
                                Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                                if (Certificate != "")
                                {
                                    string hyprlink3 = Certificate;
                                    //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + hyprlink3 + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"]) + "\",\"" + dtOrders.Rows[i - inStartIndex]["Lab"] + " \")";
                                    worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                    worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                                }
                            }

                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                            //worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                            {
                                //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                                var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["stone_ref_no"];
                                var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                                worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                                worksheet.Cells[inwrkrow, 12].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                            }


                            values = dtOrders.Rows[i - inStartIndex]["certi_no"].ToString();
                            success = Int64.TryParse(values, out number);
                            if (success)
                            {
                                worksheet.Cells[inwrkrow, 13].Value = Convert.ToInt64(dtOrders.Rows[i - inStartIndex]["certi_no"]);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 13].Value = values;
                            }

                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Color"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Clarity"]);
                            worksheet.Cells[inwrkrow, 17].Value = (dtOrders.Rows[i - inStartIndex]["Cts"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["Cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Cts"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 18].Value = (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["CUR_RAP_RATE"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 19].Value = (dtOrders.Rows[i - inStartIndex]["rap_amount"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 20].Value = (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 21].Value = (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["NET_AMOUNT"]) : ((Double?)null)) : null;

                            worksheet.Cells[inwrkrow, 22].Value = (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                                (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null;

                            cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]);
                            worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Polish"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Symm"]);

                            if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["Cut"]) == "3EX")
                            {
                                worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            }

                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Fls"]);

                            worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Length"]);
                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Width"]);
                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth"]);

                            //worksheet.Cells[inwrkrow, 29].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]);
                            worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["Depth_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Depth_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Depth_Per"]) : ((Double?)null)) : null);

                            //worksheet.Cells[inwrkrow, 30].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]);
                            worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["Table_Per"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Table_Per"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Table_Per"]) : ((Double?)null)) : null);

                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["symbol"]);
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sculet"]);
                            worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["TABLE_NATTS"] == null ? "" : dtOrders.Rows[i - inStartIndex]["table_natts"]);
                            worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Natts"]);
                            worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["inclusion"]);
                            worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["Crown_Inclusion"]);

                            worksheet.Cells[inwrkrow, 39].Value = dtOrders.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_angle"];
                            worksheet.Cells[inwrkrow, 40].Value = dtOrders.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["crown_height"];
                            worksheet.Cells[inwrkrow, 41].Value = dtOrders.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_angle"];
                            worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["pav_height"];

                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                            try
                            {
                                worksheet.Cells[inwrkrow, 47].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                            }
                            catch { }

                            worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtOrders.Rows[i - inStartIndex]["girdle_type"]);

                            worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                            inwrkrow++;

                            #endregion
                        }
                        worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 49].Style.Font.Size = 9;
                        worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                        worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                        worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Font.Bold = true;
                        worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                        worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 31].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 42].Style.Numberformat.Format = "0.00";
                        worksheet.Cells[inStartIndex, 47, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                        worksheet.Cells[5, 3].Formula = "ROUND(SUBTOTAL(103,E" + inStartIndex + ":E" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 3].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 3].Style.Numberformat.Format = "#,##";

                        ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 3].Style;
                        cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                                = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 17].Style;
                        cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                                = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 19].Style;
                        cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                                = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        //=IF(SUBTOTAL(109,R7: R1020)=0,0,100)
                        worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,S" + inStartIndex + ": S" + (inwrkrow - 1) + ")=0,0,ROUND(((1-(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*(-100)),2))";
                        worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";

                        ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 20].Style;
                        cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                                = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                        worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                        worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                        ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 21].Style;
                        cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                                = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);
                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }

        public static void excel_offer(DataTable dt, string _strFilePath, float OfferPercentage)
        {
            try
            {
                FileInfo newFile = new FileInfo(_strFilePath);
                if (newFile.Exists)
                {
                    newFile.Delete(); // ensures we create a new workbook
                    newFile = new FileInfo(_strFilePath);
                }

                using (ExcelPackage package = new ExcelPackage(newFile))
                {
                    #region Company Detail on Header

                    package.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    package.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";
                    package.Workbook.Worksheets.Add("Offer");

                    ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 19].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion

                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 29].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 29].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 29].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    worksheet.Cells[6, 1, 6, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 29].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 29].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 29].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 29].AutoFilter = true;

                    worksheet.Cells[6, 1, 6, 29].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 29].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Stock Id";
                    worksheet.Cells[6, 2].Value = "Status";
                    worksheet.Cells[6, 3].Value = "Image";
                    worksheet.Cells[6, 4].Value = "Video";
                    worksheet.Cells[6, 5].Value = "Dna";
                    worksheet.Cells[6, 6].Value = "Location";
                    worksheet.Cells[6, 7].Value = "BGM";
                    worksheet.Cells[6, 8].Value = "Shape";
                    worksheet.Cells[6, 9].Value = "Lab";
                    worksheet.Cells[6, 10].Value = "Certi No.";
                    worksheet.Cells[6, 11].Value = "Color";
                    worksheet.Cells[6, 12].Value = "Clarity";
                    worksheet.Cells[6, 13].Value = "Cts";
                    worksheet.Cells[6, 14].Value = "Rap Price($)";
                    worksheet.Cells[6, 15].Value = "Rap Amt($)";
                    worksheet.Cells[6, 16].Value = "Disc(%)";
                    worksheet.Cells[6, 17].Value = "Net Amt($)";
                    worksheet.Cells[6, 18].Value = "Offer Disc(%)";
                    worksheet.Cells[6, 19].Value = "Offer Amt($)";
                    worksheet.Cells[6, 20].Value = "Offer Final Disc(%)";
                    worksheet.Cells[6, 21].Value = "Offer Final Amt($)";
                    worksheet.Cells[6, 22].Value = "Offer Remark";
                    worksheet.Cells[6, 23].Value = "Cut";
                    worksheet.Cells[6, 24].Value = "Polish";
                    worksheet.Cells[6, 25].Value = "Symm";
                    worksheet.Cells[6, 26].Value = "Fls";
                    worksheet.Cells[6, 27].Value = "Measurement";
                    worksheet.Cells[6, 28].Value = "Depth(%)";
                    worksheet.Cells[6, 29].Value = "Table(%)";

                    worksheet.Cells[6, 1].AutoFitColumns(10);
                    worksheet.Cells[6, 2].AutoFitColumns(16);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(8.86);
                    worksheet.Cells[6, 6].AutoFitColumns(12);
                    worksheet.Cells[6, 7].AutoFitColumns(9);
                    worksheet.Cells[6, 8].AutoFitColumns(11);
                    worksheet.Cells[6, 9].AutoFitColumns(8);
                    worksheet.Cells[6, 10].AutoFitColumns(12);
                    worksheet.Cells[6, 11].AutoFitColumns(10);
                    worksheet.Cells[6, 12].AutoFitColumns(8);
                    worksheet.Cells[6, 13].AutoFitColumns(15);
                    worksheet.Cells[6, 14].AutoFitColumns(11);
                    worksheet.Cells[6, 15].AutoFitColumns(11);
                    worksheet.Cells[6, 16].AutoFitColumns(15);
                    worksheet.Cells[6, 17].AutoFitColumns(10);
                    worksheet.Cells[6, 18].AutoFitColumns(10);
                    worksheet.Cells[6, 19].AutoFitColumns(15);
                    worksheet.Cells[6, 20].AutoFitColumns(12);
                    worksheet.Cells[6, 21].AutoFitColumns(17);
                    worksheet.Cells[6, 22].AutoFitColumns(24);
                    worksheet.Cells[6, 23].AutoFitColumns(9);
                    worksheet.Cells[6, 24].AutoFitColumns(8);
                    worksheet.Cells[6, 25].AutoFitColumns(8);
                    worksheet.Cells[6, 26].AutoFitColumns(10);
                    worksheet.Cells[6, 27].AutoFitColumns(20);
                    worksheet.Cells[6, 28].AutoFitColumns(10);
                    worksheet.Cells[6, 29].AutoFitColumns(17);

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 29].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dt.Rows.Count + inStartIndex;
                    int TotalRow = dt.Rows.Count;
                    int i = 0;

                    string Image, Video, hyprlink1, S_Detail, Certificate;
                    object valididty = 0;
                    decimal offerAmt = 0, disc = 0, OfferPer = 0, cts = 0, cur_rap_rate = 0;

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["Ref. No"]);
                        worksheet.Cells[inwrkrow, 2].Value = (dt.Rows[i - inStartIndex]["Status"] != null) ? (dt.Rows[i - inStartIndex]["Status"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Status"]) : "") : "";

                        //if (dt.Rows[i - inStartIndex]["Image"] != null)
                        //{
                        //    Image = Convert.ToString(dt.Rows[i - inStartIndex]["Image"]);
                        //    worksheet.Cells[inwrkrow, 3].Value = Image;
                        //    if (Image != "")
                        //    {
                        //        hyprlink1 = External_ImageURL + Convert.ToString(dt.Rows[i - inStartIndex]["Certi No"]) + "/PR.jpg";
                        //        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        }

                        if (dt.Rows[i - inStartIndex]["HDMovie"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["HDMovie"]);
                            worksheet.Cells[inwrkrow, 4].Value = Video;
                            if (Video != "")
                            {
                                //worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        if (dt.Rows[i - inStartIndex]["DNA"] != null)
                        {
                            S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["DNA"]);
                            worksheet.Cells[inwrkrow, 5].Value = S_Detail;
                            worksheet.Cells[inwrkrow, 5].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 5].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 5].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["Location"] != null) ? (dt.Rows[i - inStartIndex]["Location"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Location"]) : "") : "";


                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";

                        worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["Shape"] != null) ? (dt.Rows[i - inStartIndex]["Shape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Shape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["Lab1"] != null) ? (dt.Rows[i - inStartIndex]["Lab1"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Lab1"]) : "") : "";

                        if (dt.Rows[i - inStartIndex]["Lab"] != null)
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["Lab"]);
                            if (Certificate != "")
                            {
                                //worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dt.Rows[i - inStartIndex]["Lab1"] + " \")";
                                worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\"" + dt.Rows[i - inStartIndex]["Lab1"] + " \")";
                                worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 10].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["Certi No"]);
                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["Color"] != null) ? (dt.Rows[i - inStartIndex]["Color"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Color"]) : "") : "";
                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["Clarity"] != null) ? (dt.Rows[i - inStartIndex]["Clarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Clarity"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);

                        worksheet.Cells[inwrkrow, 14].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Rap Price($)"]);
                        worksheet.Cells[inwrkrow, 15].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Rap Amt($)"]);
                        worksheet.Cells[inwrkrow, 16].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc (%)"]);
                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Net Amt($)"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer"]);


                        /* Calculate offer amt*/
                        //disc = (worksheet.Cells[inwrkrow, 16].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 16].Value));
                        //OfferPer = (worksheet.Cells[inwrkrow, 18].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 18].Value));
                        //cts = (worksheet.Cells[inwrkrow, 13].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 13].Value));
                        //cur_rap_rate = (worksheet.Cells[inwrkrow, 14].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 14].Value));

                        //offerAmt = GetOfferAmt(disc, OfferPer, cts, cur_rap_rate, OfferPercentage);
                        //if (offerAmt.ToString() == "0.00" || offerAmt.ToString() == "0" || offerAmt.ToString() == "")
                        //    worksheet.Cells[inwrkrow, 19].Value = "";
                        //else
                        //    worksheet.Cells[inwrkrow, 19].Value = Convert.ToDecimal(offerAmt);
                        /*--------------------------------------------------------------------------*/

                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer Amt($)"]);
                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer Final Disc(%)"]);
                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer Final Amt($)"]);
                        
                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dt.Rows[i - inStartIndex]["Offer Remark"]);

                        worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["Cut"] != null) ? (dt.Rows[i - inStartIndex]["Cut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Cut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["Polish"] != null) ? (dt.Rows[i - inStartIndex]["Polish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Polish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["Symm"] != null) ? (dt.Rows[i - inStartIndex]["Symm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Symm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["Cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["Fls"] != null) ? (dt.Rows[i - inStartIndex]["Fls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Fls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["Measurement"] != null) ? (dt.Rows[i - inStartIndex]["Measurement"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Measurement"]) : "") : "";
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth (%)"]);
                        worksheet.Cells[inwrkrow, 29].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Table (%)"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 29].Style.Font.Size = 9;

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 29].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 29].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 2].Formula = "ROUND(SUBTOTAL(102,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 2].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 2].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 2].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 13].Formula = "ROUND(SUBTOTAL(109,M" + inStartIndex + ":M" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 13].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 13].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[5, 16].Formula = "=ROUND(((1-(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*(-100)),2)";
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";

                    worksheet.View.FreezePanes(7, 1); // For Panel Freeze

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    package.Save();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void Offer_Excel_Expired_Cancelled(DataTable dt, string _strFilePath, string offerType)
        {
            try
            {
                FileInfo newFile = new FileInfo(_strFilePath);
                if (newFile.Exists)
                {
                    newFile.Delete(); // ensures we create a new workbook
                    newFile = new FileInfo(_strFilePath);
                }

                using (ExcelPackage package = new ExcelPackage(newFile))
                {
                    #region Company Detail on Header

                    package.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    package.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";
                    package.Workbook.Worksheets.Add("Offer " + offerType);

                    ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS OFFER " + offerType.ToUpper();
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    #endregion

                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 28].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 28].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    worksheet.Cells[6, 1, 6, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 28].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 28].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 28].AutoFilter = true;

                    worksheet.Cells[6, 1, 6, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 28].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Offer Id";
                    worksheet.Cells[6, 2].Value = "Stock Id";
                    worksheet.Cells[6, 3].Value = "Status";
                    worksheet.Cells[6, 4].Value = "Image";
                    worksheet.Cells[6, 5].Value = "Video";
                    worksheet.Cells[6, 6].Value = "Dna";
                    worksheet.Cells[6, 7].Value = "Location";
                    worksheet.Cells[6, 8].Value = "BGM";
                    worksheet.Cells[6, 9].Value = "Shape";
                    worksheet.Cells[6, 10].Value = "Lab";
                    worksheet.Cells[6, 11].Value = "Certi No.";
                    worksheet.Cells[6, 12].Value = "Color";
                    worksheet.Cells[6, 13].Value = "Clarity";
                    worksheet.Cells[6, 14].Value = "Cts";
                    worksheet.Cells[6, 15].Value = "Rap Price($)";
                    worksheet.Cells[6, 16].Value = "Rap Amt($)";
                    worksheet.Cells[6, 17].Value = "Disc(%)";
                    worksheet.Cells[6, 18].Value = "Net Amt($)";
                    worksheet.Cells[6, 19].Value = "Offer Disc(%)";
                    worksheet.Cells[6, 20].Value = "Offer Amt($)";
                    worksheet.Cells[6, 21].Value = "Offer Remark";
                    worksheet.Cells[6, 22].Value = "Cut";
                    worksheet.Cells[6, 23].Value = "Polish";
                    worksheet.Cells[6, 24].Value = "Symm";
                    worksheet.Cells[6, 25].Value = "Fls";
                    worksheet.Cells[6, 26].Value = "Measurement";
                    worksheet.Cells[6, 27].Value = "Depth(%)";
                    worksheet.Cells[6, 28].Value = "Table(%)";

                    worksheet.Cells[6, 1].AutoFitColumns(10);
                    worksheet.Cells[6, 2].AutoFitColumns(10);
                    worksheet.Cells[6, 3].AutoFitColumns(16);
                    worksheet.Cells[6, 4].AutoFitColumns(9);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(8.86);
                    worksheet.Cells[6, 7].AutoFitColumns(12);
                    worksheet.Cells[6, 8].AutoFitColumns(9);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(8);
                    worksheet.Cells[6, 11].AutoFitColumns(12);
                    worksheet.Cells[6, 12].AutoFitColumns(10);
                    worksheet.Cells[6, 13].AutoFitColumns(8);
                    worksheet.Cells[6, 14].AutoFitColumns(15);
                    worksheet.Cells[6, 15].AutoFitColumns(11);
                    worksheet.Cells[6, 16].AutoFitColumns(11);
                    worksheet.Cells[6, 17].AutoFitColumns(15);
                    worksheet.Cells[6, 18].AutoFitColumns(10);
                    worksheet.Cells[6, 19].AutoFitColumns(10);
                    worksheet.Cells[6, 20].AutoFitColumns(15);
                    worksheet.Cells[6, 21].AutoFitColumns(24);
                    worksheet.Cells[6, 22].AutoFitColumns(9);
                    worksheet.Cells[6, 23].AutoFitColumns(8);
                    worksheet.Cells[6, 24].AutoFitColumns(8);
                    worksheet.Cells[6, 25].AutoFitColumns(10);
                    worksheet.Cells[6, 26].AutoFitColumns(20);
                    worksheet.Cells[6, 27].AutoFitColumns(10);
                    worksheet.Cells[6, 28].AutoFitColumns(17);

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 28].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dt.Rows.Count + inStartIndex;
                    int TotalRow = dt.Rows.Count;
                    int i = 0;

                    string Image, Video, hyprlink1, S_Detail, Certificate;
                    object valididty = 0;
                    decimal offerAmt = 0, disc = 0, OfferPer = 0, cts = 0, cur_rap_rate = 0;

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["Offer Id"]);
                        worksheet.Cells[inwrkrow, 2].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["Ref. No"]);
                        worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["Status"] != null) ? (dt.Rows[i - inStartIndex]["Status"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Status"]) : "") : "";

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                        }

                        if (dt.Rows[i - inStartIndex]["HDMovie"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["HDMovie"]);
                            worksheet.Cells[inwrkrow, 5].Value = Video;
                            if (Video != "")
                            {
                                worksheet.Cells[inwrkrow, 5].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 5].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 5].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        if (dt.Rows[i - inStartIndex]["DNA"] != null)
                        {
                            S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["DNA"]);
                            worksheet.Cells[inwrkrow, 6].Value = S_Detail;
                            worksheet.Cells[inwrkrow, 6].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 6].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 6].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["Location"] != null) ? (dt.Rows[i - inStartIndex]["Location"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Location"]) : "") : "";


                        worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";

                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["Shape"] != null) ? (dt.Rows[i - inStartIndex]["Shape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Shape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["Lab1"] != null) ? (dt.Rows[i - inStartIndex]["Lab1"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Lab1"]) : "") : "";

                        if (dt.Rows[i - inStartIndex]["Lab"] != null)
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["Lab"]);
                            if (Certificate != "")
                            {
                                worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["Ref. No"]) + "\",\"" + dt.Rows[i - inStartIndex]["Lab1"] + " \")";
                                worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 11].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["Certi No"]);
                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["Color"] != null) ? (dt.Rows[i - inStartIndex]["Color"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Color"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["Clarity"] != null) ? (dt.Rows[i - inStartIndex]["Clarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Clarity"]) : "") : "";
                        worksheet.Cells[inwrkrow, 14].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);

                        worksheet.Cells[inwrkrow, 15].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Rap Price($)"]);
                        worksheet.Cells[inwrkrow, 16].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Rap Amt($)"]);
                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc (%)"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Net Amt($)"]);
                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer"]);
                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Offer Amt($)"]);
                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dt.Rows[i - inStartIndex]["Offer Remark"]);

                        worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["Cut"] != null) ? (dt.Rows[i - inStartIndex]["Cut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Cut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["Polish"] != null) ? (dt.Rows[i - inStartIndex]["Polish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Polish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["Symm"] != null) ? (dt.Rows[i - inStartIndex]["Symm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Symm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["Cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["Fls"] != null) ? (dt.Rows[i - inStartIndex]["Fls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Fls"]) : "") : "";

                        worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["Measurement"] != null) ? (dt.Rows[i - inStartIndex]["Measurement"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Measurement"]) : "") : "";

                        worksheet.Cells[inwrkrow, 27].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth (%)"]);
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Table (%)"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 28].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 28].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 27, (inwrkrow - 1), 28].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 20].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 3].Formula = "ROUND(SUBTOTAL(102,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 3].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 3].Style.Numberformat.Format = "#,##";

                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 3].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 14].Formula = "ROUND(SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 14].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 14].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[5, 17].Formula = "=ROUND(((1-(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")/SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + ")))*(-100)),2)";
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0.00";

                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";

                    worksheet.View.FreezePanes(7, 1); // For Panel Freeze

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    package.Save();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void Excel_Data(DataTable p_dt, string _strFilePath, string _strcerti)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            string _date = System.DateTime.Today.ToString("dd-MMM-yyyy");
            string _strlabName = "";
            string _strcertino = "";
            string _strloction = "";
            string _strhyperlink = "";
            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                // For Set Excel Sheet WorkSheet Name
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("TotalStock");

                // For Set Company Name, Address & Others
                worksheet.Cells["B3"].Value = "Abbreviation";
                worksheet.Cells["B3"].Style.Font.Bold = true;
                worksheet.Cells["C3"].Value = "Buss. Proc";
                worksheet.Cells["D3"].Value = "B";
                worksheet.Cells["D3"].Style.Font.Bold = true;
                worksheet.Cells["C4"].Value = "Promotion";
                worksheet.Cells["D4"].Value = "P";
                worksheet.Cells["D4"].Style.Font.Bold = true;
                //worksheet.Cells["B5"].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells["F5"].Value = "Table & Crown Natts = Black Inclusion";

                worksheet.Cells["F1"].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + _date + "";
                worksheet.Cells["F1"].Style.Font.Size = 24;
                worksheet.Cells["F1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F1"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F1"].Style.Font.Bold = true;

                worksheet.Cells["F2"].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                worksheet.Cells["F2"].Style.Font.Size = 12;
                worksheet.Cells["F2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F2"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F2"].Style.Font.Bold = true;

                worksheet.Cells["F3"].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                worksheet.Cells["F3"].Style.Font.Size = 12;
                worksheet.Cells["F3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F3"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F3"].Style.Font.Bold = true;

                worksheet.Cells["B2"].Value = "All Prices are final Selling Cash Price";
                worksheet.Cells["B2"].Style.Font.Bold = true;
                worksheet.Cells["B2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["B2"].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                worksheet.Cells["B2:D2"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["B2:D2"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                worksheet.Cells["A6:" + "AM6"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A6:" + "AM6"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                worksheet.Cells["A6"].Value = "Total";
                worksheet.Cells["A6"].Style.Font.Bold = true;

                // For Border Lines
                worksheet.Cells["A6:" + "AM6"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AM6"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AM6"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AM7"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AM7"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AM7"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AM7"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["A7:" + "AM7"].AutoFilter = true;


                int rowCount = 6; // Start Printing Records

                foreach (DataRow dr in p_dt.Rows)
                {
                    rowCount += 1;
                    for (int i = 1; i < p_dt.Columns.Count + 1; i++)
                    {
                        if (rowCount == 7) // For Colounm Header Name
                        {
                            if (p_dt.Columns[i - 1].ColumnName.ToUpper() == "LUSTER/ MILKY")
                            {
                                worksheet.Cells[rowCount, i].Value = "Luster";
                            }
                            else
                            {
                                worksheet.Cells[rowCount, i].Value = p_dt.Columns[i - 1].ColumnName;
                            }
                            worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            worksheet.Cells[rowCount, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells[rowCount, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                            worksheet.Cells[rowCount, i].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

                        }

                        // For Set 2 Decimal 
                        if (p_dt.Columns[i - 1].ColumnName == "Cts" || p_dt.Columns[i - 1].ColumnName == "Rap Price($)"
                           || p_dt.Columns[i - 1].ColumnName == "Length" || p_dt.Columns[i - 1].ColumnName == "Disc (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Width" || p_dt.Columns[i - 1].ColumnName == "Depth"
                           || p_dt.Columns[i - 1].ColumnName == "Depth (%)" || p_dt.Columns[i - 1].ColumnName == "Table (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Cr Ang" || p_dt.Columns[i - 1].ColumnName == "Cr Ht"
                           || p_dt.Columns[i - 1].ColumnName == "Pav Ang" || p_dt.Columns[i - 1].ColumnName == "Pav Ht"
                           || p_dt.Columns[i - 1].ColumnName == "Certi No")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName.ToUpper() == "REF. NO")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Image") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""Image"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "HDMovie") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""HDMovie"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "SImage") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SImage"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName == "Lab") // For Create Hyperlink
                        {
                            if (p_dt.Columns[2].ColumnName == "offer_status")
                            {
                                if (dr[i - 1].ToString() != "")
                                {
                                    _strlabName = (dr[6].ToString());
                                    worksheet.Cells[rowCount + 1, i].Value = _strlabName;
                                }
                            }
                            else
                            {
                                if (dr[i - 1].ToString() != "")
                                {
                                    _strcertino = (dr[7].ToString());
                                    _strlabName = (dr[39].ToString()); // Lab1 column data for lab name
                                    _strloction = (dr[1].ToString());

                                    if (_strloction == "Hong Kong")
                                    {
                                        _strhyperlink = "https://sunrisediamonds.com.hk/certi/" + _strcertino + ".pdf";
                                        worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + _strhyperlink + @""",""" + _strlabName + @""")";
                                    }
                                    else
                                    {
                                        worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                    }

                                    //https://sunrisediamonds.com.hk/certi/5191592902.pdf
                                    //worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                    worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                    worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                                }
                            }

                        }

                        else if (p_dt.Columns[i - 1].ColumnName == "DNA") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""DNA"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "VdoLink") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SVideo"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Rap Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=L" + _intcnt + "*M" + _intcnt;
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Net Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=N" + _intcnt + "+(" + "N" + _intcnt + "*O" + _intcnt + "/100" + ")";
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Cut") // For Set Formula Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            if (dr[i - 1].ToString() == "3EX")
                            {
                                worksheet.Cells[rowCount + 1, i].Style.Font.Bold = true;
                            }
                        }
                        else // For Others Value Come Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                        }
                    }
                }
                rowCount = rowCount + 1;

                // For Set Formula Here (Total)
                worksheet.Cells["D6"].Formula = "=SUBTOTAL(103," + "E8:" + "E" + rowCount + ")"; //Ref. No
                worksheet.Cells["L6"].Formula = "=SUBTOTAL(109," + "L8:" + "L" + rowCount + ")"; //Cts
                worksheet.Cells["N6"].Formula = "=SUBTOTAL(109," + "N8:" + "N" + rowCount + ")"; //Rap Amt($)
                worksheet.Cells["P6"].Formula = "=SUBTOTAL(109," + "P8:" + "P" + rowCount + ")"; //Net Amt($)
                worksheet.Cells["O6"].Formula = "=(1-(SUBTOTAL(109," + "P8:" + "P" + rowCount + ")/SUBTOTAL(109," + "N8:" + "N" + rowCount + ")))*-100"; //Disc (%)

                // For Set Front Color
                worksheet.Cells["O8:" + "O" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Disc (%)
                worksheet.Cells["P8:" + "P" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Net Amt($)

                //// For Set Front Bold
                worksheet.Cells["O8:" + "O" + rowCount].Style.Font.Bold = true;// Disc (%)
                worksheet.Cells["P8:" + "P" + rowCount].Style.Font.Bold = true;// Net Amt($)

                //// For Set Number Format Here
                worksheet.Cells["P8:" + "P" + rowCount].Style.Numberformat.Format = "0.00";// Net Amt($)
                worksheet.Cells["L8:" + "L" + rowCount].Style.Numberformat.Format = "0.00";// Cts
                worksheet.Cells["N8:" + "N" + rowCount].Style.Numberformat.Format = "#,##0";// Rap Amt($)
                worksheet.Cells["O8:" + "O" + rowCount].Style.Numberformat.Format = "0.00";// Disc (%)
                worksheet.Cells["Y8:" + "Y" + rowCount].Style.Numberformat.Format = "0.00";// Table (%)
                worksheet.Cells["U8:" + "U" + rowCount].Style.Numberformat.Format = "0.00";// Length
                worksheet.Cells["V8:" + "V" + rowCount].Style.Numberformat.Format = "0.00";// Width
                worksheet.Cells["W8:" + "W" + rowCount].Style.Numberformat.Format = "0.00";// Depth
                worksheet.Cells["X8:" + "X" + rowCount].Style.Numberformat.Format = "0.00";// Depth (%)
                worksheet.Cells["Y8:" + "Y" + rowCount].Style.Numberformat.Format = "0.00";// Table (%)
                worksheet.Cells["AF8:" + "AF" + rowCount].Style.Numberformat.Format = "0.00";// Cr Ang
                worksheet.Cells["AG8:" + "AG" + rowCount].Style.Numberformat.Format = "0.00";// Cr Ht
                worksheet.Cells["AH8:" + "AH" + rowCount].Style.Numberformat.Format = "0.00";// Pav Ang
                worksheet.Cells["AI8:" + "AI" + rowCount].Style.Numberformat.Format = "0.00";// Pav Ang

                // For Total Formate Here
                worksheet.Cells["D6"].Style.Numberformat.Format = "#,##0";// Ref. No
                worksheet.Cells["L6"].Style.Numberformat.Format = "#,##0.00";// Cts
                worksheet.Cells["N6"].Style.Numberformat.Format = "#,##0";// Rap Amt($)
                worksheet.Cells["P6"].Style.Numberformat.Format = "#,##0";// Net Amt($)
                worksheet.Cells["O6"].Style.Numberformat.Format = "0.00";// Disc (%)

                worksheet.Cells["A6:AL25000"].AutoFitColumns(); // For Autofit Colounm
                worksheet.Cells["A6:" + "AL" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["Z7:" + "Z" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;//(Key To Symbol)
                worksheet.Row(7).Height = 26.25;
                worksheet.Column(13).Width = 10;
                worksheet.Column(17).Width = 6.75;
                worksheet.Column(18).Width = 6.75;
                worksheet.Column(19).Width = 6.75;
                worksheet.Column(20).Width = 6.75;
                worksheet.Column(21).Width = 6.75;
                worksheet.Column(22).Width = 6.75;
                worksheet.Column(23).Width = 6.75;
                worksheet.Column(26).Width = 60;
                worksheet.Column(27).Width = 6.75;
                worksheet.Cells["A7:" + "AL" + 7].Style.WrapText = true;// For Header Only
                // For Special columns width(Key To Symbol)
                worksheet.Column(40).Hidden = true; // For Hide Lab column
                worksheet.View.FreezePanes(8, 1); // For Panel Freeze
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                package.Save();
            }
        }

        // Added By Kaushal 18-12-2018 as per tj date 18-12-2018
        public static void Excel_Data_Offer_Dwnld(DataTable p_dt, string _strFilePath, string _strcerti)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            string _date = System.DateTime.Today.ToString("dd-MMM-yyyy");
            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                // For Set Excel Sheet WorkSheet Name
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("TotalStock");

                // For Set Company Name, Address & Others
                worksheet.Cells["B2"].Value = "Abbreviation";
                worksheet.Cells["B2"].Style.Font.Bold = true;
                worksheet.Cells["C2"].Value = "Buss. Proc";
                worksheet.Cells["D2"].Value = "B";
                worksheet.Cells["D2"].Style.Font.Bold = true;

                worksheet.Cells["F1"].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + _date + "";
                //worksheet.Cells["F1:S1"].Merge = true;
                worksheet.Cells["F1"].Style.Font.Size = 24;
                worksheet.Cells["F1:S1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F1:S1"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F1:S1"].Style.Font.Bold = true;

                worksheet.Cells["F2"].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                //worksheet.Cells["F2:T2"].Merge = true;
                worksheet.Cells["F2:T2"].Style.Font.Size = 12;
                worksheet.Cells["F2:T2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F2:T2"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F2:T2"].Style.Font.Bold = true;

                worksheet.Cells["F3"].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                //worksheet.Cells["F3:S3"].Merge = true;
                worksheet.Cells["F3:S3"].Style.Font.Size = 12;
                worksheet.Cells["F3:S3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F3:S3"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F3:S3"].Style.Font.Bold = true;

                worksheet.Cells["B2:D2"].Value = "All Prices are final Selling Cash Price";
                //worksheet.Cells["B2:D2"].Merge = true;
                worksheet.Cells["B2:D2"].Style.Font.Bold = true;
                worksheet.Cells["B2:D2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["B2:D2"].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                worksheet.Cells["B2:D2"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["B2:D2"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                worksheet.Cells["A6:" + "T6"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A6:" + "T6"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                worksheet.Cells["A6"].Value = "Total";
                worksheet.Cells["A6"].Style.Font.Bold = true;

                // For Border Lines
                worksheet.Cells["A6:" + "T6"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "T6"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "T6"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "T7"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "T7"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "T7"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "T7"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["A7:" + "T7"].AutoFilter = true;


                int rowCount = 6; // Start Printing Records

                foreach (DataRow dr in p_dt.Rows)
                {
                    rowCount += 1;
                    for (int i = 1; i < p_dt.Columns.Count + 1; i++)
                    {
                        if (rowCount == 7) // For Colounm Header Name
                        {
                            worksheet.Cells[rowCount, i].Value = p_dt.Columns[i - 1].ColumnName;
                            worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            worksheet.Cells[rowCount, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells[rowCount, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                            worksheet.Cells[rowCount, i].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        }

                        // For Set 2 Decimal 
                        if (p_dt.Columns[i - 1].ColumnName == "Cts" || p_dt.Columns[i - 1].ColumnName == "Rap Price($)" ||
                          p_dt.Columns[i - 1].ColumnName == "Disc (%)")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Rap Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=I" + _intcnt + "*J" + _intcnt;
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Net Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=K" + _intcnt + "+(" + "K" + _intcnt + "*L" + _intcnt + "/100" + ")";
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Cut") // For Set Formula Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            if (dr[i - 1].ToString() == "3EX")
                            {
                                worksheet.Cells[rowCount + 1, i].Style.Font.Bold = true;
                            }
                        }
                        else // For Others Value Come Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                        }
                    }
                }
                rowCount = rowCount + 1;

                // For Set Formula Here (Total)
                worksheet.Cells["D6"].Formula = "=SUBTOTAL(103," + "D8:" + "D" + rowCount + ")"; //Ref. No
                worksheet.Cells["I6"].Formula = "=SUBTOTAL(109," + "I8:" + "I" + rowCount + ")"; //Cts
                worksheet.Cells["K6"].Formula = "=SUBTOTAL(109," + "K8:" + "K" + rowCount + ")"; //Rap Amt($)
                worksheet.Cells["M6"].Formula = "=SUBTOTAL(109," + "M8:" + "M" + rowCount + ")"; //Net Amt($)
                worksheet.Cells["L6"].Formula = "=(1-(SUBTOTAL(109," + "M8:" + "M" + rowCount + ")/SUBTOTAL(109," + "K8:" + "K" + rowCount + ")))*-100"; //Disc (%)

                // For Set Front Color
                worksheet.Cells["L8:" + "L" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Disc (%)
                worksheet.Cells["M8:" + "M" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Net Amt($)

                //// For Set Front Bold
                worksheet.Cells["L8:" + "L" + rowCount].Style.Font.Bold = true;// Disc (%)
                worksheet.Cells["M8:" + "M" + rowCount].Style.Font.Bold = true;// Net Amt($)

                //// For Set Number Format Here
                worksheet.Cells["M8:" + "M" + rowCount].Style.Numberformat.Format = "0.00";// Net Amt($)
                worksheet.Cells["I8:" + "I" + rowCount].Style.Numberformat.Format = "0.00";// Cts
                worksheet.Cells["K8:" + "K" + rowCount].Style.Numberformat.Format = "0.00";// Rap Amt($)
                worksheet.Cells["L8:" + "L" + rowCount].Style.Numberformat.Format = "0.00";// Disc (%)                

                // For Total Formate Here
                worksheet.Cells["D6"].Style.Numberformat.Format = "#,##0";// Ref. No
                worksheet.Cells["I6"].Style.Numberformat.Format = "#,##0.00";// Cts
                worksheet.Cells["K6"].Style.Numberformat.Format = "#,##0";// Rap Amt($)
                worksheet.Cells["M6"].Style.Numberformat.Format = "#,##0";// Net Amt($)
                worksheet.Cells["L6"].Style.Numberformat.Format = "0.00";// Disc (%)

                worksheet.Cells["A6:AL25000"].AutoFitColumns(); // For Autofit Colounm
                worksheet.Column(26).Width = 60;// For Special columns width(Key To Symbol)
                worksheet.Column(40).Hidden = true; // For Hide Lab column
                worksheet.View.FreezePanes(8, 1); // For Panel Freeze
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                package.Save();
            }
        }

        // Added By Kaushal 15-12-2018 Given Bhai Tejas Bhai
        public static void Excel_Data_Offer(DataTable p_dt, string _strFilePath, string _strcerti, string _strpurpose)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            string _date = System.DateTime.Today.ToString("dd-MMM-yyyy");
            string _strlabName = "";
            string _strcertino = "";
            string _strloction = "";
            string _strhyperlink = "";
            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                // For Set Excel Sheet WorkSheet Name
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("TotalStock");

                // For Set Company Name, Address & Others
                worksheet.Cells["B2"].Value = "Abbreviation";
                worksheet.Cells["B2"].Style.Font.Bold = true;
                worksheet.Cells["C2"].Value = "Buss. Proc";
                worksheet.Cells["D2"].Value = "B";
                worksheet.Cells["D2"].Style.Font.Bold = true;
                worksheet.Cells["B3:D3"].Value = "Offer(%) & Validity Compulsory";
                //worksheet.Cells["B3:D3"].Merge = true;
                worksheet.Cells["B3:D3"].Style.Font.Bold = true;
                worksheet.Cells["B3:D3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["B3:D3"].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                worksheet.Cells["B3:D3"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["B3:D3"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                //worksheet.Cells["D3"].Value = "P";
                //worksheet.Cells["D3"].Style.Font.Bold = true;

                //worksheet.Cells["B4:F4"].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells["B4:F4"].Merge = true;
                //worksheet.Cells["B5:E5"].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells["B5:E5"].Merge = true;

                worksheet.Cells["F1"].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + _date + "";
                //worksheet.Cells["F1:S1"].Merge = true;
                worksheet.Cells["F1"].Style.Font.Size = 24;
                worksheet.Cells["F1:S1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F1:S1"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F1:S1"].Style.Font.Bold = true;

                worksheet.Cells["F2"].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                //worksheet.Cells["F2:T2"].Merge = true;
                worksheet.Cells["F2:T2"].Style.Font.Size = 12;
                worksheet.Cells["F2:T2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F2:T2"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F2:T2"].Style.Font.Bold = true;

                worksheet.Cells["F3"].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                //worksheet.Cells["F3:S3"].Merge = true;
                worksheet.Cells["F3:S3"].Style.Font.Size = 12;
                worksheet.Cells["F3:S3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["F3:S3"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["F3:S3"].Style.Font.Bold = true;

                worksheet.Cells["B2:D2"].Value = "All Prices are final Selling Cash Price";
                //worksheet.Cells["B2:D2"].Merge = true;
                worksheet.Cells["B2:D2"].Style.Font.Bold = true;
                worksheet.Cells["B2:D2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["B2:D2"].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                worksheet.Cells["B2:D2"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["B2:D2"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                worksheet.Cells["A6:" + "AP6"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A6:" + "AP6"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                worksheet.Cells["A6"].Value = "Total";
                worksheet.Cells["A6"].Style.Font.Bold = true;

                // For Border Lines
                worksheet.Cells["A6:" + "AP6"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AP6"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AP6"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AO7"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AO7"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AO7"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AO7"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["A7:" + "AO7"].AutoFilter = true;
                worksheet.Cells["A7:" + "AO" + 7].Style.WrapText = true;


                int rowCount = 6; // Start Printing Records

                foreach (DataRow dr in p_dt.Rows)
                {
                    rowCount += 1;
                    for (int i = 1; i < p_dt.Columns.Count + 1; i++)
                    {
                        if (rowCount == 7) // For Colounm Header Name
                        {
                            if (p_dt.Columns[i - 1].ColumnName == "Validity")
                            {
                                worksheet.Cells[rowCount, i].Value = "Validity & Days";
                            }
                            else
                            {
                                worksheet.Cells[rowCount, i].Value = p_dt.Columns[i - 1].ColumnName;
                            }
                            worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            worksheet.Cells[rowCount, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells[rowCount, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                            worksheet.Cells[rowCount, i].Style.Border.Top.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                            worksheet.Cells[rowCount, i].Style.Border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                        }

                        // For Set 2 Decimal 
                        if (p_dt.Columns[i - 1].ColumnName == "Cts" || p_dt.Columns[i - 1].ColumnName == "Rap Price($)"
                           || p_dt.Columns[i - 1].ColumnName == "Length" || p_dt.Columns[i - 1].ColumnName == "Disc (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Width" || p_dt.Columns[i - 1].ColumnName == "Depth"
                           || p_dt.Columns[i - 1].ColumnName == "Depth (%)" || p_dt.Columns[i - 1].ColumnName == "Table (%)"
                           || p_dt.Columns[i - 1].ColumnName == "Cr Ang" || p_dt.Columns[i - 1].ColumnName == "Cr Ht"
                           || p_dt.Columns[i - 1].ColumnName == "Pav Ang" || p_dt.Columns[i - 1].ColumnName == "Pav Ht"
                           || p_dt.Columns[i - 1].ColumnName == "Certi No" || p_dt.Columns[i - 1].ColumnName == "Offer"
                           || p_dt.Columns[i - 1].ColumnName == "Validity & Days")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName.ToUpper() == "REF. NO")
                        {
                            try // For Decimal value Come Here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = double.Parse(dr[i - 1].ToString());
                            }
                            catch // For Non Decimal or Blank Value come here
                            {
                                worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName == "Image") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""Image"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "HDMovie") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""HDMovie"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "SImage") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SImage"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }

                        else if (p_dt.Columns[i - 1].ColumnName == "Lab") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                _strcertino = (dr[7].ToString());
                                _strlabName = (dr[41].ToString()); // Lab1 column data for lab name
                                _strloction = (dr[1].ToString());

                                if (_strloction == "Hong Kong")
                                {
                                    _strhyperlink = "https://sunrisediamonds.com.hk/certi/" + _strcertino + ".pdf";
                                    worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + _strhyperlink + @""",""" + _strlabName + @""")";
                                }
                                else
                                {
                                    worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                }

                                //https://sunrisediamonds.com.hk/certi/5191592902.pdf
                                //worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""" + _strlabName + @""")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "DNA") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""DNA"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "VdoLink") // For Create Hyperlink
                        {
                            if (dr[i - 1].ToString() != "")
                            {
                                worksheet.Cells[rowCount + 1, i].Formula = @"=HYPERLINK(""" + dr[i - 1].ToString() + @""",""SVideo"")";
                                worksheet.Cells[rowCount + 1, i].Style.Font.UnderLine = true;
                                worksheet.Cells[rowCount + 1, i].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                            }
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Rap Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=L" + _intcnt + "*M" + _intcnt;
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Net Amt($)") // For Set Formula Here
                        {
                            int _intcnt = rowCount + 1;
                            worksheet.Cells[rowCount + 1, i].Formula = "=N" + _intcnt + "+(" + "N" + _intcnt + "*O" + _intcnt + "/100" + ")";
                        }
                        else if (p_dt.Columns[i - 1].ColumnName == "Cut") // For Set Formula Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                            if (dr[i - 1].ToString() == "3EX")
                            {
                                worksheet.Cells[rowCount + 1, i].Style.Font.Bold = true;
                            }
                        }
                        else // For Others Value Come Here
                        {
                            worksheet.Cells[rowCount + 1, i].Value = dr[i - 1].ToString();
                        }
                    }
                }
                rowCount = rowCount + 1;

                // For Set Formula Here (Total)
                worksheet.Cells["D6"].Formula = "=SUBTOTAL(103," + "E8:" + "E" + rowCount + ")"; //Ref. No
                worksheet.Cells["L6"].Formula = "=SUBTOTAL(109," + "L8:" + "L" + rowCount + ")"; //Cts
                worksheet.Cells["N6"].Formula = "=SUBTOTAL(109," + "N8:" + "N" + rowCount + ")"; //Rap Amt($)
                worksheet.Cells["P6"].Formula = "=SUBTOTAL(109," + "P8:" + "P" + rowCount + ")"; //Net Amt($)
                worksheet.Cells["O6"].Formula = "=(1-(SUBTOTAL(109," + "P8:" + "P" + rowCount + ")/SUBTOTAL(109," + "N8:" + "N" + rowCount + ")))*-100"; //Disc (%)

                // For Set Front Color
                worksheet.Cells["O8:" + "O" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Disc (%)
                worksheet.Cells["P8:" + "P" + rowCount].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Net Amt($)

                //// For Set Front Bold
                worksheet.Cells["O8:" + "O" + rowCount].Style.Font.Bold = true;// Disc (%)
                worksheet.Cells["P8:" + "P" + rowCount].Style.Font.Bold = true;// Net Amt($)

                //// For Set Number Format Here
                worksheet.Cells["P8:" + "P" + rowCount].Style.Numberformat.Format = "0.00";// Net Amt($)
                worksheet.Cells["L8:" + "L" + rowCount].Style.Numberformat.Format = "0.00";// Cts
                worksheet.Cells["N8:" + "N" + rowCount].Style.Numberformat.Format = "0.00";// Rap Amt($)
                worksheet.Cells["O8:" + "O" + rowCount].Style.Numberformat.Format = "0.00";// Disc (%)
                worksheet.Cells["Y8:" + "Y" + rowCount].Style.Numberformat.Format = "0.00";// Table (%)
                worksheet.Cells["U8:" + "U" + rowCount].Style.Numberformat.Format = "0.00";// Length
                worksheet.Cells["V8:" + "V" + rowCount].Style.Numberformat.Format = "0.00";// Width
                worksheet.Cells["W8:" + "W" + rowCount].Style.Numberformat.Format = "0.00";// Depth
                worksheet.Cells["X8:" + "X" + rowCount].Style.Numberformat.Format = "0.00";// Depth (%)
                worksheet.Cells["Y8:" + "Y" + rowCount].Style.Numberformat.Format = "0.00";// Table (%)
                worksheet.Cells["AH8:" + "AH" + rowCount].Style.Numberformat.Format = "0.00";// Cr Ang
                worksheet.Cells["AI8:" + "AI" + rowCount].Style.Numberformat.Format = "0.00";// Cr Ht
                worksheet.Cells["AJ8:" + "AJ" + rowCount].Style.Numberformat.Format = "0.00";// Pav Ang
                worksheet.Cells["AK8:" + "AK" + rowCount].Style.Numberformat.Format = "0.00";// Pav Ang

                // For Total Formate Here
                worksheet.Cells["D6"].Style.Numberformat.Format = "#,##0";// Ref. No
                worksheet.Cells["L6"].Style.Numberformat.Format = "#,##0.00";// Cts
                worksheet.Cells["N6"].Style.Numberformat.Format = "#,##0";// Rap Amt($)
                worksheet.Cells["P6"].Style.Numberformat.Format = "#,##0";// Net Amt($)
                worksheet.Cells["O6"].Style.Numberformat.Format = "0.00";// Disc (%)

                worksheet.Cells["A6:AO25000"].AutoFitColumns(); // For Autofit Colounm
                worksheet.Cells["A6:" + "AO" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["AB7:" + "AB" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;//(Key To Symbol)
                worksheet.Column(28).Width = 60;// For Special columns width(Key To Symbol)
                if (_strpurpose == "Mail")
                {
                    worksheet.Column(40).Hidden = true;
                    worksheet.Column(41).Hidden = true;
                    worksheet.Column(42).Hidden = true;
                }
                else
                {
                    worksheet.Column(42).Hidden = true; // For Hide Lab column
                }
                worksheet.View.FreezePanes(8, 1); // For Panel Freeze
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                package.Save();
            }
        }

        // Added By Jubin Shah 04-10-2018 Given Bhai Tejas Bhai
        public static void Excel_CopyData(DataTable p_dt, string _strFilePath)
        {
            int _intno = p_dt.Rows.Count + 7;
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            string _date = System.DateTime.Today.ToString("dd-MMM-yyyy");

            using (ExcelPackage pck = new ExcelPackage(newFile))
            {
                ExcelWorksheet worksheet = pck.Workbook.Worksheets.Add("TotalStock");
                // Hard Code Part // Added By Jubin Shah 
                worksheet.Cells["B2"].Value = "Abbreviation";
                worksheet.Cells["B2"].Style.Font.Bold = true;
                worksheet.Cells["C2"].Value = "Buss. Proc";
                worksheet.Cells["D2"].Value = "B";
                worksheet.Cells["D2"].Style.Font.Bold = true;
                worksheet.Cells["C3"].Value = "Promotion";
                worksheet.Cells["D3"].Value = "P";
                worksheet.Cells["D3"].Style.Font.Bold = true;

                //worksheet.Cells["B4:F4"].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells["B4:F4"].Merge = true;
                //worksheet.Cells["B5:E5"].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells["B5:E5"].Merge = true;

                worksheet.Cells["G1:Q1"].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + _date + "";
                //worksheet.Cells["G1:Q1"].Merge = true;
                worksheet.Cells["G1:Q1"].Style.Font.Size = 24;
                worksheet.Cells["G1:Q1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["G1:Q1"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["G1:Q1"].Style.Font.Bold = true;

                worksheet.Cells["G2:U2"].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                //worksheet.Cells["G2:U2"].Merge = true;
                worksheet.Cells["G2:U2"].Style.Font.Size = 12;
                worksheet.Cells["G2:U2"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["G2:U2"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["G2:U2"].Style.Font.Bold = true;

                worksheet.Cells["G3:Q3"].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                //worksheet.Cells["G3:Q3"].Merge = true;
                worksheet.Cells["G3:Q3"].Style.Font.Size = 12;
                worksheet.Cells["G3:Q3"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Left;
                worksheet.Cells["G3:Q3"].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                worksheet.Cells["G3:Q3"].Style.Font.Bold = true;

                worksheet.Cells["A6:" + "AI6"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A6:" + "AI6"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                worksheet.Cells["A6"].Value = "Summary";
                worksheet.Cells["A6"].Style.Font.Bold = true;

                // For Border Lines
                worksheet.Cells["A6:" + "AI6"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AI6"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A6:" + "AI6"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AI7"].Style.Border.Left.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AI7"].Style.Border.Right.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;
                worksheet.Cells["A7:" + "AI7"].Style.Border.BorderAround(OfficeOpenXml.Style.ExcelBorderStyle.Thin);
                worksheet.Cells["A7:" + "AI7"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                // Data Fill Part & Property Set Part 
                worksheet.Cells["A7"].LoadFromDataTable(p_dt, true);
                worksheet.Cells["A7:" + "AI7"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A7:" + "AI7"].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                worksheet.Cells["A7:" + "AI7"].AutoFilter = true;
                worksheet.Cells["A7:" + "AI7"].Style.Font.Bold = true;

                // For Formula
                worksheet.Cells["E6"].Formula = "=SUBTOTAL(103," + "E8:" + "E" + _intno + ")";
                worksheet.Cells["K6"].Formula = "=SUBTOTAL(109," + "K8:" + "K" + _intno + ")";
                worksheet.Cells["P6"].Formula = "=SUBTOTAL(109," + "P8:" + "P" + _intno + ")";
                worksheet.Cells["R6"].Formula = "=SUBTOTAL(109," + "R8:" + "R" + _intno + ")";

                // worksheet.Cells["B8:" + "B" + _intno].Formula = @"=HYPERLINK(""" + "B8:" + "B" + _intno + @""",""SImage"")";

                // worksheet.Cells["Q6"].Formula = "=SUBTOTAL(109," + "Q8:" + "Q" + _intno + ")"; //=(1- (SUBTOTAL(109,S8:S13972)/SUBTOTAL(109,Q8:Q13972) ))*-100

                // For 2 Decimal 
                worksheet.Cells["K8:" + "K" + _intno].Style.Numberformat.Format = "0.00";// Cts
                worksheet.Cells["Q8:" + "Q" + _intno].Style.Numberformat.Format = "0.00";// Discount
                worksheet.Cells["R8:" + "R" + _intno].Style.Numberformat.Format = "0.00";// Net Amt($)
                worksheet.Cells["W8:" + "W" + _intno].Style.Numberformat.Format = "0.00";// Length
                worksheet.Cells["X8:" + "X" + _intno].Style.Numberformat.Format = "0.00";// Width
                worksheet.Cells["Y8:" + "Y" + _intno].Style.Numberformat.Format = "0.00";// Depth
                worksheet.Cells["Z8:" + "Z" + _intno].Style.Numberformat.Format = "0.00";// Depth (%)
                worksheet.Cells["AA8:" + "AA" + _intno].Style.Numberformat.Format = "0.00";// Table (%)

                worksheet.Cells["AE8:" + "AE" + _intno].Style.Numberformat.Format = "0.00";// Cr Ang
                worksheet.Cells["AF8:" + "AF" + _intno].Style.Numberformat.Format = "0.00";// Cr Ht
                worksheet.Cells["AG8:" + "AG" + _intno].Style.Numberformat.Format = "0.00";// Pav Ang
                worksheet.Cells["AH8:" + "AH" + _intno].Style.Numberformat.Format = "0.00";// Pav Ht

                // For Set Front Color
                worksheet.Cells["Q8:" + "Q" + _intno].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Discount
                worksheet.Cells["R8:" + "R" + _intno].Style.Font.Color.SetColor(System.Drawing.Color.Red);// Net Amt($)

                // For Set Front Color
                worksheet.Cells["Q8:" + "Q" + _intno].Style.Font.Bold = true;// Discount
                worksheet.Cells["R8:" + "R" + _intno].Style.Font.Bold = true;// Net Amt($)

                worksheet.Cells["E7:AI25000"].AutoFitColumns();
                worksheet.View.FreezePanes(8, 1);
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                pck.Save();
            }
        }

        // Added By Jubin Shah 24-01-2019 For Offer History
        public static void Excel_OfferHistory(DataTable p_dt, string _strFilePath)
        {
            FileInfo newFile = new FileInfo(_strFilePath);
            if (newFile.Exists)
            {
                newFile.Delete(); // ensures we create a new workbook
                newFile = new FileInfo(_strFilePath);
            }
            int rowCount = 1, FormulaLine = 3;
            string _stroffer = "", _strofferchange = "", _strcerti = "", _strcts = "", _strrapamt = "", _strdisc = "", _strnetamt = "", _strofferper = "", _strofferamt = "", _strcolor = "";

            using (ExcelPackage package = new ExcelPackage(newFile))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Offer History");
                foreach (DataRow dr in p_dt.Rows)
                {
                    if (_stroffer != dr[0].ToString())
                    {
                        _stroffer = dr[0].ToString();
                        _strofferchange = _stroffer + "X";
                    }
                    rowCount += 1;
                    _strcolor = "";
                    for (int i = 1; i < p_dt.Columns.Count + 1; i++)
                    {

                        if (rowCount == 2 || rowCount == 3) // For Header Comes here
                        {
                            worksheet.Cells[1, i].Value = p_dt.Columns[i - 1].ColumnName;
                            worksheet.Cells[1, i].Style.Font.Bold = true;
                            worksheet.Cells[1, i].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells[1, i].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.BlanchedAlmond);
                        }

                        if (_stroffer == _strofferchange)
                        {
                            if (p_dt.Columns[i - 1].ColumnName == "Cut")
                            {
                                worksheet.Cells[rowCount, i].Value = dr[i - 1].ToString();
                                if (dr[i - 1].ToString() == "3EX")
                                {
                                    worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                                    _strcolor = "Y";
                                }
                            }
                            else if (p_dt.Columns[i - 1].ColumnName == "Polish" || p_dt.Columns[i - 1].ColumnName == "Symm")
                            {
                                worksheet.Cells[rowCount, i].Value = dr[i - 1].ToString();
                                if (_strcolor == "Y")
                                    worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            }

                            else
                            {
                                try
                                {
                                    worksheet.Cells[rowCount, i].Value = double.Parse(dr[i - 1].ToString());
                                    if (p_dt.Columns[i - 1].ColumnName == "Net Amt($)" || p_dt.Columns[i - 1].ColumnName == "Offer Amt($)")
                                    {
                                        worksheet.Cells[rowCount, i].Style.Numberformat.Format = "0.00";// Net Amt($)
                                    }
                                    if (p_dt.Columns[i - 1].ColumnName == "Rap Amt($)")
                                    {
                                        worksheet.Cells[rowCount, i].Style.Numberformat.Format = "#,##0";// Net Amt($)
                                    }
                                }
                                catch
                                {
                                    worksheet.Cells[rowCount, i].Value = dr[i - 1].ToString();
                                }
                            }
                        }
                        else
                        {
                            if (rowCount != 2)
                            {
                                int totcount = rowCount - 1;
                                worksheet.Cells[rowCount, i].Value = "Sub Total";
                                worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                                worksheet.Cells["A" + rowCount + ":E" + rowCount].Merge = true;
                                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Pink);
                                worksheet.Cells["F" + rowCount].Formula = "=SUBTOTAL(103," + "F" + FormulaLine + ":F" + totcount + ")";// Count
                                worksheet.Cells["J" + rowCount].Formula = "=SUBTOTAL(109," + "J" + FormulaLine + ":J" + totcount + ")";//Sum
                                worksheet.Cells["L" + rowCount].Formula = "=SUBTOTAL(109," + "L" + FormulaLine + ":L" + totcount + ")";//Sum
                                worksheet.Cells["N" + rowCount].Formula = "=SUBTOTAL(109," + "N" + FormulaLine + ":N" + totcount + ")";//Sum
                                worksheet.Cells["P" + rowCount].Formula = "=SUBTOTAL(109," + "P" + FormulaLine + ":P" + totcount + ")";//Sum
                                worksheet.Cells["M" + rowCount].Formula = "=(100-((N" + rowCount + "*100)/L" + rowCount + "))*-1";
                                worksheet.Cells["O" + rowCount].Formula = "=(100-((P" + rowCount + "*100)/L" + rowCount + "))*-1";

                                worksheet.Cells["F" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["J" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["L" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["N" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["P" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["M" + rowCount].Style.Font.Bold = true;
                                worksheet.Cells["O" + rowCount].Style.Font.Bold = true;

                                worksheet.Cells["M" + FormulaLine + ":M" + totcount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                worksheet.Cells["M" + FormulaLine + ":M" + totcount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                                worksheet.Cells["M" + FormulaLine + ":M" + totcount].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                                worksheet.Cells["N" + FormulaLine + ":N" + totcount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                worksheet.Cells["N" + FormulaLine + ":N" + totcount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                                worksheet.Cells["O" + FormulaLine + ":O" + totcount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                worksheet.Cells["O" + FormulaLine + ":O" + totcount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
                                worksheet.Cells["O" + FormulaLine + ":O" + totcount].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                                worksheet.Cells["P" + FormulaLine + ":P" + totcount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                worksheet.Cells["P" + FormulaLine + ":P" + totcount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);

                                // For Row Data Center Margin
                                worksheet.Cells["A" + FormulaLine + ":L" + totcount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["N" + FormulaLine + ":N" + totcount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["P" + FormulaLine + ":Y" + totcount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                                // For Sub Total Center Margin
                                worksheet.Cells["F" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["J" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["L" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["N" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                                worksheet.Cells["P" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                                _strcerti += "F" + rowCount + ",";
                                _strcts += "J" + rowCount + ",";
                                _strrapamt += "L" + rowCount + ",";
                                _strnetamt += "N" + rowCount + ",";
                                _strofferamt += "P" + rowCount + ",";
                                _strdisc += "M" + rowCount + ",";
                                _strofferper += "O" + rowCount + ",";

                                rowCount = rowCount + 1;
                                FormulaLine = rowCount + 1;
                            }
                            worksheet.Cells[rowCount, i].Value = "Offer Id : " + dr[0].ToString();
                            worksheet.Cells[rowCount, i].Style.Font.Bold = true;
                            worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                            worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);
                            worksheet.Cells["A" + rowCount + ":Y" + rowCount].Merge = true;

                            rowCount = rowCount + 1;
                            worksheet.Cells[rowCount, 1].Value = double.Parse(dr[0].ToString());
                            _strofferchange = _stroffer;
                        }
                    }
                }
                int totcount1 = rowCount;

                rowCount = rowCount + 1;
                worksheet.Cells[rowCount, 1].Value = "Sub Total"; // For Last sab total
                worksheet.Cells[rowCount, 1].Style.Font.Bold = true;
                worksheet.Cells["A" + rowCount + ":E" + rowCount].Merge = true;
                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Pink);
                worksheet.Cells["F" + rowCount].Formula = "=SUBTOTAL(103," + "F" + FormulaLine + ":F" + totcount1 + ")";// Count
                worksheet.Cells["J" + rowCount].Formula = "=SUBTOTAL(109," + "J" + FormulaLine + ":J" + totcount1 + ")";//Sum
                worksheet.Cells["L" + rowCount].Formula = "=SUBTOTAL(109," + "L" + FormulaLine + ":L" + totcount1 + ")";//Sum
                worksheet.Cells["N" + rowCount].Formula = "=SUBTOTAL(109," + "N" + FormulaLine + ":N" + totcount1 + ")";//Sum
                worksheet.Cells["P" + rowCount].Formula = "=SUBTOTAL(109," + "P" + FormulaLine + ":P" + totcount1 + ")";//Sum
                worksheet.Cells["M" + rowCount].Formula = "=(100 - ((N" + rowCount + " * 100) / L" + rowCount + ")) * -1";
                worksheet.Cells["O" + rowCount].Formula = "=(100 - ((P" + rowCount + " * 100) / L" + rowCount + ")) * -1";//Average

                worksheet.Cells["F" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["J" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["L" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["N" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["P" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["M" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["O" + rowCount].Style.Font.Bold = true;

                worksheet.Cells["F" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["J" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["L" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["N" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["P" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                worksheet.Cells["A" + FormulaLine + ":L" + totcount1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["N" + FormulaLine + ":N" + totcount1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["P" + FormulaLine + ":Y" + totcount1].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                worksheet.Cells["M" + FormulaLine + ":M" + totcount1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["M" + FormulaLine + ":M" + totcount1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);
                worksheet.Cells["M" + FormulaLine + ":M" + totcount1].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                worksheet.Cells["N" + FormulaLine + ":N" + totcount1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["N" + FormulaLine + ":N" + totcount1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Yellow);

                worksheet.Cells["O" + FormulaLine + ":O" + totcount1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["O" + FormulaLine + ":O" + totcount1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
                worksheet.Cells["O" + FormulaLine + ":O" + totcount1].Style.Font.Color.SetColor(System.Drawing.Color.Red);

                worksheet.Cells["P" + FormulaLine + ":P" + totcount1].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["P" + FormulaLine + ":P" + totcount1].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);

                _strcerti += "F" + rowCount + ",";
                _strcerti = _strcerti.TrimEnd(',');
                _strcts += "J" + rowCount + ",";
                _strcts = _strcts.TrimEnd(',');
                _strrapamt += "L" + rowCount + ",";
                _strrapamt = _strrapamt.TrimEnd(',');
                _strnetamt += "N" + rowCount + ",";
                _strnetamt = _strnetamt.TrimEnd(',');
                _strofferamt += "P" + rowCount + ",";
                _strofferamt = _strofferamt.TrimEnd(',');
                _strdisc += "M" + rowCount + ",";
                _strdisc = _strdisc.TrimEnd(',');
                _strofferper += "O" + rowCount + ",";
                _strofferper = _strofferper.TrimEnd(',');

                rowCount = rowCount + 1; // For Grand Total

                worksheet.Cells[rowCount, 1].Value = "Grand Total"; // For Grand total
                worksheet.Cells[rowCount, 1].Style.Font.Bold = true;
                worksheet.Cells["A" + rowCount + ":E" + rowCount].Merge = true;
                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                worksheet.Cells["A" + rowCount + ":Y" + rowCount].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);

                worksheet.Cells["F" + rowCount].Formula = "=count(" + _strcerti + ")";// Count
                worksheet.Cells["J" + rowCount].Formula = "=sum(" + _strcts + ")";// sum
                worksheet.Cells["L" + rowCount].Formula = "=sum(" + _strrapamt + ")";// sum
                worksheet.Cells["N" + rowCount].Formula = "=sum(" + _strnetamt + ")";// sum
                worksheet.Cells["P" + rowCount].Formula = "=sum(" + _strofferamt + ")";// sum
                worksheet.Cells["M" + rowCount].Formula = "=(100 - ((N" + rowCount + " * 100) / L" + rowCount + ")) * -1";
                worksheet.Cells["0" + rowCount].Formula = "=(100 - ((P" + rowCount + " * 100) / L" + rowCount + ")) * -1";

                worksheet.Cells["L3:" + "L" + rowCount].Style.Numberformat.Format = "#,##0";// Rap Amt($)
                worksheet.Cells["N3:" + "N" + rowCount].Style.Numberformat.Format = "#,##0.00";// Net Amt($)
                worksheet.Cells["P3:" + "P" + rowCount].Style.Numberformat.Format = "#,##0.00";// Offer Amt($)

                worksheet.Cells["F" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["J" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["L" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["N" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["P" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["M" + rowCount].Style.Font.Bold = true;
                worksheet.Cells["O" + rowCount].Style.Font.Bold = true;

                worksheet.Cells["F" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["J" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["L" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["N" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["P" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;

                worksheet.Cells["J3:" + "J" + rowCount].Style.Numberformat.Format = "0.00";
                worksheet.Cells["M3:" + "M" + rowCount].Style.Numberformat.Format = "0.00";
                worksheet.Cells["N3:" + "N" + rowCount].Style.Numberformat.Format = "0.00";
                worksheet.Cells["O3:" + "O" + rowCount].Style.Numberformat.Format = "0.00";
                worksheet.Cells["P3:" + "P" + rowCount].Style.Numberformat.Format = "0.00";
                worksheet.Cells["A" + rowCount + ":L" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["N" + rowCount + ":N" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["P" + rowCount + ":X" + rowCount].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["A1:X1"].Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.Center;
                worksheet.Cells["A1:Y" + rowCount].AutoFitColumns(); // For Autofit Column
                worksheet.Column(1).Width = 7.5;
                worksheet.Column(5).Width = 4;
                worksheet.Column(8).Width = 6.75;
                worksheet.Column(18).Width = 5.5;
                worksheet.Column(19).Width = 5.5;
                worksheet.Column(20).Width = 5.5;
                worksheet.Column(21).Width = 5.5;
                worksheet.View.FreezePanes(2, 1); // For Panel Freeze
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                package.Save();
            }
        }

        public static void CreateUserExcel_OLD(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("User");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";

                    worksheet.Cells[1, 4].Value = "SUNRISE DIAMONDS PVT. LTD.";
                    worksheet.Cells[1, 4].Style.Font.Size = 24;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 4].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[3, 4].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[1, 4, 3, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 4, 3, 4].Style.Font.Size = 11;
                    worksheet.Cells[1, 4, 3, 4].Style.Font.Bold = true;
                    worksheet.Cells[1, 4, 3, 4].Style.Font.Color.SetColor(colFromHex_H1);

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    worksheet.Cells[6, 1, 6, 31].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 31].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 31].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 31].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 31].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 31].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Created Date";
                    worksheet.Cells[6, 2].Value = "Last Activation Date";
                    worksheet.Cells[6, 3].Value = "Last Login Date";
                    worksheet.Cells[6, 4].Value = "User Name";
                    worksheet.Cells[6, 5].Value = "Name";
                    worksheet.Cells[6, 6].Value = "Company Name";
                    worksheet.Cells[6, 7].Value = "Party Code";
                    worksheet.Cells[6, 8].Value = "Assist 1";
                    worksheet.Cells[6, 9].Value = "Assist 2";
                    worksheet.Cells[6, 10].Value = "User Type";
                    worksheet.Cells[6, 11].Value = "Account Suspended";
                    worksheet.Cells[6, 12].Value = "Status";
                    worksheet.Cells[6, 13].Value = "Address1";
                    worksheet.Cells[6, 14].Value = "Address2";
                    worksheet.Cells[6, 15].Value = "City";
                    worksheet.Cells[6, 16].Value = "Zipcode";
                    worksheet.Cells[6, 17].Value = "Country";
                    worksheet.Cells[6, 18].Value = "Mobile1";
                    worksheet.Cells[6, 19].Value = "Mobile2";
                    worksheet.Cells[6, 20].Value = "Phone1";
                    worksheet.Cells[6, 21].Value = "Phone2";
                    worksheet.Cells[6, 22].Value = "Fax No";
                    worksheet.Cells[6, 23].Value = "Email1";
                    worksheet.Cells[6, 24].Value = "Email2";
                    worksheet.Cells[6, 25].Value = "Website";
                    worksheet.Cells[6, 26].Value = "Skype Id";
                    worksheet.Cells[6, 27].Value = "WeChat Id";
                    worksheet.Cells[6, 28].Value = "Bussiness Reg.No";
                    worksheet.Cells[6, 29].Value = "Rap Id";
                    worksheet.Cells[6, 30].Value = "Primary User";
                    worksheet.Cells[6, 31].Value = "Sub User";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 31].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dt.Rows.Count + inStartIndex;
                    int TotalRow = dt.Rows.Count;

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);
                    worksheet.Cells[6, 1].AutoFitColumns(13);
                    worksheet.Cells[6, 2].AutoFitColumns(13);
                    worksheet.Cells[6, 3].AutoFitColumns(13);
                    worksheet.Cells[6, 4].AutoFitColumns(20);
                    worksheet.Cells[6, 5].AutoFitColumns(20);
                    worksheet.Cells[6, 6].AutoFitColumns(35);
                    worksheet.Cells[6, 7].AutoFitColumns(10);
                    worksheet.Cells[6, 8].AutoFitColumns(20);
                    worksheet.Cells[6, 9].AutoFitColumns(20);
                    worksheet.Cells[6, 10].AutoFitColumns(12);
                    worksheet.Cells[6, 11].AutoFitColumns(13);
                    worksheet.Cells[6, 12].AutoFitColumns(10);
                    worksheet.Cells[6, 13].AutoFitColumns(20);
                    worksheet.Cells[6, 14].AutoFitColumns(20);
                    worksheet.Cells[6, 15].AutoFitColumns(15);
                    worksheet.Cells[6, 16].AutoFitColumns(10);
                    worksheet.Cells[6, 17].AutoFitColumns(15);
                    worksheet.Cells[6, 18].AutoFitColumns(20);
                    worksheet.Cells[6, 19].AutoFitColumns(20);
                    worksheet.Cells[6, 20].AutoFitColumns(20);
                    worksheet.Cells[6, 21].AutoFitColumns(20);
                    worksheet.Cells[6, 22].AutoFitColumns(20);
                    worksheet.Cells[6, 23].AutoFitColumns(30);
                    worksheet.Cells[6, 24].AutoFitColumns(30);
                    worksheet.Cells[6, 25].AutoFitColumns(20);
                    worksheet.Cells[6, 26].AutoFitColumns(15);
                    worksheet.Cells[6, 27].AutoFitColumns(15);
                    worksheet.Cells[6, 28].AutoFitColumns(15);
                    worksheet.Cells[6, 29].AutoFitColumns(15);
                    worksheet.Cells[6, 30].AutoFitColumns(8);
                    worksheet.Cells[6, 31].AutoFitColumns(8);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[6, 7, inEndCounter, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 10, inEndCounter, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    string values;
                    Int64 number;
                    bool success;
                    int i = inStartIndex;
                    for (; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        if (dt.Rows[i - inStartIndex]["dtCreatedDate"] == null)
                            worksheet.Cells[inwrkrow, 1].Value = "";
                        else
                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToDateTime(dt.Rows[i - inStartIndex]["dtCreatedDate"]).ToString("dd-MM-yyyy");

                        if (dt.Rows[i - inStartIndex]["LastActivationDate"] == null)
                            worksheet.Cells[inwrkrow, 2].Value = "";
                        else
                            worksheet.Cells[inwrkrow, 2].Value = dt.Rows[i - inStartIndex]["LastActivationDate"];

                        if (dt.Rows[i - inStartIndex]["LastLoginDate"] == null)
                            worksheet.Cells[inwrkrow, 3].Value = "";
                        else
                            worksheet.Cells[inwrkrow, 3].Value = dt.Rows[i - inStartIndex]["LastLoginDate"];

                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"] == null ? "" : dt.Rows[i - inStartIndex]["sUsername"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sFullName"] == null ? "" : dt.Rows[i - inStartIndex]["sFullName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"] == null ? "" : dt.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dt.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dt.Rows[i - inStartIndex]["FortunePartyCode"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy1"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy2"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy2"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUserType"] == null ? "" : dt.Rows[i - inStartIndex]["sUserType"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dt.Rows[i - inStartIndex]["Suspended"] == null ? "" : dt.Rows[i - inStartIndex]["Suspended"]);

                        if (dt.Rows[i - inStartIndex]["bIsActive"] != null && Convert.ToBoolean(dt.Rows[i - inStartIndex]["bIsActive"]) == true)
                            worksheet.Cells[inwrkrow, 12].Value = "Active";
                        else
                            worksheet.Cells[inwrkrow, 12].Value = "In Active";

                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompAddress"] == null ? "" : dt.Rows[i - inStartIndex]["sCompAddress"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompAddress2"] == null ? "" : dt.Rows[i - inStartIndex]["sCompAddress2"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompCity"] == null ? "" : dt.Rows[i - inStartIndex]["sCompCity"]);

                        values = dt.Rows[i - inStartIndex]["sCompZipcode"].ToString();
                        success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["sCompZipcode"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 16].Value = values;
                        }

                        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompCountry"] == null ? "" : dt.Rows[i - inStartIndex]["sCompCountry"]);

                        if (dt.Rows[i - inStartIndex]["sCompMobile"] != null)
                        {
                            values = dt.Rows[i - inStartIndex]["sCompMobile"].ToString().Replace("undefined-", "");
                            values = values.Trim('-').Trim();
                            if (values.Length >= 6)
                            {
                                success = Int64.TryParse(values, out number);
                                if (values.IndexOf("+") == -1 && success)
                                {
                                    worksheet.Cells[inwrkrow, 18].Value = Convert.ToInt64(values);
                                }
                                else
                                {
                                    worksheet.Cells[inwrkrow, 18].Value = values;
                                }
                            }
                        }

                        if (dt.Rows[i - inStartIndex]["sCompMobile2"] != null)
                        {
                            values = dt.Rows[i - inStartIndex]["sCompMobile2"].ToString().Replace("undefined-", "");
                            values = values.Trim('-').Trim();
                            if (values.Length >= 6)
                            {
                                success = Int64.TryParse(values, out number);
                                if (values.IndexOf("+") == -1 && success)
                                {
                                    worksheet.Cells[inwrkrow, 19].Value = Convert.ToInt64(values);
                                }
                                else
                                {
                                    worksheet.Cells[inwrkrow, 19].Value = values;
                                }
                            }
                        }

                        if (dt.Rows[i - inStartIndex]["sCompPhone"] != null)
                        {
                            values = dt.Rows[i - inStartIndex]["sCompPhone"].ToString().Replace("undefined-", "");
                            values = values.Trim('-').Trim();
                            if (values.Length >= 6)
                            {
                                success = Int64.TryParse(values, out number);
                                if (values.IndexOf("+") == -1 && success)
                                {
                                    worksheet.Cells[inwrkrow, 20].Value = Convert.ToInt64(values);
                                }
                                else
                                {
                                    worksheet.Cells[inwrkrow, 20].Value = values;
                                }
                            }
                        }
                        if (dt.Rows[i - inStartIndex]["sCompPhone2"] != null)
                        {
                            values = dt.Rows[i - inStartIndex]["sCompPhone2"].ToString().Replace("undefined-", "");
                            values = values.Trim('-').Trim();
                            if (values.Length >= 6)
                            {
                                success = Int64.TryParse(values, out number);
                                if (values.IndexOf("+") == -1 && success)
                                {
                                    worksheet.Cells[inwrkrow, 21].Value = Convert.ToInt64(values);
                                }
                                else
                                {
                                    worksheet.Cells[inwrkrow, 21].Value = values;
                                }
                            }
                        }
                        if (dt.Rows[i - inStartIndex]["sCompFaxNo"] != null)
                        {
                            values = dt.Rows[i - inStartIndex]["sCompFaxNo"].ToString().Replace("undefined-", "");
                            values = values.Trim('-').Trim();
                            if (values.Length >= 6)
                            {
                                success = Int64.TryParse(values, out number);
                                if (values.IndexOf("+") == -1 && success)
                                {
                                    worksheet.Cells[inwrkrow, 22].Value = Convert.ToInt64(values);
                                }
                                else
                                {
                                    worksheet.Cells[inwrkrow, 22].Value = values;
                                }
                            }
                        }

                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompEmail"] == null ? "" : dt.Rows[i - inStartIndex]["sCompEmail"]);

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompEmail2"] == null ? "" : dt.Rows[i - inStartIndex]["sCompEmail2"]);

                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sWebsite"] == null ? "" : dt.Rows[i - inStartIndex]["sWebsite"]);

                        values = dt.Rows[i - inStartIndex]["sSkypeId"].ToString();
                        success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["sSkypeId"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 26].Value = values;
                        }

                        values = dt.Rows[i - inStartIndex]["sWeChatId"].ToString();
                        success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["sWeChatId"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 27].Value = values;
                        }

                        values = dt.Rows[i - inStartIndex]["sCompRegNo"].ToString();
                        success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["sCompRegNo"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 28].Value = values;
                        }

                        values = dt.Rows[i - inStartIndex]["sRapNetId"].ToString();
                        success = Int64.TryParse(values, out number);
                        if (success)
                        {
                            worksheet.Cells[inwrkrow, 29].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["sRapNetId"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 29].Value = values;
                        }

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["IsPrimaryUser"] == null ? "" : dt.Rows[i - inStartIndex]["IsPrimaryUser"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 30].Value = "Yes";
                            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 30].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 30].Value = "No";
                            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 30].Style.Font.Color.SetColor(Color.Red);
                        }
                        if (Convert.ToString(dt.Rows[i - inStartIndex]["SubUserCount"] == null ? "" : dt.Rows[i - inStartIndex]["SubUserCount"]) == "True")
                        {
                            worksheet.Cells[inwrkrow, 31].Value = "Yes";
                            worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 31].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 31].Value = "No";
                            worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 31].Style.Font.Color.SetColor(Color.Red);
                        }
                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 31].Style.Font.Size = 9;

                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, inEndCounter, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void CreateUserExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath, string iUserType)
        {
            try
            {
                Color colFromHex_View = System.Drawing.ColorTranslator.FromHtml("#fdffb7");
                Color colFromHex_Down = System.Drawing.ColorTranslator.FromHtml("#e7fafd");

                if (iUserType == "1")
                {
                    using (ExcelPackage p = new ExcelPackage())
                    {
                        #region Company Detail on Header

                        p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                        p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                        //Create a sheet
                        p.Workbook.Worksheets.Add("User");

                        ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                        worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                        worksheet.Cells.Style.Font.Size = 11;
                        worksheet.Cells.Style.Font.Name = "Calibri";

                        worksheet.Cells[1, 4].Value = "SUNRISE DIAMONDS PVT. LTD.";
                        worksheet.Cells[1, 4].Style.Font.Size = 24;

                        Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                        worksheet.Row(6).Height = 40;
                        worksheet.Row(6).Style.WrapText = true;

                        worksheet.Cells[2, 4].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                        worksheet.Cells[3, 4].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                        worksheet.Cells[1, 4, 3, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[2, 4, 3, 4].Style.Font.Size = 11;
                        worksheet.Cells[1, 4, 3, 4].Style.Font.Bold = true;
                        worksheet.Cells[1, 4, 3, 4].Style.Font.Color.SetColor(colFromHex_H1);

                        Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                        worksheet.Cells[6, 1, 6, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 48].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 48].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 48].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 48].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #endregion

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Created Date";
                        worksheet.Cells[6, 2].Value = "Last Activation Date";
                        worksheet.Cells[6, 3].Value = "Last Login Date";
                        worksheet.Cells[6, 4].Value = "Days from Last Activation";
                        worksheet.Cells[6, 5].Value = "Days from Last Login";
                        worksheet.Cells[6, 6].Value = "User Type";
                        worksheet.Cells[6, 7].Value = "Account Suspended";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "User Name";
                        worksheet.Cells[6, 10].Value = "Name";
                        worksheet.Cells[6, 11].Value = "Company Name";
                        worksheet.Cells[6, 12].Value = "Fortune Party Code";
                        worksheet.Cells[6, 13].Value = "Assist 1";
                        worksheet.Cells[6, 14].Value = "Assist 2";

                        worksheet.Cells[6, 15].Value = "Sunrise View";
                        worksheet.Cells[6, 16].Value = "Shairu View";
                        worksheet.Cells[6, 17].Value = "JB View";
                        worksheet.Cells[6, 18].Value = "RATNA View";
                        worksheet.Cells[6, 19].Value = "KGK View";
                        worksheet.Cells[6, 20].Value = "REDEXIM View";
                        worksheet.Cells[6, 21].Value = "VENUS View";

                        worksheet.Cells[6, 22].Value = "Sunrise Download";
                        worksheet.Cells[6, 23].Value = "Shairu Download";
                        worksheet.Cells[6, 24].Value = "JB Download";
                        worksheet.Cells[6, 25].Value = "RATNA Download";
                        worksheet.Cells[6, 26].Value = "KGK Download";
                        worksheet.Cells[6, 27].Value = "REDEXIM Download";
                        worksheet.Cells[6, 28].Value = "VENUS Download";

                        worksheet.Cells[6, 29].Value = "Auto Order";
                        worksheet.Cells[6, 30].Value = "Address1";
                        worksheet.Cells[6, 31].Value = "Address2";
                        worksheet.Cells[6, 32].Value = "City";
                        worksheet.Cells[6, 33].Value = "Zipcode";
                        worksheet.Cells[6, 34].Value = "Country";
                        worksheet.Cells[6, 35].Value = "Mobile1";
                        worksheet.Cells[6, 36].Value = "Mobile2";
                        worksheet.Cells[6, 37].Value = "Phone1";
                        worksheet.Cells[6, 38].Value = "Phone2";
                        worksheet.Cells[6, 39].Value = "Fax No";
                        worksheet.Cells[6, 40].Value = "Email1";
                        worksheet.Cells[6, 41].Value = "Email2";
                        worksheet.Cells[6, 42].Value = "Website";
                        worksheet.Cells[6, 43].Value = "Skype Id";
                        worksheet.Cells[6, 44].Value = "WeChat Id";
                        worksheet.Cells[6, 45].Value = "Bussiness Reg.No";
                        worksheet.Cells[6, 46].Value = "Rap Id";
                        worksheet.Cells[6, 47].Value = "Primary User";
                        worksheet.Cells[6, 48].Value = "Sub User";


                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 48].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        int inStartIndex = 7;
                        int inwrkrow = 7;
                        int inEndCounter = dt.Rows.Count + inStartIndex;
                        int TotalRow = dt.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);
                        worksheet.Cells[6, 1].AutoFitColumns(12);   //Created Date
                        worksheet.Cells[6, 2].AutoFitColumns(12);   //Last Activation Date
                        worksheet.Cells[6, 3].AutoFitColumns(12);   //Last Login Date
                        worksheet.Cells[6, 4].AutoFitColumns(10);   //Days from Last Activation
                        worksheet.Cells[6, 5].AutoFitColumns(10);   //Days from Last Login
                        worksheet.Cells[6, 6].AutoFitColumns(12);   //User Type
                        worksheet.Cells[6, 7].AutoFitColumns(12);   //Account Suspended
                        worksheet.Cells[6, 8].AutoFitColumns(9);   //Status
                        worksheet.Cells[6, 9].AutoFitColumns(18);   //User Name
                        worksheet.Cells[6, 10].AutoFitColumns(20);  //Name
                        worksheet.Cells[6, 11].AutoFitColumns(35);  //Company Name
                        worksheet.Cells[6, 12].AutoFitColumns(10);  //Fortune Party Code
                        worksheet.Cells[6, 13].AutoFitColumns(20);  //Assist 1
                        worksheet.Cells[6, 14].AutoFitColumns(20);  //Assist 2

                        worksheet.Cells[6, 15].AutoFitColumns(9);  //Sunrise View
                        worksheet.Cells[6, 16].AutoFitColumns(9);  //Shairu View
                        worksheet.Cells[6, 17].AutoFitColumns(9);  //JB View
                        worksheet.Cells[6, 18].AutoFitColumns(9);  //RATNA View
                        worksheet.Cells[6, 19].AutoFitColumns(9);  //KGK View
                        worksheet.Cells[6, 20].AutoFitColumns(9);  //REDEXIM View
                        worksheet.Cells[6, 21].AutoFitColumns(9);  //VENUS View

                        worksheet.Cells[6, 22].AutoFitColumns(9);  //Sunrise Download
                        worksheet.Cells[6, 23].AutoFitColumns(9);  //Shairu Download
                        worksheet.Cells[6, 24].AutoFitColumns(9);  //JB Download
                        worksheet.Cells[6, 25].AutoFitColumns(9);  //RATNA Download
                        worksheet.Cells[6, 26].AutoFitColumns(9);  //KGK Download
                        worksheet.Cells[6, 27].AutoFitColumns(9);  //REDEXIM Download
                        worksheet.Cells[6, 28].AutoFitColumns(9);  //VENUS Download

                        worksheet.Cells[6, 29].AutoFitColumns(25);   //Auto Order
                        worksheet.Cells[6, 30].AutoFitColumns(28);  //Address1
                        worksheet.Cells[6, 31].AutoFitColumns(28);  //Address2
                        worksheet.Cells[6, 32].AutoFitColumns(15);  //City
                        worksheet.Cells[6, 33].AutoFitColumns(8);  //Zipcode
                        worksheet.Cells[6, 34].AutoFitColumns(15);  //Country
                        worksheet.Cells[6, 35].AutoFitColumns(17);  //Mobile1
                        worksheet.Cells[6, 36].AutoFitColumns(17);  //Mobile2
                        worksheet.Cells[6, 37].AutoFitColumns(17);  //Phone1
                        worksheet.Cells[6, 38].AutoFitColumns(17);  //Phone2
                        worksheet.Cells[6, 39].AutoFitColumns(17);  //Fax No
                        worksheet.Cells[6, 40].AutoFitColumns(25);  //Email1
                        worksheet.Cells[6, 41].AutoFitColumns(25);  //Email2
                        worksheet.Cells[6, 42].AutoFitColumns(20);  //Website
                        worksheet.Cells[6, 43].AutoFitColumns(15);  //Skype Id
                        worksheet.Cells[6, 44].AutoFitColumns(15);  //WeChat Id
                        worksheet.Cells[6, 45].AutoFitColumns(15);  //Bussiness Reg.No
                        worksheet.Cells[6, 46].AutoFitColumns(15);  //Rap Id
                        worksheet.Cells[6, 47].AutoFitColumns(8);   //Primary User
                        worksheet.Cells[6, 48].AutoFitColumns(8);   //Sub User

                        worksheet.Cells[6, 1, inEndCounter, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        string values;
                        Int64 number;
                        bool success;
                        int i = inStartIndex;
                        for (; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["dtCreatedDate"] == null ? "" : Convert.ToDateTime(dt.Rows[i - inStartIndex]["dtCreatedDate"]).ToString("dd-MM-yyyy"));
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dt.Rows[i - inStartIndex]["LastActivationDate"] == null ? "" : dt.Rows[i - inStartIndex]["LastActivationDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["LastLoginDate"] == null ? "" : dt.Rows[i - inStartIndex]["LastLoginDate"]);
                            worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["DaysFromLastActivation"] != null) ? (dt.Rows[i - inStartIndex]["DaysFromLastActivation"].GetType().Name != "DBNull" ? Convert.ToInt64(dt.Rows[i - inStartIndex]["DaysFromLastActivation"]) : ((long?)null)) : null;
                            worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["DaysFromLastLogin"] != null) ? (dt.Rows[i - inStartIndex]["DaysFromLastLogin"].GetType().Name != "DBNull" ? Convert.ToInt64(dt.Rows[i - inStartIndex]["DaysFromLastLogin"]) : ((long?)null)) : null;
                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUserType"] == null ? "" : dt.Rows[i - inStartIndex]["sUserType"]);

                            if (Convert.ToString(dt.Rows[i - inStartIndex]["Suspended"] == null ? "" : dt.Rows[i - inStartIndex]["Suspended"]) == "Suspended")
                            {
                                worksheet.Cells[inwrkrow, 7].Value = "Suspended";
                                worksheet.Cells[inwrkrow, 7].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Red);
                            }

                            if (dt.Rows[i - inStartIndex]["bIsActive"] != null && Convert.ToBoolean(dt.Rows[i - inStartIndex]["bIsActive"]) == true)
                            {
                                worksheet.Cells[inwrkrow, 8].Value = "Active";
                                worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 8].Value = "In Active";
                                worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Red);
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"] == null ? "" : dt.Rows[i - inStartIndex]["sUsername"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sFullName"] == null ? "" : dt.Rows[i - inStartIndex]["sFullName"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"] == null ? "" : dt.Rows[i - inStartIndex]["sCompName"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dt.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dt.Rows[i - inStartIndex]["FortunePartyCode"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy1"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy2"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy2"]);

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SUNRISE_View"] == null ? "" : dt.Rows[i - inStartIndex]["SUNRISE_View"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SHAIRU_View"] == null ? "" : dt.Rows[i - inStartIndex]["SHAIRU_View"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dt.Rows[i - inStartIndex]["JB_View"] == null ? "" : dt.Rows[i - inStartIndex]["JB_View"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dt.Rows[i - inStartIndex]["RATNA_View"] == null ? "" : dt.Rows[i - inStartIndex]["RATNA_View"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dt.Rows[i - inStartIndex]["KGK_View"] == null ? "" : dt.Rows[i - inStartIndex]["KGK_View"]);
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dt.Rows[i - inStartIndex]["REDEXIM_View"] == null ? "" : dt.Rows[i - inStartIndex]["REDEXIM_View"]);
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dt.Rows[i - inStartIndex]["VENUS_View"] == null ? "" : dt.Rows[i - inStartIndex]["VENUS_View"]);

                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SUNRISE_Download"] == null ? "" : dt.Rows[i - inStartIndex]["SUNRISE_Download"]);
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SHAIRU_Download"] == null ? "" : dt.Rows[i - inStartIndex]["SHAIRU_Download"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dt.Rows[i - inStartIndex]["JB_Download"] == null ? "" : dt.Rows[i - inStartIndex]["JB_Download"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dt.Rows[i - inStartIndex]["RATNA_Download"] == null ? "" : dt.Rows[i - inStartIndex]["RATNA_Download"]);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dt.Rows[i - inStartIndex]["KGK_Download"] == null ? "" : dt.Rows[i - inStartIndex]["KGK_Download"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dt.Rows[i - inStartIndex]["REDEXIM_Download"] == null ? "" : dt.Rows[i - inStartIndex]["REDEXIM_Download"]);
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dt.Rows[i - inStartIndex]["VENUS_Download"] == null ? "" : dt.Rows[i - inStartIndex]["VENUS_Download"]);

                            if (dt.Rows[i - inStartIndex]["iUserType"].ToString() == "3" && (Convert.ToString(dt.Rows[i - inStartIndex]["SupplierId"] == null ? "" : dt.Rows[i - inStartIndex]["SupplierId"]) != ""))
                            {
                                worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SupplierName"] == null ? "" : dt.Rows[i - inStartIndex]["SupplierName"]);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 29].Value = "";
                            }

                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompAddress"] == null ? "" : dt.Rows[i - inStartIndex]["sCompAddress"]);
                            worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompAddress2"] == null ? "" : dt.Rows[i - inStartIndex]["sCompAddress2"]);
                            worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompCity"] == null ? "" : dt.Rows[i - inStartIndex]["sCompCity"]);
                            worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompZipcode"] == null ? "" : dt.Rows[i - inStartIndex]["sCompZipcode"]);
                            worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompCountry"] == null ? "" : dt.Rows[i - inStartIndex]["sCompCountry"]);

                            if (dt.Rows[i - inStartIndex]["sCompMobile"] != null)
                            {
                                values = dt.Rows[i - inStartIndex]["sCompMobile"].ToString().Replace("undefined-", "");
                                values = values.Trim('-').Trim();
                                if (values.Length >= 6)
                                {
                                    success = Int64.TryParse(values, out number);
                                    if (values.IndexOf("+") == -1 && success)
                                    {
                                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToInt64(values);
                                    }
                                    else
                                    {
                                        worksheet.Cells[inwrkrow, 35].Value = values;
                                    }
                                }
                            }

                            if (dt.Rows[i - inStartIndex]["sCompMobile2"] != null)
                            {
                                values = dt.Rows[i - inStartIndex]["sCompMobile2"].ToString().Replace("undefined-", "");
                                values = values.Trim('-').Trim();
                                if (values.Length >= 6)
                                {
                                    success = Int64.TryParse(values, out number);
                                    if (values.IndexOf("+") == -1 && success)
                                    {
                                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToInt64(values);
                                    }
                                    else
                                    {
                                        worksheet.Cells[inwrkrow, 36].Value = values;
                                    }
                                }
                            }

                            if (dt.Rows[i - inStartIndex]["sCompPhone"] != null)
                            {
                                values = dt.Rows[i - inStartIndex]["sCompPhone"].ToString().Replace("undefined-", "");
                                values = values.Trim('-').Trim();
                                if (values.Length >= 6)
                                {
                                    success = Int64.TryParse(values, out number);
                                    if (values.IndexOf("+") == -1 && success)
                                    {
                                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToInt64(values);
                                    }
                                    else
                                    {
                                        worksheet.Cells[inwrkrow, 37].Value = values;
                                    }
                                }
                            }
                            if (dt.Rows[i - inStartIndex]["sCompPhone2"] != null)
                            {
                                values = dt.Rows[i - inStartIndex]["sCompPhone2"].ToString().Replace("undefined-", "");
                                values = values.Trim('-').Trim();
                                if (values.Length >= 6)
                                {
                                    success = Int64.TryParse(values, out number);
                                    if (values.IndexOf("+") == -1 && success)
                                    {
                                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToInt64(values);
                                    }
                                    else
                                    {
                                        worksheet.Cells[inwrkrow, 38].Value = values;
                                    }
                                }
                            }

                            if (dt.Rows[i - inStartIndex]["sCompFaxNo"] != null)
                            {
                                values = dt.Rows[i - inStartIndex]["sCompFaxNo"].ToString().Replace("undefined-", "");
                                values = values.Trim('-').Trim();
                                if (values.Length >= 6)
                                {
                                    success = Int64.TryParse(values, out number);
                                    if (values.IndexOf("+") == -1 && success)
                                    {
                                        worksheet.Cells[inwrkrow, 39].Value = Convert.ToInt64(values);
                                    }
                                    else
                                    {
                                        worksheet.Cells[inwrkrow, 39].Value = values;
                                    }
                                }
                            }

                            worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompEmail"] == null ? "" : dt.Rows[i - inStartIndex]["sCompEmail"]);
                            worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompEmail2"] == null ? "" : dt.Rows[i - inStartIndex]["sCompEmail2"]);
                            worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sWebsite"] == null ? "" : dt.Rows[i - inStartIndex]["sWebsite"]);
                            worksheet.Cells[inwrkrow, 43].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sSkypeId"] == null ? "" : dt.Rows[i - inStartIndex]["sSkypeId"]);
                            worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sWeChatId"] == null ? "" : dt.Rows[i - inStartIndex]["sWeChatId"]);
                            worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompRegNo"] == null ? "" : dt.Rows[i - inStartIndex]["sCompRegNo"]);
                            worksheet.Cells[inwrkrow, 46].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sRapNetId"] == null ? "" : dt.Rows[i - inStartIndex]["sRapNetId"]);

                            if (Convert.ToString(dt.Rows[i - inStartIndex]["IsPrimaryUser"] == null ? "" : dt.Rows[i - inStartIndex]["IsPrimaryUser"]) == "True")
                            {
                                worksheet.Cells[inwrkrow, 47].Value = "Yes";
                                worksheet.Cells[inwrkrow, 47].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 47].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 47].Value = "No";
                                worksheet.Cells[inwrkrow, 47].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 47].Style.Font.Color.SetColor(Color.Red);
                            }
                            if (Convert.ToString(dt.Rows[i - inStartIndex]["SubUserCount"] == null ? "" : dt.Rows[i - inStartIndex]["SubUserCount"]) == "True")
                            {
                                worksheet.Cells[inwrkrow, 48].Value = "Yes";
                                worksheet.Cells[inwrkrow, 48].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 48].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 48].Value = "No";
                                worksheet.Cells[inwrkrow, 48].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 48].Style.Font.Color.SetColor(Color.Red);
                            }

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 48].Style.Font.Size = 9;

                        worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_View);

                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 28].Style.Fill.BackgroundColor.SetColor(colFromHex_Down);

                        removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, inEndCounter, 100].Address);

                        Byte[] bin = p.GetAsByteArray();

                        if (!Directory.Exists(_strFolderPath))
                        {
                            Directory.CreateDirectory(_strFolderPath);
                        }

                        System.IO.File.WriteAllBytes(_strFilePath, bin);
                    }
                }
                else if (iUserType == "2")
                {
                    using (ExcelPackage p = new ExcelPackage())
                    {
                        #region Company Detail on Header

                        p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                        p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                        //Create a sheet
                        p.Workbook.Worksheets.Add("User");

                        ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                        worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                        worksheet.Cells.Style.Font.Size = 11;
                        worksheet.Cells.Style.Font.Name = "Calibri";

                        worksheet.Cells[1, 4].Value = "SUNRISE DIAMONDS PVT. LTD.";
                        worksheet.Cells[1, 4].Style.Font.Size = 24;

                        Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                        worksheet.Row(6).Height = 40;
                        worksheet.Row(6).Style.WrapText = true;

                        worksheet.Cells[2, 4].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                        worksheet.Cells[3, 4].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                        worksheet.Cells[1, 4, 3, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        worksheet.Cells[2, 4, 3, 4].Style.Font.Size = 11;
                        worksheet.Cells[1, 4, 3, 4].Style.Font.Bold = true;
                        worksheet.Cells[1, 4, 3, 4].Style.Font.Color.SetColor(colFromHex_H1);

                        Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                        worksheet.Cells[6, 1, 6, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        worksheet.Cells[6, 1, 6, 32].Style.Font.Size = 10;
                        worksheet.Cells[6, 1, 6, 32].Style.Font.Bold = true;
                        worksheet.Cells[6, 1, 6, 32].AutoFilter = true;
                        worksheet.Cells[6, 1, 6, 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[6, 1, 6, 32].Style.Fill.BackgroundColor.SetColor(colFromHex);

                        #endregion

                        #region Header Name Declaration

                        worksheet.Cells[6, 1].Value = "Created Date";
                        worksheet.Cells[6, 2].Value = "Last Activation Date";
                        worksheet.Cells[6, 3].Value = "Last Login Date";
                        worksheet.Cells[6, 4].Value = "Days from Last Activation";
                        worksheet.Cells[6, 5].Value = "Days from Last Login";
                        worksheet.Cells[6, 6].Value = "User Type";
                        worksheet.Cells[6, 7].Value = "Account Suspended";
                        worksheet.Cells[6, 8].Value = "Status";
                        worksheet.Cells[6, 9].Value = "User Name";
                        worksheet.Cells[6, 10].Value = "Name";
                        worksheet.Cells[6, 11].Value = "Company Name";
                        worksheet.Cells[6, 12].Value = "Fortune Party Code";
                        worksheet.Cells[6, 13].Value = "Assist 1";
                        worksheet.Cells[6, 14].Value = "Assist 2";

                        worksheet.Cells[6, 15].Value = "Sunrise View";
                        worksheet.Cells[6, 16].Value = "Shairu View";
                        worksheet.Cells[6, 17].Value = "JB View";
                        worksheet.Cells[6, 18].Value = "RATNA View";
                        worksheet.Cells[6, 19].Value = "KGK View";
                        worksheet.Cells[6, 20].Value = "REDEXIM View";
                        worksheet.Cells[6, 21].Value = "VENUS View";

                        worksheet.Cells[6, 22].Value = "Sunrise Download";
                        worksheet.Cells[6, 23].Value = "Shairu Download";
                        worksheet.Cells[6, 24].Value = "JB Download";
                        worksheet.Cells[6, 25].Value = "RATNA Download";
                        worksheet.Cells[6, 26].Value = "KGK Download";
                        worksheet.Cells[6, 27].Value = "REDEXIM Download";
                        worksheet.Cells[6, 28].Value = "VENUS Download";

                        worksheet.Cells[6, 29].Value = "Auto Order";
                        worksheet.Cells[6, 30].Value = "Country";
                        worksheet.Cells[6, 31].Value = "Primary User";
                        worksheet.Cells[6, 32].Value = "Sub User";


                        ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 32].Style;
                        cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                                = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                                = ExcelBorderStyle.Medium;

                        #endregion

                        int inStartIndex = 7;
                        int inwrkrow = 7;
                        int inEndCounter = dt.Rows.Count + inStartIndex;
                        int TotalRow = dt.Rows.Count;

                        #region Set AutoFit and Decimal Number Format

                        worksheet.View.FreezePanes(7, 1);
                        worksheet.Cells[6, 1].AutoFitColumns(12);   //Created Date
                        worksheet.Cells[6, 2].AutoFitColumns(12);   //Last Activation Date
                        worksheet.Cells[6, 3].AutoFitColumns(12);   //Last Login Date
                        worksheet.Cells[6, 4].AutoFitColumns(10);   //Days from Last Activation
                        worksheet.Cells[6, 5].AutoFitColumns(10);   //Days from Last Login
                        worksheet.Cells[6, 6].AutoFitColumns(12);   //User Type
                        worksheet.Cells[6, 7].AutoFitColumns(12);   //Account Suspended
                        worksheet.Cells[6, 8].AutoFitColumns(9);   //Status
                        worksheet.Cells[6, 9].AutoFitColumns(18);   //User Name
                        worksheet.Cells[6, 10].AutoFitColumns(20);  //Name
                        worksheet.Cells[6, 11].AutoFitColumns(35);  //Company Name
                        worksheet.Cells[6, 12].AutoFitColumns(10);  //Fortune Party Code
                        worksheet.Cells[6, 13].AutoFitColumns(20);  //Assist 1
                        worksheet.Cells[6, 14].AutoFitColumns(20);  //Assist 2

                        worksheet.Cells[6, 15].AutoFitColumns(9);  //Sunrise View
                        worksheet.Cells[6, 16].AutoFitColumns(9);  //Shairu View
                        worksheet.Cells[6, 17].AutoFitColumns(9);  //JB View
                        worksheet.Cells[6, 18].AutoFitColumns(9);  //RATNA View
                        worksheet.Cells[6, 19].AutoFitColumns(9);  //KGK View
                        worksheet.Cells[6, 20].AutoFitColumns(9);  //REDEXIM View
                        worksheet.Cells[6, 21].AutoFitColumns(9);  //VENUS View

                        worksheet.Cells[6, 22].AutoFitColumns(9);  //Sunrise Download
                        worksheet.Cells[6, 23].AutoFitColumns(9);  //Shairu Download
                        worksheet.Cells[6, 24].AutoFitColumns(9);  //JB Download
                        worksheet.Cells[6, 25].AutoFitColumns(9);  //RATNA Download
                        worksheet.Cells[6, 26].AutoFitColumns(9);  //KGK Download
                        worksheet.Cells[6, 27].AutoFitColumns(9);  //REDEXIM Download
                        worksheet.Cells[6, 28].AutoFitColumns(9);  //VENUS Download

                        worksheet.Cells[6, 29].AutoFitColumns(25);   //Auto Order
                        worksheet.Cells[6, 30].AutoFitColumns(15);  //Country
                        worksheet.Cells[6, 31].AutoFitColumns(8);   //Primary User
                        worksheet.Cells[6, 32].AutoFitColumns(8);   //Sub User

                        worksheet.Cells[6, 1, inEndCounter, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        #endregion

                        string values;
                        Int64 number;
                        bool success;
                        int i = inStartIndex;
                        for (; i < inEndCounter; i++)
                        {
                            #region Assigns Value to Cell

                            worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["dtCreatedDate"] == null ? "" : Convert.ToDateTime(dt.Rows[i - inStartIndex]["dtCreatedDate"]).ToString("dd-MM-yyyy"));
                            worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dt.Rows[i - inStartIndex]["LastActivationDate"] == null ? "" : dt.Rows[i - inStartIndex]["LastActivationDate"]);
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["LastLoginDate"] == null ? "" : dt.Rows[i - inStartIndex]["LastLoginDate"]);
                            worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["DaysFromLastActivation"] != null) ? (dt.Rows[i - inStartIndex]["DaysFromLastActivation"].GetType().Name != "DBNull" ? Convert.ToInt64(dt.Rows[i - inStartIndex]["DaysFromLastActivation"]) : ((long?)null)) : null;
                            worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["DaysFromLastLogin"] != null) ? (dt.Rows[i - inStartIndex]["DaysFromLastLogin"].GetType().Name != "DBNull" ? Convert.ToInt64(dt.Rows[i - inStartIndex]["DaysFromLastLogin"]) : ((long?)null)) : null;
                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUserType"] == null ? "" : dt.Rows[i - inStartIndex]["sUserType"]);

                            if (Convert.ToString(dt.Rows[i - inStartIndex]["Suspended"] == null ? "" : dt.Rows[i - inStartIndex]["Suspended"]) == "Suspended")
                            {
                                worksheet.Cells[inwrkrow, 7].Value = "Suspended";
                                worksheet.Cells[inwrkrow, 7].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 7].Style.Font.Color.SetColor(Color.Red);
                            }

                            if (dt.Rows[i - inStartIndex]["bIsActive"] != null && Convert.ToBoolean(dt.Rows[i - inStartIndex]["bIsActive"]) == true)
                            {
                                worksheet.Cells[inwrkrow, 8].Value = "Active";
                                worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 8].Value = "In Active";
                                worksheet.Cells[inwrkrow, 8].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 8].Style.Font.Color.SetColor(Color.Red);
                            }

                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"] == null ? "" : dt.Rows[i - inStartIndex]["sUsername"]);
                            worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sFullName"] == null ? "" : dt.Rows[i - inStartIndex]["sFullName"]);
                            worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"] == null ? "" : dt.Rows[i - inStartIndex]["sCompName"]);
                            worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dt.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dt.Rows[i - inStartIndex]["FortunePartyCode"]);
                            worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy1"]);
                            worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dt.Rows[i - inStartIndex]["AssistBy2"] == null ? "" : dt.Rows[i - inStartIndex]["AssistBy2"]);

                            worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SUNRISE_View"] == null ? "" : dt.Rows[i - inStartIndex]["SUNRISE_View"]);
                            worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SHAIRU_View"] == null ? "" : dt.Rows[i - inStartIndex]["SHAIRU_View"]);
                            worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dt.Rows[i - inStartIndex]["JB_View"] == null ? "" : dt.Rows[i - inStartIndex]["JB_View"]);
                            worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dt.Rows[i - inStartIndex]["RATNA_View"] == null ? "" : dt.Rows[i - inStartIndex]["RATNA_View"]);
                            worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dt.Rows[i - inStartIndex]["KGK_View"] == null ? "" : dt.Rows[i - inStartIndex]["KGK_View"]);
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dt.Rows[i - inStartIndex]["REDEXIM_View"] == null ? "" : dt.Rows[i - inStartIndex]["REDEXIM_View"]);
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dt.Rows[i - inStartIndex]["VENUS_View"] == null ? "" : dt.Rows[i - inStartIndex]["VENUS_View"]);

                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SUNRISE_Download"] == null ? "" : dt.Rows[i - inStartIndex]["SUNRISE_Download"]);
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SHAIRU_Download"] == null ? "" : dt.Rows[i - inStartIndex]["SHAIRU_Download"]);
                            worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dt.Rows[i - inStartIndex]["JB_Download"] == null ? "" : dt.Rows[i - inStartIndex]["JB_Download"]);
                            worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dt.Rows[i - inStartIndex]["RATNA_Download"] == null ? "" : dt.Rows[i - inStartIndex]["RATNA_Download"]);
                            worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dt.Rows[i - inStartIndex]["KGK_Download"] == null ? "" : dt.Rows[i - inStartIndex]["KGK_Download"]);
                            worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dt.Rows[i - inStartIndex]["REDEXIM_Download"] == null ? "" : dt.Rows[i - inStartIndex]["REDEXIM_Download"]);
                            worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dt.Rows[i - inStartIndex]["VENUS_Download"] == null ? "" : dt.Rows[i - inStartIndex]["VENUS_Download"]);

                            if (dt.Rows[i - inStartIndex]["iUserType"].ToString() == "3" && (Convert.ToString(dt.Rows[i - inStartIndex]["SupplierId"] == null ? "" : dt.Rows[i - inStartIndex]["SupplierId"]) != ""))
                            {
                                worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dt.Rows[i - inStartIndex]["SupplierName"] == null ? "" : dt.Rows[i - inStartIndex]["SupplierName"]);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 29].Value = "";
                            }

                            worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dt.Rows[i - inStartIndex]["sCompCountry"] == null ? "" : dt.Rows[i - inStartIndex]["sCompCountry"]);

                            if (Convert.ToString(dt.Rows[i - inStartIndex]["IsPrimaryUser"] == null ? "" : dt.Rows[i - inStartIndex]["IsPrimaryUser"]) == "True")
                            {
                                worksheet.Cells[inwrkrow, 31].Value = "Yes";
                                worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 31].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 31].Value = "No";
                                worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 31].Style.Font.Color.SetColor(Color.Red);
                            }
                            if (Convert.ToString(dt.Rows[i - inStartIndex]["SubUserCount"] == null ? "" : dt.Rows[i - inStartIndex]["SubUserCount"]) == "True")
                            {
                                worksheet.Cells[inwrkrow, 32].Value = "Yes";
                                worksheet.Cells[inwrkrow, 32].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 32].Style.Font.Color.SetColor(Color.Green);
                            }
                            else
                            {
                                worksheet.Cells[inwrkrow, 32].Value = "No";
                                worksheet.Cells[inwrkrow, 32].Style.Font.Bold = true;
                                worksheet.Cells[inwrkrow, 32].Style.Font.Color.SetColor(Color.Red);
                            }

                            inwrkrow++;

                            #endregion
                        }

                        worksheet.Cells[inStartIndex, 1, inEndCounter, 32].Style.Font.Size = 9;

                        worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_View);

                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 28].Style.Fill.BackgroundColor.SetColor(colFromHex_Down);

                        removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, inEndCounter, 100].Address);

                        Byte[] bin = p.GetAsByteArray();

                        if (!Directory.Exists(_strFolderPath))
                        {
                            Directory.CreateDirectory(_strFolderPath);
                        }

                        System.IO.File.WriteAllBytes(_strFilePath, bin);
                    }
                }
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
                throw ex;
            }
        }

        private static void removingGreenTagWarning(ExcelWorksheet template1, string address)
        {
            var xdoc = template1.WorksheetXml;
            //Create the import nodes (note the plural vs singular
            var ignoredErrors = xdoc.CreateNode(System.Xml.XmlNodeType.Element, "ignoredErrors", xdoc.DocumentElement.NamespaceURI);
            var ignoredError = xdoc.CreateNode(System.Xml.XmlNodeType.Element, "ignoredError", xdoc.DocumentElement.NamespaceURI);
            ignoredErrors.AppendChild(ignoredError);

            //Attributes for the INNER node
            var sqrefAtt = xdoc.CreateAttribute("sqref");
            sqrefAtt.Value = address;// Or whatever range is needed....

            var flagAtt = xdoc.CreateAttribute("numberStoredAsText");
            flagAtt.Value = "1";

            ignoredError.Attributes.Append(sqrefAtt);
            ignoredError.Attributes.Append(flagAtt);

            //Now put the OUTER node into the worksheet xml
            xdoc.LastChild.AppendChild(ignoredErrors);
        }

        public virtual void CreateExcel(System.IO.Stream ms, String TempFolderPath)
        {
            this.PrepareExcel(ms, TempFolderPath);
            this.Save();
        }

        public virtual void CreateExcel(System.IO.Stream ms, String TempFolderPath, int iTransId)
        {
            this.PrepareExcel(ms, TempFolderPath, iTransId);
            this.Save();
        }

        public virtual void PrepareExcel(System.IO.Stream ms, String TempFolderPath)
        {
            try
            {
                //String xFileName = TempFolderPath + System.DateTime.Now.ToString("ddMMyyyy-HHmmss-fffffff") + ".xlsx";

                Random rnd = new Random();
                String xFileName = TempFolderPath + rnd.Next().ToString() + ".xlsx";

                try
                {
                    if (System.IO.File.Exists(xFileName))
                        System.IO.File.Delete(xFileName);
                }
                catch (Exception) { }

                System.IO.FileInfo x = new FileInfo(xFileName);
                MemoryStream tmpMs = new MemoryStream();
                //RJCHECK
                //using (ExcelPackage package = new ExcelPackage(tmpMs))
                using (ExcelPackage package = new ExcelPackage(x))
                {
                    _worksheet = package.Workbook.Worksheets.Add(_SheetName);
                    CurrentRowCount = 0;
                    List<ExcelColumn> columns1 = new List<ExcelColumn>();
                    this.AllColumns = new List<ExcelHeader>();
                    this.AddColumnDef(this.AllColumns);
                    List<string> collist = new List<string>();
                    StyleList = new SortedList<UInt32, ExcelFormat>();
                    ///priyanka on date [24-Oct-16]
                    //for (int i = 0; i < this.AllColumns.Count; i++)
                    //{
                    //    ExcelHeader h = this.AllColumns[i];
                    //    if (h.visible == true)
                    //    {

                    //        if (h.Width > 0)
                    //        {

                    //            this._worksheet.Column(h.ColInd).Width = h.Width;
                    //            this._worksheet.Column(h.ColInd).ColumnMax = h.ColInd;
                    //        }


                    //        fistColAdded = true;
                    //        string colName = h.Caption;

                    //        if (collist.Contains(h.Caption))
                    //        {
                    //            colName = colName + (collist.Count + 1).ToString();
                    //        }

                    //        collist.Add(colName);

                    //        ExcelCellFormat f = new ExcelCellFormat();
                    //        f.Format = h.NumFormat;
                    //    }
                    //}

                    // TableHeaderStartRow = (int)CurrentRowCount;
                    /////priyanka on date [24-Oct-16] end//
                    setDefaultStyleIndex();

                    FillingWorksheetEventArgs e = new FillingWorksheetEventArgs(_worksheet, null);
                    RaiseFillingWorksheet(e);

                    this.CreateHeader(e);

                    if (this._worksheet.Cells.Count() > 0)
                    {
                        CurrentRowCount = Convert.ToUInt32(this._worksheet.Cells.LastOrDefault().Start.Row + 1);
                        // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                        // Freeze Header Row when Export 
                        int HeaderRowCount = (int)CurrentRowCount + 1;
                        this._worksheet.View.FreezePanes(HeaderRowCount, 1);
                        // End By Hitesh on [31-03-2016] as per [Doc No 201]
                    }

                    //sET CurrentRowCount

                    String StartAddr = "";
                    String EndArre = "";

                    for (int i = 0; i < AllColumns.Count; i++)
                    {
                        ExcelHeader h = AllColumns[i];
                        ///priyanka on date [24-Oct-16]
                        if (h.visible == true)
                        {
                            // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                            VisibleColumn += 1;
                            // End By Hitesh on [31-03-2016] as per [Doc No 201]
                            if (h.Width > 0)
                            {

                                this._worksheet.Column(h.ColInd).Width = h.Width;
                                this._worksheet.Column(h.ColInd).ColumnMax = h.ColInd;
                            }

                            string colName = h.Caption;

                            if (collist.Contains(h.Caption))
                            {
                                colName = colName + (collist.Count + 1).ToString();
                            }

                            collist.Add(colName);

                            ExcelCellFormat f = new ExcelCellFormat();
                            f.Format = h.NumFormat;
                            ///priyanka on date [24-Oct-16] end//
                            string colname = GetColumnAlphaIndex(h.ColInd);
                            //string colname = GetColumnAlphaIndex(i + 1);

                            BeforeCreateCellEventArgs CellArgs = new BeforeCreateCellEventArgs();
                            CellArgs.ColDataType = this.AllColumns[i].ColDataType;
                            CellArgs.ta = TableArea.Detail;

                            RaiseBeforeCreateCellEvent(CellArgs);

                            //Cell c = this.InsertCellInRow(sheetData1, row1, colname + (row1.RowIndex).ToString());

                            ExcelCellFormat cf = new ExcelCellFormat();

                            ExcelRange c = this._worksheet.Cells[colname + (this.CurrentRowCount).ToString()];

                            if (h.Width <= 0)
                            {
                                c.AutoFitColumns();
                            }

                            //cf.ul = DocumentFormat.OpenXml.Spreadsheet.UnderlineValues.None;

                            //ExcelRange c = this._worksheet.Cells[colname + (row1.RowIndex)].ToString();

                            SetCellValue(c, h.Caption);

                            cf.tableArea = TableArea.Header;
                            cf.HeaderStartRow = TableHeaderStartRow;
                            cf.ColumnName = h.Caption;
                            cf.Format = h.NumFormat;
                            cf.HorizontalAllign = h.HorizontalAllign;
                            cf.VerticalAllign = h.VerticalAllign;
                            string prevtext = cf.ColumnName;
                            cf.Text = prevtext;

                            RaiseAfterCreateCellEvent(ref cf);

                            ApplyStyle(this._worksheet, c, cf);

                            //if (cf.Formula != null && cf.Formula.Length > 0)
                            //{
                            //    CellFormula cfor = new CellFormula();
                            //    cfor.FormulaType = CellFormulaValues.Normal;
                            //    cfor.Text = cf.Formula;
                            //    c.Append(cfor);
                            //}

                            if (cf.Text != null && cf.Text != prevtext)
                            {
                                SetCellValue(c, cf.Text);
                            }

                            if (StartAddr == "")
                                StartAddr = c.Address;

                            EndArre = c.Address;
                            //
                        }
                    }


                    this._worksheet.Cells[StartAddr + ":" + EndArre].AutoFilter = true;

                    e.StartrowCount = 0;

                    TableDetailStartRow = (int)CurrentRowCount + 1;
                    CreateDetail(e);

                    TableFooterStartRow = (int)CurrentRowCount + 1;
                    CreateFooter(e);

                    // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                    // Add For AutoFit Column
                    //this._worksheet.Cells[(TableDetailStartRow - 1), 1, (TableFooterStartRow), VisibleColumn].AutoFitColumns();
                    // Add For Cell Border
                    this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    // End By Hitesh on [31-03-2016] as per [Doc No 201]
                    ///priyanka on date [24-Oct-16]
                    //this._worksheet.Workbook.Styles.UpdateXml();
                    //_worksheet.Workbook.Calculate();
                    ///priyanka on date [24-Oct-16] end//
                    //_worksheet.Cells[this.TableHeaderStartRow,0].AutoFilter = true;

                    //_worksheet.InsertRow(1, 1, 1);
                    //_worksheet.Cells.AutoFitColumns(0);  //Autofit columns for all cells

                    //RJCHECK
                    //_worksheet.Calculate();
                    //this._worksheet.Workbook.Calculate();
                    ////package.Save();
                    //ResAry = package.GetAsByteArray();
                    package.Save();
                }

                byte[] byteDatan = System.IO.File.ReadAllBytes(xFileName);

                try
                {
                    if (System.IO.File.Exists(xFileName))
                        System.IO.File.Delete(xFileName);
                }
                catch (Exception) { }

                ms.Write(byteDatan, 0, byteDatan.Length);
                ms.Flush();
                ms.Position = 0;

                //System.IO.MemoryStream RetMs = new System.IO.MemoryStream();

                //RJCHECK
                //byte[] byteDatan = ResAry;
                //ms.Write(byteDatan, 0, byteDatan.Length);
                //ms.Flush();
                //ms.Position = 0;
            }
            catch (Exception ex)
            {
                DAL.Common.InsertErrorLog(ex, null, null);
            }
        }

        public virtual void PrepareExcel(System.IO.Stream ms, String TempFolderPath, int iTransId)
        {
            //String xFileName = TempFolderPath + System.DateTime.Now.ToString("ddMMyyyy-HHmmss-fffffff") + ".xlsx";

            Random rnd = new Random();
            String xFileName = TempFolderPath + rnd.Next().ToString() + ".xlsx";


            System.IO.FileInfo x = new FileInfo(xFileName);
            MemoryStream tmpMs = new MemoryStream();
            //RJCHECK
            //using (ExcelPackage package = new ExcelPackage(tmpMs))
            using (ExcelPackage package = new ExcelPackage(x))
            {
                _worksheet = package.Workbook.Worksheets.Add(_SheetName);
                CurrentRowCount = 0;
                List<ExcelColumn> columns1 = new List<ExcelColumn>();
                this.AllColumns = new List<ExcelHeader>();
                this.AddColumnDef(this.AllColumns, iTransId);
                List<string> collist = new List<string>();
                StyleList = new SortedList<UInt32, ExcelFormat>();
                ///priyanka on date [24-Oct-16]
                //for (int i = 0; i < this.AllColumns.Count; i++)
                //{
                //    ExcelHeader h = this.AllColumns[i];
                //    if (h.visible == true)
                //    {

                //        if (h.Width > 0)
                //        {

                //            this._worksheet.Column(h.ColInd).Width = h.Width;
                //            this._worksheet.Column(h.ColInd).ColumnMax = h.ColInd;
                //        }


                //        fistColAdded = true;
                //        string colName = h.Caption;

                //        if (collist.Contains(h.Caption))
                //        {
                //            colName = colName + (collist.Count + 1).ToString();
                //        }

                //        collist.Add(colName);

                //        ExcelCellFormat f = new ExcelCellFormat();
                //        f.Format = h.NumFormat;
                //    }
                //}

                // TableHeaderStartRow = (int)CurrentRowCount;
                /////priyanka on date [24-Oct-16] end//
                setDefaultStyleIndex();

                FillingWorksheetEventArgs e = new FillingWorksheetEventArgs(_worksheet, null);
                RaiseFillingWorksheet(e);

                this.CreateHeader(e);

                if (this._worksheet.Cells.Count() > 0)
                {
                    CurrentRowCount = Convert.ToUInt32(this._worksheet.Cells.LastOrDefault().Start.Row + 1);
                    // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                    // Freeze Header Row when Export 
                    int HeaderRowCount = (int)CurrentRowCount + 1;
                    this._worksheet.View.FreezePanes(HeaderRowCount, 1);
                    // End By Hitesh on [31-03-2016] as per [Doc No 201]
                }

                //sET CurrentRowCount

                String StartAddr = "";
                String EndArre = "";

                for (int i = 0; i < AllColumns.Count; i++)
                {
                    ExcelHeader h = AllColumns[i];
                    ///priyanka on date [24-Oct-16]
                    if (h.visible == true)
                    {
                        // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                        VisibleColumn += 1;
                        // End By Hitesh on [31-03-2016] as per [Doc No 201]
                        if (h.Width > 0)
                        {

                            this._worksheet.Column(h.ColInd).Width = h.Width;
                            this._worksheet.Column(h.ColInd).ColumnMax = h.ColInd;
                        }

                        string colName = h.Caption;

                        if (collist.Contains(h.Caption))
                        {
                            colName = colName + (collist.Count + 1).ToString();
                        }

                        collist.Add(colName);

                        ExcelCellFormat f = new ExcelCellFormat();
                        f.Format = h.NumFormat;
                        ///priyanka on date [24-Oct-16] end//
                        string colname = GetColumnAlphaIndex(h.ColInd);
                        //string colname = GetColumnAlphaIndex(i + 1);

                        BeforeCreateCellEventArgs CellArgs = new BeforeCreateCellEventArgs();
                        CellArgs.ColDataType = this.AllColumns[i].ColDataType;
                        CellArgs.ta = TableArea.Detail;

                        RaiseBeforeCreateCellEvent(CellArgs);

                        //Cell c = this.InsertCellInRow(sheetData1, row1, colname + (row1.RowIndex).ToString());

                        ExcelCellFormat cf = new ExcelCellFormat();

                        ExcelRange c = this._worksheet.Cells[colname + (this.CurrentRowCount).ToString()];

                        if (h.Width <= 0)
                        {
                            c.AutoFitColumns();
                        }

                        //cf.ul = DocumentFormat.OpenXml.Spreadsheet.UnderlineValues.None;

                        //ExcelRange c = this._worksheet.Cells[colname + (row1.RowIndex)].ToString();

                        SetCellValue(c, h.Caption);

                        cf.tableArea = TableArea.Header;
                        cf.HeaderStartRow = TableHeaderStartRow;
                        cf.ColumnName = h.Caption;
                        cf.Format = h.NumFormat;
                        cf.HorizontalAllign = h.HorizontalAllign;
                        cf.VerticalAllign = h.VerticalAllign;
                        string prevtext = cf.ColumnName;
                        cf.Text = prevtext;

                        RaiseAfterCreateCellEvent(ref cf);

                        ApplyStyle(this._worksheet, c, cf);

                        //if (cf.Formula != null && cf.Formula.Length > 0)
                        //{
                        //    CellFormula cfor = new CellFormula();
                        //    cfor.FormulaType = CellFormulaValues.Normal;
                        //    cfor.Text = cf.Formula;
                        //    c.Append(cfor);
                        //}

                        if (cf.Text != null && cf.Text != prevtext)
                        {
                            SetCellValue(c, cf.Text);
                        }

                        if (StartAddr == "")
                            StartAddr = c.Address;

                        EndArre = c.Address;
                        //
                    }
                }


                this._worksheet.Cells[StartAddr + ":" + EndArre].AutoFilter = true;

                e.StartrowCount = 0;

                TableDetailStartRow = (int)CurrentRowCount + 1;
                CreateDetail(e);

                TableFooterStartRow = (int)CurrentRowCount + 1;
                CreateFooter(e);

                // Change By Hitesh on [31-03-2016] as per [Doc No 201]
                // Add For AutoFit Column
                //this._worksheet.Cells[(TableDetailStartRow - 1), 1, (TableFooterStartRow), VisibleColumn].AutoFitColumns();
                // Add For Cell Border
                this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                this._worksheet.Cells[(TableDetailStartRow - 1), 1, (int)CurrentRowCount, VisibleColumn].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                // End By Hitesh on [31-03-2016] as per [Doc No 201]
                ///priyanka on date [24-Oct-16]
                //this._worksheet.Workbook.Styles.UpdateXml();
                //_worksheet.Workbook.Calculate();
                ///priyanka on date [24-Oct-16] end//
                //_worksheet.Cells[this.TableHeaderStartRow,0].AutoFilter = true;

                //_worksheet.InsertRow(1, 1, 1);
                //_worksheet.Cells.AutoFitColumns(0);  //Autofit columns for all cells

                //RJCHECK
                //_worksheet.Calculate();
                //this._worksheet.Workbook.Calculate();
                ////package.Save();
                //ResAry = package.GetAsByteArray();
                package.Save();
            }

            byte[] byteDatan = System.IO.File.ReadAllBytes(xFileName);

            try
            {
                if (System.IO.File.Exists(xFileName))
                    System.IO.File.Delete(xFileName);
            }
            catch (Exception) { }

            ms.Write(byteDatan, 0, byteDatan.Length);
            ms.Flush();
            ms.Position = 0;

            //System.IO.MemoryStream RetMs = new System.IO.MemoryStream();

            //RJCHECK
            //byte[] byteDatan = ResAry;
            //ms.Write(byteDatan, 0, byteDatan.Length);
            //ms.Flush();
            //ms.Position = 0;
        }

        public static void CreateCustomerExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 37].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 37].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 37].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 37].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(9);
                worksheet.Cells[6, 5].AutoFitColumns(9);
                worksheet.Cells[6, 6].AutoFitColumns(8);
                worksheet.Cells[6, 7].AutoFitColumns(8);
                worksheet.Cells[6, 8].AutoFitColumns(8);
                worksheet.Cells[6, 9].AutoFitColumns(11);
                worksheet.Cells[6, 10].AutoFitColumns(11);
                worksheet.Cells[6, 11].AutoFitColumns(10.5);
                worksheet.Cells[6, 12].AutoFitColumns(11.5);
                worksheet.Cells[6, 13].AutoFitColumns(8);
                worksheet.Cells[6, 14].AutoFitColumns(8);
                worksheet.Cells[6, 15].AutoFitColumns(8);
                worksheet.Cells[6, 16].AutoFitColumns(8);
                worksheet.Cells[6, 17].AutoFitColumns(8);
                worksheet.Cells[6, 18].AutoFitColumns(8);
                worksheet.Cells[6, 19].AutoFitColumns(8);
                worksheet.Cells[6, 20].AutoFitColumns(8);
                worksheet.Cells[6, 21].AutoFitColumns(8);
                worksheet.Cells[6, 22].AutoFitColumns(25);
                worksheet.Cells[6, 23].AutoFitColumns(25);
                worksheet.Cells[6, 24].AutoFitColumns(8);
                worksheet.Cells[6, 25].AutoFitColumns(8);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(8);
                worksheet.Cells[6, 32].AutoFitColumns(8);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);


                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "Shape";
                worksheet.Cells[6, 4].Value = "Pointer";
                worksheet.Cells[6, 5].Value = "BGM";
                worksheet.Cells[6, 6].Value = "Color";
                worksheet.Cells[6, 7].Value = "Clarity";
                worksheet.Cells[6, 8].Value = "Cts";
                worksheet.Cells[6, 9].Value = "Rap Rate";
                worksheet.Cells[6, 10].Value = "Rap Value";
                worksheet.Cells[6, 11].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 12].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 13].Value = "Cut";
                worksheet.Cells[6, 14].Value = "Polish";
                worksheet.Cells[6, 15].Value = "Symm";
                worksheet.Cells[6, 16].Value = "Fls";
                worksheet.Cells[6, 17].Value = "Length";
                worksheet.Cells[6, 18].Value = "Width";
                worksheet.Cells[6, 19].Value = "Depth";
                worksheet.Cells[6, 20].Value = "Depth(%)";
                worksheet.Cells[6, 21].Value = "Table(%)";
                worksheet.Cells[6, 22].Value = "Key to Symbol";
                worksheet.Cells[6, 23].Value = "Gia Lab Comment";
                worksheet.Cells[6, 24].Value = "Girdle(%)";
                worksheet.Cells[6, 25].Value = "Crown Angle";
                worksheet.Cells[6, 26].Value = "Crown Height";
                worksheet.Cells[6, 27].Value = "Pav Angle";
                worksheet.Cells[6, 28].Value = "Pav Height";
                worksheet.Cells[6, 29].Value = "Table Natts";
                worksheet.Cells[6, 30].Value = "Crown Natts";
                worksheet.Cells[6, 31].Value = "Table Inclusion";
                worksheet.Cells[6, 32].Value = "Crown Inclusion";
                worksheet.Cells[6, 33].Value = "Culet";
                worksheet.Cells[6, 34].Value = "Table Open";
                worksheet.Cells[6, 35].Value = "Girdle Open";
                worksheet.Cells[6, 36].Value = "Crown Open";
                worksheet.Cells[6, 37].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["pointer"] != null) ? (dt.Rows[i - inStartIndex]["pointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["pointer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sales_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["sales_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["sales_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Formula = "=(1-L" + inwrkrow + "/J" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 13].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 14].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 22].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 23].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 37].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 37].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(cellBg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 37].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 8].Formula = "=SUBTOTAL(109,H" + inStartIndex + ":H" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 11].Formula = "=((1 - (SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")/SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 8, i, 12].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 17, i, 21].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 24, i, 28].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 10].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                Byte[] bin = p.GetAsByteArray();
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateCustomerImageExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 39].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 39].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 39].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 39].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(10);
                worksheet.Cells[6, 5].AutoFitColumns(10);
                worksheet.Cells[6, 6].AutoFitColumns(9);
                worksheet.Cells[6, 7].AutoFitColumns(9);
                worksheet.Cells[6, 8].AutoFitColumns(8);
                worksheet.Cells[6, 9].AutoFitColumns(8);
                worksheet.Cells[6, 10].AutoFitColumns(8);
                worksheet.Cells[6, 11].AutoFitColumns(11);
                worksheet.Cells[6, 12].AutoFitColumns(11);
                worksheet.Cells[6, 13].AutoFitColumns(10.5);
                worksheet.Cells[6, 14].AutoFitColumns(11.5);
                worksheet.Cells[6, 15].AutoFitColumns(8);
                worksheet.Cells[6, 16].AutoFitColumns(8);
                worksheet.Cells[6, 17].AutoFitColumns(8);
                worksheet.Cells[6, 18].AutoFitColumns(8);
                worksheet.Cells[6, 19].AutoFitColumns(8);
                worksheet.Cells[6, 20].AutoFitColumns(8);
                worksheet.Cells[6, 21].AutoFitColumns(8);
                worksheet.Cells[6, 22].AutoFitColumns(8);
                worksheet.Cells[6, 23].AutoFitColumns(8);
                worksheet.Cells[6, 24].AutoFitColumns(25);
                worksheet.Cells[6, 25].AutoFitColumns(25);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(8);
                worksheet.Cells[6, 32].AutoFitColumns(8);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);
                worksheet.Cells[6, 38].AutoFitColumns(8);
                worksheet.Cells[6, 39].AutoFitColumns(8);



                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "HD Image";
                worksheet.Cells[6, 4].Value = "HD Video";
                worksheet.Cells[6, 5].Value = "Shape";
                worksheet.Cells[6, 6].Value = "Pointer";
                worksheet.Cells[6, 7].Value = "BGM";
                worksheet.Cells[6, 8].Value = "Color";
                worksheet.Cells[6, 9].Value = "Clarity";
                worksheet.Cells[6, 10].Value = "Cts";
                worksheet.Cells[6, 11].Value = "Rap Rate";
                worksheet.Cells[6, 12].Value = "Rap Value";
                worksheet.Cells[6, 13].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 14].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 15].Value = "Cut";
                worksheet.Cells[6, 16].Value = "Polish";
                worksheet.Cells[6, 17].Value = "Symm";
                worksheet.Cells[6, 18].Value = "Fls";
                worksheet.Cells[6, 19].Value = "Length";
                worksheet.Cells[6, 20].Value = "Width";
                worksheet.Cells[6, 21].Value = "Depth";
                worksheet.Cells[6, 22].Value = "Depth(%)";
                worksheet.Cells[6, 23].Value = "Table(%)";
                worksheet.Cells[6, 24].Value = "Key to Symbol";
                worksheet.Cells[6, 25].Value = "Gia Lab Comment";
                worksheet.Cells[6, 26].Value = "Girdle(%)";
                worksheet.Cells[6, 27].Value = "Crown Angle";
                worksheet.Cells[6, 28].Value = "Crown Height";
                worksheet.Cells[6, 29].Value = "Pav Angle";
                worksheet.Cells[6, 30].Value = "Pav Height";
                worksheet.Cells[6, 31].Value = "Table Natts";
                worksheet.Cells[6, 32].Value = "Crown Natts";
                worksheet.Cells[6, 33].Value = "Table Inclusion";
                worksheet.Cells[6, 34].Value = "Crown Inclusion";
                worksheet.Cells[6, 35].Value = "Culet";
                worksheet.Cells[6, 36].Value = "Table Open";
                worksheet.Cells[6, 37].Value = "Girdle Open";
                worksheet.Cells[6, 38].Value = "Crown Open";
                worksheet.Cells[6, 39].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Movie \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["pointer"] != null) ? (dt.Rows[i - inStartIndex]["pointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["pointer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sales_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["sales_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["sales_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 13].Formula = "=(1-N" + inwrkrow + "/L" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 16].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 17].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 24].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 25].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 39].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 39].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(cellBg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 39].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 13].Formula = "=((1 - (SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")/SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 14].Formula = "=SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 10, i, 14].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 19, i, 23].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 26, i, 30].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 14].Style.Numberformat.Format = "#,##0";
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateSupplierExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 46].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 46].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 46].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 46].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(10);
                worksheet.Cells[6, 5].AutoFitColumns(15);
                worksheet.Cells[6, 6].AutoFitColumns(12);
                worksheet.Cells[6, 7].AutoFitColumns(12);
                worksheet.Cells[6, 8].AutoFitColumns(10);
                worksheet.Cells[6, 9].AutoFitColumns(9);
                worksheet.Cells[6, 10].AutoFitColumns(9);
                worksheet.Cells[6, 11].AutoFitColumns(8);
                worksheet.Cells[6, 12].AutoFitColumns(8);
                worksheet.Cells[6, 13].AutoFitColumns(8);
                worksheet.Cells[6, 14].AutoFitColumns(11);
                worksheet.Cells[6, 15].AutoFitColumns(11);
                worksheet.Cells[6, 16].AutoFitColumns(11.5);
                worksheet.Cells[6, 17].AutoFitColumns(11.5);
                worksheet.Cells[6, 18].AutoFitColumns(10.5);
                worksheet.Cells[6, 19].AutoFitColumns(11.5);
                worksheet.Cells[6, 20].AutoFitColumns(11.5);
                worksheet.Cells[6, 21].AutoFitColumns(11.5);
                worksheet.Cells[6, 22].AutoFitColumns(8);
                worksheet.Cells[6, 23].AutoFitColumns(8);
                worksheet.Cells[6, 24].AutoFitColumns(8);
                worksheet.Cells[6, 25].AutoFitColumns(8);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(25);
                worksheet.Cells[6, 32].AutoFitColumns(25);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);
                worksheet.Cells[6, 38].AutoFitColumns(8);
                worksheet.Cells[6, 39].AutoFitColumns(8);
                worksheet.Cells[6, 40].AutoFitColumns(8);
                worksheet.Cells[6, 41].AutoFitColumns(8);
                worksheet.Cells[6, 42].AutoFitColumns(8);
                worksheet.Cells[6, 43].AutoFitColumns(8);
                worksheet.Cells[6, 44].AutoFitColumns(8);
                worksheet.Cells[6, 45].AutoFitColumns(8);
                worksheet.Cells[6, 46].AutoFitColumns(8);


                //worksheet.Cells[6, 42].AutoFitColumns(10);

                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "HD Image";
                worksheet.Cells[6, 4].Value = "HD Video";
                worksheet.Cells[6, 5].Value = "Supplier Stock ID";
                worksheet.Cells[6, 6].Value = "Certi No";
                worksheet.Cells[6, 7].Value = "Supplier";
                worksheet.Cells[6, 8].Value = "Shape";
                worksheet.Cells[6, 9].Value = "Pointer";
                worksheet.Cells[6, 10].Value = "BGM";
                worksheet.Cells[6, 11].Value = "Color";
                worksheet.Cells[6, 12].Value = "Clarity";
                worksheet.Cells[6, 13].Value = "Cts";
                worksheet.Cells[6, 14].Value = "Rap Rate";
                worksheet.Cells[6, 15].Value = "Rap Value";
                worksheet.Cells[6, 16].Value = "Supplier Cost Disc(%)";
                worksheet.Cells[6, 17].Value = "Supplier Cost Value";
                worksheet.Cells[6, 18].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 19].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 20].Value = "Supp Base Offer(%)";
                worksheet.Cells[6, 21].Value = "Supp Base Offer Value";
                worksheet.Cells[6, 22].Value = "Cut";
                worksheet.Cells[6, 23].Value = "Polish";
                worksheet.Cells[6, 24].Value = "Symm";
                worksheet.Cells[6, 25].Value = "Fls";
                worksheet.Cells[6, 26].Value = "Length";
                worksheet.Cells[6, 27].Value = "Width";
                worksheet.Cells[6, 28].Value = "Depth";
                worksheet.Cells[6, 29].Value = "Depth(%)";
                worksheet.Cells[6, 30].Value = "Table(%)";
                worksheet.Cells[6, 31].Value = "Key to Symbol";
                worksheet.Cells[6, 32].Value = "Gia Lab Comment";
                worksheet.Cells[6, 33].Value = "Girdle(%)";
                worksheet.Cells[6, 34].Value = "Crown Angle";
                worksheet.Cells[6, 35].Value = "Crown Height";
                worksheet.Cells[6, 36].Value = "Pav Angle";
                worksheet.Cells[6, 37].Value = "Pav Height";
                worksheet.Cells[6, 38].Value = "Table Natts";
                worksheet.Cells[6, 39].Value = "Crown Natts";
                worksheet.Cells[6, 40].Value = "Table Inclusion";
                worksheet.Cells[6, 41].Value = "Crown Inclusion";
                worksheet.Cells[6, 42].Value = "Culet";
                worksheet.Cells[6, 43].Value = "Table Open";
                worksheet.Cells[6, 44].Value = "Girdle Open";
                worksheet.Cells[6, 45].Value = "Crown Open";
                worksheet.Cells[6, 46].Value = "Pavilion Open";

                //worksheet.Cells[6, 42].Value = "Dna";
                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color cellBg1 = System.Drawing.ColorTranslator.FromHtml("#ff99cc");
                int i = 0;
                string values_2, cut;
                Int64 number_2;
                bool success2;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell

                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Movie \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"] != null)
                    {
                        if (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"].GetType().Name != "DBNull")
                            values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                        else
                            values_2 = "";
                    }
                    else
                    {
                        values_2 = "";
                    }
                    success2 = Int64.TryParse(values_2, out number_2);
                    if (success2)
                    {
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 5].Value = values_2;
                    }

                    if (dt.Rows[i - inStartIndex]["CERTI_NO"] != null)
                    {
                        if (dt.Rows[i - inStartIndex]["CERTI_NO"].GetType().Name != "DBNull")
                            values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                        else
                            values_2 = "";
                    }
                    else
                    {
                        values_2 = "";
                    }
                    success2 = Int64.TryParse(values_2, out number_2);
                    if (success2)
                    {
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 6].Value = values_2;
                    }

                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PARTY_NAME"] != null) ? (dt.Rows[i - inStartIndex]["PARTY_NAME"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_NAME"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["pointer"] != null) ? (dt.Rows[i - inStartIndex]["pointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["pointer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["OFFER_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["OFFER_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["OFFER_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 18].Formula = "=(1-S" + inwrkrow + "/O" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : 0) : 0;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : 0) : 0;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : (Decimal?)null) : null;
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 43].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 44].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 45].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 46].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    //worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["DNA_PATH"] != null) ? (dt.Rows[i - inStartIndex]["DNA_PATH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["DNA_PATH"]) : "") : "";

                    worksheet.Cells[inwrkrow, 31].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 32].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Fill.BackgroundColor.SetColor(cellBg1);

                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(cellBg);

                worksheet.Cells[5, 1, 5, 46].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 46].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 46].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 13].Formula = "=SUBTOTAL(109,M" + inStartIndex + ":M" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 15].Formula = "=SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 16].Formula = "=((1 - (SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 17].Formula = "=SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 18].Formula = "=((1 - (SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 19].Formula = "=SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 20].Formula = "=((1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 21].Formula = "=SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 13, i, 21].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 26, i, 30].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 33, i, 37].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateLabCustomerExcel_OLD(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 37].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 37].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 37].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 37].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(9);
                worksheet.Cells[6, 5].AutoFitColumns(9);
                worksheet.Cells[6, 6].AutoFitColumns(8);
                worksheet.Cells[6, 7].AutoFitColumns(8);
                worksheet.Cells[6, 8].AutoFitColumns(8);
                worksheet.Cells[6, 9].AutoFitColumns(11);
                worksheet.Cells[6, 10].AutoFitColumns(11);
                worksheet.Cells[6, 11].AutoFitColumns(10.5);
                worksheet.Cells[6, 12].AutoFitColumns(11.5);
                worksheet.Cells[6, 13].AutoFitColumns(8);
                worksheet.Cells[6, 14].AutoFitColumns(8);
                worksheet.Cells[6, 15].AutoFitColumns(8);
                worksheet.Cells[6, 16].AutoFitColumns(8);
                worksheet.Cells[6, 17].AutoFitColumns(8);
                worksheet.Cells[6, 18].AutoFitColumns(8);
                worksheet.Cells[6, 19].AutoFitColumns(8);
                worksheet.Cells[6, 20].AutoFitColumns(8);
                worksheet.Cells[6, 21].AutoFitColumns(8);
                worksheet.Cells[6, 22].AutoFitColumns(25);
                worksheet.Cells[6, 23].AutoFitColumns(25);
                worksheet.Cells[6, 24].AutoFitColumns(8);
                worksheet.Cells[6, 25].AutoFitColumns(8);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(8);
                worksheet.Cells[6, 32].AutoFitColumns(8);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);


                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "Shape";
                worksheet.Cells[6, 4].Value = "Pointer";
                worksheet.Cells[6, 5].Value = "BGM";
                worksheet.Cells[6, 6].Value = "Color";
                worksheet.Cells[6, 7].Value = "Clarity";
                worksheet.Cells[6, 8].Value = "Cts";
                worksheet.Cells[6, 9].Value = "Rap Rate";
                worksheet.Cells[6, 10].Value = "Rap Value";
                worksheet.Cells[6, 11].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 12].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 13].Value = "Cut";
                worksheet.Cells[6, 14].Value = "Polish";
                worksheet.Cells[6, 15].Value = "Symm";
                worksheet.Cells[6, 16].Value = "Fls";
                worksheet.Cells[6, 17].Value = "Length";
                worksheet.Cells[6, 18].Value = "Width";
                worksheet.Cells[6, 19].Value = "Depth";
                worksheet.Cells[6, 20].Value = "Depth(%)";
                worksheet.Cells[6, 21].Value = "Table(%)";
                worksheet.Cells[6, 22].Value = "Key to Symbol";
                worksheet.Cells[6, 23].Value = "Gia Lab Comment";
                worksheet.Cells[6, 24].Value = "Girdle(%)";
                worksheet.Cells[6, 25].Value = "Crown Angle";
                worksheet.Cells[6, 26].Value = "Crown Height";
                worksheet.Cells[6, 27].Value = "Pav Angle";
                worksheet.Cells[6, 28].Value = "Pav Height";
                worksheet.Cells[6, 29].Value = "Table Natts";
                worksheet.Cells[6, 30].Value = "Crown Natts";
                worksheet.Cells[6, 31].Value = "Table Inclusion";
                worksheet.Cells[6, 32].Value = "Crown Inclusion";
                worksheet.Cells[6, 33].Value = "Culet";
                worksheet.Cells[6, 34].Value = "Table Open";
                worksheet.Cells[6, 35].Value = "Girdle Open";
                worksheet.Cells[6, 36].Value = "Crown Open";
                worksheet.Cells[6, 37].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Formula = "=(1-L" + inwrkrow + "/J" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 13].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 14].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 22].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 23].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 37].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 37].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(cellBg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 37].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 8].Formula = "=SUBTOTAL(109,H" + inStartIndex + ":H" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 11].Formula = "=((1 - (SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")/SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 11].Formula = "=IF(SUBTOTAL(109, J" + inStartIndex + ":J" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")/SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 8, i, 12].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 17, i, 21].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 24, i, 28].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 10].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                Byte[] bin = p.GetAsByteArray();
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateLabCustomerExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 39].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 39].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 39].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 39].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(9);
                worksheet.Cells[6, 5].AutoFitColumns(9);
                worksheet.Cells[6, 6].AutoFitColumns(8);
                worksheet.Cells[6, 7].AutoFitColumns(8);
                worksheet.Cells[6, 8].AutoFitColumns(8);
                worksheet.Cells[6, 9].AutoFitColumns(11);
                worksheet.Cells[6, 10].AutoFitColumns(11);
                worksheet.Cells[6, 11].AutoFitColumns(10.5);
                worksheet.Cells[6, 12].AutoFitColumns(11.5);
                worksheet.Cells[6, 13].AutoFitColumns(11.5);
                worksheet.Cells[6, 14].AutoFitColumns(8);
                worksheet.Cells[6, 15].AutoFitColumns(8);
                worksheet.Cells[6, 16].AutoFitColumns(8);
                worksheet.Cells[6, 17].AutoFitColumns(8);
                worksheet.Cells[6, 18].AutoFitColumns(8);
                worksheet.Cells[6, 19].AutoFitColumns(8);
                worksheet.Cells[6, 20].AutoFitColumns(8);
                worksheet.Cells[6, 21].AutoFitColumns(8);
                worksheet.Cells[6, 22].AutoFitColumns(8);
                worksheet.Cells[6, 23].AutoFitColumns(8);
                worksheet.Cells[6, 24].AutoFitColumns(25);
                worksheet.Cells[6, 25].AutoFitColumns(25);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(8);
                worksheet.Cells[6, 32].AutoFitColumns(8);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);
                worksheet.Cells[6, 38].AutoFitColumns(8);
                worksheet.Cells[6, 39].AutoFitColumns(8);


                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "Shape";
                worksheet.Cells[6, 4].Value = "Pointer";
                worksheet.Cells[6, 5].Value = "BGM";
                worksheet.Cells[6, 6].Value = "Color";
                worksheet.Cells[6, 7].Value = "Clarity";
                worksheet.Cells[6, 8].Value = "Cts";
                worksheet.Cells[6, 9].Value = "Rap Rate";
                worksheet.Cells[6, 10].Value = "Rap Value";
                worksheet.Cells[6, 11].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 12].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 13].Value = "Price/Cts";
                worksheet.Cells[6, 14].Value = "Cut";
                worksheet.Cells[6, 15].Value = "Polish";
                worksheet.Cells[6, 16].Value = "Symm";
                worksheet.Cells[6, 17].Value = "Fls";
                worksheet.Cells[6, 18].Value = "Ratio";
                worksheet.Cells[6, 19].Value = "Length";
                worksheet.Cells[6, 20].Value = "Width";
                worksheet.Cells[6, 21].Value = "Depth";
                worksheet.Cells[6, 22].Value = "Depth(%)";
                worksheet.Cells[6, 23].Value = "Table(%)";
                worksheet.Cells[6, 24].Value = "Key to Symbol";
                worksheet.Cells[6, 25].Value = "Gia Lab Comment";
                worksheet.Cells[6, 26].Value = "Girdle(%)";
                worksheet.Cells[6, 27].Value = "Crown Angle";
                worksheet.Cells[6, 28].Value = "Crown Height";
                worksheet.Cells[6, 29].Value = "Pav Angle";
                worksheet.Cells[6, 30].Value = "Pav Height";
                worksheet.Cells[6, 31].Value = "Table Natts";
                worksheet.Cells[6, 32].Value = "Crown Natts";
                worksheet.Cells[6, 33].Value = "Table Inclusion";
                worksheet.Cells[6, 34].Value = "Crown Inclusion";
                worksheet.Cells[6, 35].Value = "Culet";
                worksheet.Cells[6, 36].Value = "Table Open";
                worksheet.Cells[6, 37].Value = "Girdle Open";
                worksheet.Cells[6, 38].Value = "Crown Open";
                worksheet.Cells[6, 39].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color ppc_bg = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                Color ratio_bg = System.Drawing.ColorTranslator.FromHtml("#bdd7ee");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Formula = "=(1-L" + inwrkrow + "/J" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;
                    
                    worksheet.Cells[inwrkrow, 13].Formula = "=L" + inwrkrow + "/H" + inwrkrow;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 14].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 14].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 16].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["RATIO"] != null) ? (dt.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ? Convert.ToDouble(dt.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null;
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 24].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 25].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 39].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 39].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 11, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(cellBg);

                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(ppc_bg);

                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 18].Style.Fill.BackgroundColor.SetColor(ratio_bg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 39].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 8].Formula = "=SUBTOTAL(109,H" + inStartIndex + ":H" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 11].Formula = "=((1 - (SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")/SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 11].Formula = "=IF(SUBTOTAL(109, J" + inStartIndex + ":J" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")/SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 8, i, 13].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 17, i, 21].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 24, i, 28].Style.Numberformat.Format = "#,##0.00";
                
                worksheet.Cells[5, 10].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                Byte[] bin = p.GetAsByteArray();
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateLabCustomerImageExcel_OLD(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 39].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 39].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 39].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 39].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(8);
                worksheet.Cells[6, 3].AutoFitColumns(10);
                worksheet.Cells[6, 4].AutoFitColumns(10);
                worksheet.Cells[6, 5].AutoFitColumns(10);
                worksheet.Cells[6, 6].AutoFitColumns(9);
                worksheet.Cells[6, 7].AutoFitColumns(9);
                worksheet.Cells[6, 8].AutoFitColumns(8);
                worksheet.Cells[6, 9].AutoFitColumns(8);
                worksheet.Cells[6, 10].AutoFitColumns(8);
                worksheet.Cells[6, 11].AutoFitColumns(11);
                worksheet.Cells[6, 12].AutoFitColumns(11);
                worksheet.Cells[6, 13].AutoFitColumns(10.5);
                worksheet.Cells[6, 14].AutoFitColumns(11.5);
                worksheet.Cells[6, 15].AutoFitColumns(8);
                worksheet.Cells[6, 16].AutoFitColumns(8);
                worksheet.Cells[6, 17].AutoFitColumns(8);
                worksheet.Cells[6, 18].AutoFitColumns(8);
                worksheet.Cells[6, 19].AutoFitColumns(8);
                worksheet.Cells[6, 20].AutoFitColumns(8);
                worksheet.Cells[6, 21].AutoFitColumns(8);
                worksheet.Cells[6, 22].AutoFitColumns(8);
                worksheet.Cells[6, 23].AutoFitColumns(8);
                worksheet.Cells[6, 24].AutoFitColumns(25);
                worksheet.Cells[6, 25].AutoFitColumns(25);
                worksheet.Cells[6, 26].AutoFitColumns(8);
                worksheet.Cells[6, 27].AutoFitColumns(8);
                worksheet.Cells[6, 28].AutoFitColumns(8);
                worksheet.Cells[6, 29].AutoFitColumns(8);
                worksheet.Cells[6, 30].AutoFitColumns(8);
                worksheet.Cells[6, 31].AutoFitColumns(8);
                worksheet.Cells[6, 32].AutoFitColumns(8);
                worksheet.Cells[6, 33].AutoFitColumns(8);
                worksheet.Cells[6, 34].AutoFitColumns(8);
                worksheet.Cells[6, 35].AutoFitColumns(8);
                worksheet.Cells[6, 36].AutoFitColumns(8);
                worksheet.Cells[6, 37].AutoFitColumns(8);
                worksheet.Cells[6, 38].AutoFitColumns(8);
                worksheet.Cells[6, 39].AutoFitColumns(8);



                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "HD Image";
                worksheet.Cells[6, 4].Value = "HD Video";
                worksheet.Cells[6, 5].Value = "Shape";
                worksheet.Cells[6, 6].Value = "Pointer";
                worksheet.Cells[6, 7].Value = "BGM";
                worksheet.Cells[6, 8].Value = "Color";
                worksheet.Cells[6, 9].Value = "Clarity";
                worksheet.Cells[6, 10].Value = "Cts";
                worksheet.Cells[6, 11].Value = "Rap Rate";
                worksheet.Cells[6, 12].Value = "Rap Value";
                worksheet.Cells[6, 13].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 14].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 15].Value = "Cut";
                worksheet.Cells[6, 16].Value = "Polish";
                worksheet.Cells[6, 17].Value = "Symm";
                worksheet.Cells[6, 18].Value = "Fls";
                worksheet.Cells[6, 19].Value = "Length";
                worksheet.Cells[6, 20].Value = "Width";
                worksheet.Cells[6, 21].Value = "Depth";
                worksheet.Cells[6, 22].Value = "Depth(%)";
                worksheet.Cells[6, 23].Value = "Table(%)";
                worksheet.Cells[6, 24].Value = "Key to Symbol";
                worksheet.Cells[6, 25].Value = "Gia Lab Comment";
                worksheet.Cells[6, 26].Value = "Girdle(%)";
                worksheet.Cells[6, 27].Value = "Crown Angle";
                worksheet.Cells[6, 28].Value = "Crown Height";
                worksheet.Cells[6, 29].Value = "Pav Angle";
                worksheet.Cells[6, 30].Value = "Pav Height";
                worksheet.Cells[6, 31].Value = "Table Natts";
                worksheet.Cells[6, 32].Value = "Crown Natts";
                worksheet.Cells[6, 33].Value = "Table Inclusion";
                worksheet.Cells[6, 34].Value = "Crown Inclusion";
                worksheet.Cells[6, 35].Value = "Culet";
                worksheet.Cells[6, 36].Value = "Table Open";
                worksheet.Cells[6, 37].Value = "Girdle Open";
                worksheet.Cells[6, 38].Value = "Crown Open";
                worksheet.Cells[6, 39].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Movie \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 13].Formula = "=(1-N" + inwrkrow + "/L" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 15].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 16].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 17].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 24].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 25].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 39].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 39].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(cellBg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 39].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 13].Formula = "=((1 - (SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")/SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 13].Formula = "=IF(SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")/SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 14].Formula = "=SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 10, i, 14].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 19, i, 23].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 26, i, 30].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 14].Style.Numberformat.Format = "#,##0";
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateLabCustomerImageExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 41].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 41].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 41].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 41].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 41].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);               // Ref No
                worksheet.Cells[6, 2].AutoFitColumns(8);                // Lab
                worksheet.Cells[6, 3].AutoFitColumns(10);               // HD Image
                worksheet.Cells[6, 4].AutoFitColumns(10);               // HD Video
                worksheet.Cells[6, 5].AutoFitColumns(10);               // Shape
                worksheet.Cells[6, 6].AutoFitColumns(9);                // Pointer
                worksheet.Cells[6, 7].AutoFitColumns(9);                // BGM
                worksheet.Cells[6, 8].AutoFitColumns(8);                // Color
                worksheet.Cells[6, 9].AutoFitColumns(8);                // Clarity
                worksheet.Cells[6, 10].AutoFitColumns(8);               // Cts
                worksheet.Cells[6, 11].AutoFitColumns(11);              // Rap Rate
                worksheet.Cells[6, 12].AutoFitColumns(11);              // Rap Value
                worksheet.Cells[6, 13].AutoFitColumns(10.5);            // Sunrise Disc(%)
                worksheet.Cells[6, 14].AutoFitColumns(11.5);            // Sunrise Value US($)
                worksheet.Cells[6, 15].AutoFitColumns(11.5);            // Price/Cts
                worksheet.Cells[6, 16].AutoFitColumns(8);               // Cut
                worksheet.Cells[6, 17].AutoFitColumns(8);               // Polish
                worksheet.Cells[6, 18].AutoFitColumns(8);               // Symm
                worksheet.Cells[6, 19].AutoFitColumns(8);               // Fls
                worksheet.Cells[6, 20].AutoFitColumns(8);               // Ratio
                worksheet.Cells[6, 21].AutoFitColumns(8);               // Length
                worksheet.Cells[6, 22].AutoFitColumns(8);               // Width
                worksheet.Cells[6, 23].AutoFitColumns(8);               // Depth
                worksheet.Cells[6, 24].AutoFitColumns(8);               // Depth(%)
                worksheet.Cells[6, 25].AutoFitColumns(8);               // Table(%)
                worksheet.Cells[6, 26].AutoFitColumns(25);              // Key to Symbol
                worksheet.Cells[6, 27].AutoFitColumns(25);              // Gia Lab Comment
                worksheet.Cells[6, 28].AutoFitColumns(8);               // Girdle(%)
                worksheet.Cells[6, 29].AutoFitColumns(8);               // Crown Angle
                worksheet.Cells[6, 30].AutoFitColumns(8);               // Crown Height
                worksheet.Cells[6, 31].AutoFitColumns(8);               // Pav Angle
                worksheet.Cells[6, 32].AutoFitColumns(8);               // Pav Height
                worksheet.Cells[6, 33].AutoFitColumns(8);               // Table Natts
                worksheet.Cells[6, 34].AutoFitColumns(8);               // Crown Natts
                worksheet.Cells[6, 35].AutoFitColumns(8);               // Table Inclusion
                worksheet.Cells[6, 36].AutoFitColumns(8);               // Crown Inclusion
                worksheet.Cells[6, 37].AutoFitColumns(8);               // Culet
                worksheet.Cells[6, 38].AutoFitColumns(8);               // Table Open
                worksheet.Cells[6, 39].AutoFitColumns(8);               // Girdle Open
                worksheet.Cells[6, 40].AutoFitColumns(8);               // Crown Open
                worksheet.Cells[6, 41].AutoFitColumns(8);               // Pavilion Open



                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "HD Image";
                worksheet.Cells[6, 4].Value = "HD Video";
                worksheet.Cells[6, 5].Value = "Shape";
                worksheet.Cells[6, 6].Value = "Pointer";
                worksheet.Cells[6, 7].Value = "BGM";
                worksheet.Cells[6, 8].Value = "Color";
                worksheet.Cells[6, 9].Value = "Clarity";
                worksheet.Cells[6, 10].Value = "Cts";
                worksheet.Cells[6, 11].Value = "Rap Rate";
                worksheet.Cells[6, 12].Value = "Rap Value";
                worksheet.Cells[6, 13].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 14].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 15].Value = "Price/Cts";
                worksheet.Cells[6, 16].Value = "Cut";
                worksheet.Cells[6, 17].Value = "Polish";
                worksheet.Cells[6, 18].Value = "Symm";
                worksheet.Cells[6, 19].Value = "Fls";
                worksheet.Cells[6, 20].Value = "Ratio";
                worksheet.Cells[6, 21].Value = "Length";
                worksheet.Cells[6, 22].Value = "Width";
                worksheet.Cells[6, 23].Value = "Depth";
                worksheet.Cells[6, 24].Value = "Depth(%)";
                worksheet.Cells[6, 25].Value = "Table(%)";
                worksheet.Cells[6, 26].Value = "Key to Symbol";
                worksheet.Cells[6, 27].Value = "Gia Lab Comment";
                worksheet.Cells[6, 28].Value = "Girdle(%)";
                worksheet.Cells[6, 29].Value = "Crown Angle";
                worksheet.Cells[6, 30].Value = "Crown Height";
                worksheet.Cells[6, 31].Value = "Pav Angle";
                worksheet.Cells[6, 32].Value = "Pav Height";
                worksheet.Cells[6, 33].Value = "Table Natts";
                worksheet.Cells[6, 34].Value = "Crown Natts";
                worksheet.Cells[6, 35].Value = "Table Inclusion";
                worksheet.Cells[6, 36].Value = "Crown Inclusion";
                worksheet.Cells[6, 37].Value = "Culet";
                worksheet.Cells[6, 38].Value = "Table Open";
                worksheet.Cells[6, 39].Value = "Girdle Open";
                worksheet.Cells[6, 40].Value = "Crown Open";
                worksheet.Cells[6, 41].Value = "Pavilion Open";


                worksheet.View.FreezePanes(7, 1);

                #endregion

                ExcelStyle h1 = worksheet.Cells[6, 1].Style;
                h1.Border.Left.Style = h1.Border.Right.Style = h1.Border.Top.Style = h1.Border.Bottom.Style = ExcelBorderStyle.Medium;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color ppc_bg = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                Color ratio_bg = System.Drawing.ColorTranslator.FromHtml("#bdd7ee");

                int i = 0;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                string cut;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell
                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Movie \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 13].Formula = "=(1-N" + inwrkrow + "/L" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;

                    worksheet.Cells[inwrkrow, 15].Formula = "=N" + inwrkrow + "/J" + inwrkrow;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 16].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 16].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 17].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 18].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["RATIO"] != null) ? (dt.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ? Convert.ToDouble(dt.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null;
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    worksheet.Cells[inwrkrow, 26].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 27].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 41].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 41].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 41].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 41].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 41].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(cellBg);

                worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 15].Style.Fill.BackgroundColor.SetColor(ppc_bg);

                worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(ratio_bg);

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 41].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(109,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 12].Formula = "=SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 13].Formula = "=((1 - (SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")/SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 13].Formula = "=IF(SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")/SUBTOTAL(109,L" + inStartIndex + ":L" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 14].Formula = "=SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 10, i, 15].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 19, i, 23].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 26, i, 30].Style.Numberformat.Format = "#,##0.00";

                worksheet.Cells[5, 12].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 14].Style.Numberformat.Format = "#,##0";
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateLabSupplierExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 46].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 46].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 46].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 46].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);               // Ref No
                worksheet.Cells[6, 2].AutoFitColumns(8);                // Lab
                worksheet.Cells[6, 3].AutoFitColumns(10);               // HD Image
                worksheet.Cells[6, 4].AutoFitColumns(10);               // HD Video
                worksheet.Cells[6, 5].AutoFitColumns(15);               // Supplier Stock ID
                worksheet.Cells[6, 6].AutoFitColumns(12);               // Certi No
                worksheet.Cells[6, 7].AutoFitColumns(12);               // Supplier
                worksheet.Cells[6, 8].AutoFitColumns(10);               // Shape
                worksheet.Cells[6, 9].AutoFitColumns(9);                // Pointer
                worksheet.Cells[6, 10].AutoFitColumns(9);               // BGM
                worksheet.Cells[6, 11].AutoFitColumns(8);               // Color
                worksheet.Cells[6, 12].AutoFitColumns(8);               // Clarity
                worksheet.Cells[6, 13].AutoFitColumns(8);               // Cts
                worksheet.Cells[6, 14].AutoFitColumns(11);              // Rap Rate
                worksheet.Cells[6, 15].AutoFitColumns(11);              // Rap Value
                worksheet.Cells[6, 16].AutoFitColumns(11.5);            // Supplier Cost Disc(%)
                worksheet.Cells[6, 17].AutoFitColumns(11.5);            // Supplier Cost Value
                worksheet.Cells[6, 18].AutoFitColumns(10.5);            // Sunrise Disc(%)
                worksheet.Cells[6, 19].AutoFitColumns(11.5);            // Sunrise Value US($)
                worksheet.Cells[6, 20].AutoFitColumns(11.5);            // Supp Base Offer(%)
                worksheet.Cells[6, 21].AutoFitColumns(11.5);            // Supp Base Offer Value
                worksheet.Cells[6, 22].AutoFitColumns(8);               // Cut
                worksheet.Cells[6, 23].AutoFitColumns(8);               // Polish
                worksheet.Cells[6, 24].AutoFitColumns(8);               // Symm
                worksheet.Cells[6, 25].AutoFitColumns(8);               // Fls
                worksheet.Cells[6, 26].AutoFitColumns(8);               // Length
                worksheet.Cells[6, 27].AutoFitColumns(8);               // Width
                worksheet.Cells[6, 28].AutoFitColumns(8);               // Depth
                worksheet.Cells[6, 29].AutoFitColumns(8);               // Depth(%)
                worksheet.Cells[6, 30].AutoFitColumns(8);               // Table(%)
                worksheet.Cells[6, 31].AutoFitColumns(25);              // Key to Symbol
                worksheet.Cells[6, 32].AutoFitColumns(25);              // Gia Lab Comment
                worksheet.Cells[6, 33].AutoFitColumns(8);               // Girdle(%)
                worksheet.Cells[6, 34].AutoFitColumns(8);               // Crown Angle
                worksheet.Cells[6, 35].AutoFitColumns(8);               // Crown Height
                worksheet.Cells[6, 36].AutoFitColumns(8);               // Pav Angle
                worksheet.Cells[6, 37].AutoFitColumns(8);               // Pav Height
                worksheet.Cells[6, 38].AutoFitColumns(8);               // Table Natts
                worksheet.Cells[6, 39].AutoFitColumns(8);               // Crown Natts
                worksheet.Cells[6, 40].AutoFitColumns(8);               // Table Inclusion
                worksheet.Cells[6, 41].AutoFitColumns(8);               // Crown Inclusion
                worksheet.Cells[6, 42].AutoFitColumns(8);               // Culet
                worksheet.Cells[6, 43].AutoFitColumns(8);               // Table Open
                worksheet.Cells[6, 44].AutoFitColumns(8);               // Girdle Open
                worksheet.Cells[6, 45].AutoFitColumns(8);               // Crown Open
                worksheet.Cells[6, 46].AutoFitColumns(8);               // Pavilion Open


                //worksheet.Cells[6, 42].AutoFitColumns(10);

                worksheet.Cells[6, 1].Value = "Ref No";
                worksheet.Cells[6, 2].Value = "Lab";
                worksheet.Cells[6, 3].Value = "HD Image";
                worksheet.Cells[6, 4].Value = "HD Video";
                worksheet.Cells[6, 5].Value = "Supplier Stock ID";
                worksheet.Cells[6, 6].Value = "Certi No";
                worksheet.Cells[6, 7].Value = "Supplier";
                worksheet.Cells[6, 8].Value = "Shape";
                worksheet.Cells[6, 9].Value = "Pointer";
                worksheet.Cells[6, 10].Value = "BGM";
                worksheet.Cells[6, 11].Value = "Color";
                worksheet.Cells[6, 12].Value = "Clarity";
                worksheet.Cells[6, 13].Value = "Cts";
                worksheet.Cells[6, 14].Value = "Rap Rate";
                worksheet.Cells[6, 15].Value = "Rap Value";
                worksheet.Cells[6, 16].Value = "Supplier Cost Disc(%)";
                worksheet.Cells[6, 17].Value = "Supplier Cost Value";
                worksheet.Cells[6, 18].Value = "Sunrise Disc(%)";
                worksheet.Cells[6, 19].Value = "Sunrise Value US($)";
                worksheet.Cells[6, 20].Value = "Supp Base Offer(%)";
                worksheet.Cells[6, 21].Value = "Supp Base Offer Value";
                worksheet.Cells[6, 22].Value = "Cut";
                worksheet.Cells[6, 23].Value = "Polish";
                worksheet.Cells[6, 24].Value = "Symm";
                worksheet.Cells[6, 25].Value = "Fls";
                worksheet.Cells[6, 26].Value = "Length";
                worksheet.Cells[6, 27].Value = "Width";
                worksheet.Cells[6, 28].Value = "Depth";
                worksheet.Cells[6, 29].Value = "Depth(%)";
                worksheet.Cells[6, 30].Value = "Table(%)";
                worksheet.Cells[6, 31].Value = "Key to Symbol";
                worksheet.Cells[6, 32].Value = "Gia Lab Comment";
                worksheet.Cells[6, 33].Value = "Girdle(%)";
                worksheet.Cells[6, 34].Value = "Crown Angle";
                worksheet.Cells[6, 35].Value = "Crown Height";
                worksheet.Cells[6, 36].Value = "Pav Angle";
                worksheet.Cells[6, 37].Value = "Pav Height";
                worksheet.Cells[6, 38].Value = "Table Natts";
                worksheet.Cells[6, 39].Value = "Crown Natts";
                worksheet.Cells[6, 40].Value = "Table Inclusion";
                worksheet.Cells[6, 41].Value = "Crown Inclusion";
                worksheet.Cells[6, 42].Value = "Culet";
                worksheet.Cells[6, 43].Value = "Table Open";
                worksheet.Cells[6, 44].Value = "Girdle Open";
                worksheet.Cells[6, 45].Value = "Crown Open";
                worksheet.Cells[6, 46].Value = "Pavilion Open";

                //worksheet.Cells[6, 42].Value = "Dna";
                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color cellBg1 = System.Drawing.ColorTranslator.FromHtml("#ff99cc");
                int i = 0;
                string values_2, cut;
                Int64 number_2;
                bool success2;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell

                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["REF_NO"] != null) ? (dt.Rows[i - inStartIndex]["REF_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["REF_NO"]) : "") : "";
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Movie \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    if (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"] != null)
                    {
                        if (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"].GetType().Name != "DBNull")
                            values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                        else
                            values_2 = "";
                    }
                    else
                    {
                        values_2 = "";
                    }
                    success2 = Int64.TryParse(values_2, out number_2);
                    if (success2)
                    {
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 5].Value = values_2;
                    }

                    if (dt.Rows[i - inStartIndex]["CERTI_NO"] != null)
                    {
                        if (dt.Rows[i - inStartIndex]["CERTI_NO"].GetType().Name != "DBNull")
                            values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                        else
                            values_2 = "";
                    }
                    else
                    {
                        values_2 = "";
                    }
                    success2 = Int64.TryParse(values_2, out number_2);
                    if (success2)
                    {
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 6].Value = values_2;
                    }

                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PARTY_NAME"] != null) ? (dt.Rows[i - inStartIndex]["PARTY_NAME"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_NAME"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["OFFER_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["OFFER_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["OFFER_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 16].Formula = "=(1-Q" + inwrkrow + "/O" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["OFFER_DISC_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 18].Formula = "=(1-S" + inwrkrow + "/O" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SALES_DISC_VALUE"]) : ((Decimal?)null)) : null;
                    //worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Formula = "=(1-U" + inwrkrow + "/O" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"]) : ((Decimal?)null)) : null;

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);

                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";

                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : 0) : 0;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : 0) : 0;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : (Decimal?)null) : null;
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 43].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 44].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 45].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 46].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";

                    //worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["DNA_PATH"] != null) ? (dt.Rows[i - inStartIndex]["DNA_PATH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["DNA_PATH"]) : "") : "";

                    worksheet.Cells[inwrkrow, 31].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 32].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Fill.BackgroundColor.SetColor(cellBg1);

                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(cellBg);

                worksheet.Cells[5, 1, 5, 46].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 46].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 46].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                worksheet.Cells[5, 1].Formula = "=SUBTOTAL(103,A" + inStartIndex + ":A" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 13].Formula = "=SUBTOTAL(109,M" + inStartIndex + ":M" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 15].Formula = "=SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 16].Formula = "=((1 - (SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 16].Formula = "=IF(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 17].Formula = "=SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 18].Formula = "=((1 - (SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 18].Formula = "=IF(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 19].Formula = "=SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")";
                //worksheet.Cells[5, 20].Formula = "=((1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100)";
                worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 21].Formula = "=SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 13, i, 21].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 26, i, 30].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 33, i, 37].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";

                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }
        public static void CreateMacroExcel(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Lab Stock Report");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Lab Stock Report";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Lab Stock Report";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 69].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 69].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 69].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 69].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 69].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 69].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(6.5);//8            "DNA"
                worksheet.Cells[6, 2].AutoFitColumns(6.5);//8            "Image"
                worksheet.Cells[6, 3].AutoFitColumns(6.5);//8            "Video"
                worksheet.Cells[6, 4].AutoFitColumns(5);//6              "Lab"
                worksheet.Cells[6, 5].AutoFitColumns(10);//28             "Supplier Name"
                worksheet.Cells[6, 6].AutoFitColumns(4.7);//7.3            "Rank"
                worksheet.Cells[6, 7].AutoFitColumns(5);//28             "Supplier Status"
                worksheet.Cells[6, 8].AutoFitColumns(6.5);//20           "Buyer Name"
                worksheet.Cells[6, 9].AutoFitColumns(7);//12             "Status"
                worksheet.Cells[6, 10].AutoFitColumns(8);//12            "Supplier Stock ID"
                worksheet.Cells[6, 11].AutoFitColumns(0);//12            "Certi No"
                worksheet.Cells[6, 12].AutoFitColumns(9);//11            "Shape"
                worksheet.Cells[6, 13].AutoFitColumns(0);//10            "Pointer"
                worksheet.Cells[6, 14].AutoFitColumns(9);//10            "Sub Pointer"
                worksheet.Cells[6, 15].AutoFitColumns(6);//6             "Color"
                worksheet.Cells[6, 16].AutoFitColumns(8);//8             "Clarity"
                worksheet.Cells[6, 17].AutoFitColumns(10);//10           "Cts"
                worksheet.Cells[6, 18].AutoFitColumns(0);//10            "Rap Rate"
                worksheet.Cells[6, 19].AutoFitColumns(0);//12            "Rap Value"
                worksheet.Cells[6, 20].AutoFitColumns(0);//14            "Supplier Base Offer(%)"
                worksheet.Cells[6, 21].AutoFitColumns(0);//14            "Supplier Base Offer Value($)"
                worksheet.Cells[6, 22].AutoFitColumns(0);//14            "Supplier Final Disc(%)"
                worksheet.Cells[6, 23].AutoFitColumns(0);//14            "Supplier Final Value($)"
                worksheet.Cells[6, 24].AutoFitColumns(9);//14           "Supplier Final Disc. With Max Slab(%)"
                worksheet.Cells[6, 25].AutoFitColumns(10.5);//14           "Supplier Final Value With Max Slab($)"
                worksheet.Cells[6, 26].AutoFitColumns(0);//8             "Bid Disc(%)"
                worksheet.Cells[6, 27].AutoFitColumns(0);//8             "Bid Amt"
                worksheet.Cells[6, 28].AutoFitColumns(0);//8             "Bid/Ct"
                worksheet.Cells[6, 29].AutoFitColumns(5.3);//10           "Avg. Stock Disc"
                worksheet.Cells[6, 30].AutoFitColumns(5.3);//10           "Avg. Stock Pcs"
                worksheet.Cells[6, 31].AutoFitColumns(5.3);//10           "Avg. Pur. Disc"
                worksheet.Cells[6, 32].AutoFitColumns(5.3);//10           "Avg. Pur. Pcs"
                worksheet.Cells[6, 33].AutoFitColumns(5.3);//10           "Avg. Sales Disc %"
                worksheet.Cells[6, 34].AutoFitColumns(5.3);//10           "Sales Pcs"
                worksheet.Cells[6, 35].AutoFitColumns(3.6);//6             "KTS Grade"
                worksheet.Cells[6, 36].AutoFitColumns(3.6);//6             "Comm. Grade"
                worksheet.Cells[6, 37].AutoFitColumns(3.6);//6             "Zone"
                worksheet.Cells[6, 38].AutoFitColumns(3.6);//6             "Para. Grade"
                worksheet.Cells[6, 39].AutoFitColumns(4.7);//6             "Cut"
                worksheet.Cells[6, 40].AutoFitColumns(5);//6             "Polish"
                worksheet.Cells[6, 41].AutoFitColumns(5);//6             "Symm"
                worksheet.Cells[6, 42].AutoFitColumns(5);//7             "Fls"
                worksheet.Cells[6, 43].AutoFitColumns(15);//25           "Key To Symbol"
                worksheet.Cells[6, 44].AutoFitColumns(4.8);//8             "Ratio"
                worksheet.Cells[6, 45].AutoFitColumns(4.8);//8             "Length"
                worksheet.Cells[6, 46].AutoFitColumns(4.8);//8             "Width"
                worksheet.Cells[6, 47].AutoFitColumns(0);//8             "Depth"
                worksheet.Cells[6, 48].AutoFitColumns(4.8);//8             "Depth(%)"
                worksheet.Cells[6, 49].AutoFitColumns(4.8);//8             "Table(%)"
                worksheet.Cells[6, 50].AutoFitColumns(4.8);//8             "Crown Ang"
                worksheet.Cells[6, 51].AutoFitColumns(4.8);//8             "Crown Hgt"
                worksheet.Cells[6, 52].AutoFitColumns(4.8);//8             "Pavilion Ang"
                worksheet.Cells[6, 53].AutoFitColumns(4.8);//8             "Pavilion Hgt"
                worksheet.Cells[6, 54].AutoFitColumns(4.8);//8             "Girdle(%)"
                worksheet.Cells[6, 55].AutoFitColumns(4.8);//8             "Luster"
                worksheet.Cells[6, 56].AutoFitColumns(4.8);//8             "Type2A"
                worksheet.Cells[6, 57].AutoFitColumns(4.8);//8             "Table Inclusion"
                worksheet.Cells[6, 58].AutoFitColumns(4.8);//8             "Crown Inclusion"
                worksheet.Cells[6, 59].AutoFitColumns(4.8);//8             "Table Natts"
                worksheet.Cells[6, 60].AutoFitColumns(4.8);//8             "Crown Natts"
                worksheet.Cells[6, 61].AutoFitColumns(4.8);//8             "Culet"
                worksheet.Cells[6, 62].AutoFitColumns(25);//25           "Comments"
                worksheet.Cells[6, 63].AutoFitColumns(25);//25           "Supplier Comment"
                worksheet.Cells[6, 64].AutoFitColumns(4.9);//10           "Table Open"
                worksheet.Cells[6, 65].AutoFitColumns(4.9);//10           "Crown Open"
                worksheet.Cells[6, 66].AutoFitColumns(4.9);//10           "Pavilion Open"
                worksheet.Cells[6, 67].AutoFitColumns(4.9);//10           "Girdle Open"
                worksheet.Cells[6, 68].AutoFitColumns(10);//10           "Shade"
                worksheet.Cells[6, 69].AutoFitColumns(10);//10           "Milky"

                worksheet.Cells[6, 1].Value = "DNA";
                worksheet.Cells[6, 2].Value = "Image";
                worksheet.Cells[6, 3].Value = "Video";
                worksheet.Cells[6, 4].Value = "Lab";
                worksheet.Cells[6, 5].Value = "Supplier Name";
                worksheet.Cells[6, 6].Value = "Rank";
                worksheet.Cells[6, 7].Value = "Supplier Status";
                worksheet.Cells[6, 8].Value = "Buyer Name";
                worksheet.Cells[6, 9].Value = "Status";
                worksheet.Cells[6, 10].Value = "Supplier Stock ID";
                worksheet.Cells[6, 11].Value = "Certi No";
                worksheet.Cells[6, 12].Value = "Shape";
                worksheet.Cells[6, 13].Value = "Pointer";
                worksheet.Cells[6, 14].Value = "Sub Pointer";
                worksheet.Cells[6, 15].Value = "Color";
                worksheet.Cells[6, 16].Value = "Clarity";
                worksheet.Cells[6, 17].Value = "Cts";
                worksheet.Cells[6, 18].Value = "Rap Rate";
                worksheet.Cells[6, 19].Value = "Rap Value";
                worksheet.Cells[6, 20].Value = "Supplier Base Offer(%)";
                worksheet.Cells[6, 21].Value = "Supplier Base Offer Value($)";
                worksheet.Cells[6, 22].Value = "Supplier Final Disc(%)";
                worksheet.Cells[6, 23].Value = "Supplier Final Value($)";
                worksheet.Cells[6, 24].Value = "Supplier Final Disc. With Max Slab(%)";
                worksheet.Cells[6, 25].Value = "Supplier Final Value With Max Slab($)";
                worksheet.Cells[6, 26].Value = "Bid Disc(%)";
                worksheet.Cells[6, 27].Value = "Bid Amt";
                worksheet.Cells[6, 28].Value = "Bid/Ct";
                worksheet.Cells[6, 29].Value = "Avg. Stock Disc";
                worksheet.Cells[6, 30].Value = "Avg. Stock Pcs";
                worksheet.Cells[6, 31].Value = "Avg. Pur. Disc";
                worksheet.Cells[6, 32].Value = "Avg. Pur. Pcs";
                worksheet.Cells[6, 33].Value = "Avg. Sales Disc %";
                worksheet.Cells[6, 34].Value = "Sales Pcs";
                worksheet.Cells[6, 35].Value = "KTS Grade";
                worksheet.Cells[6, 36].Value = "Comm. Grade";
                worksheet.Cells[6, 37].Value = "Zone";
                worksheet.Cells[6, 38].Value = "Para. Grade";
                worksheet.Cells[6, 39].Value = "Cut";
                worksheet.Cells[6, 40].Value = "Polish";
                worksheet.Cells[6, 41].Value = "Symm";
                worksheet.Cells[6, 42].Value = "Fls";
                worksheet.Cells[6, 43].Value = "Key To Symbol";
                worksheet.Cells[6, 44].Value = "Ratio";
                worksheet.Cells[6, 45].Value = "Length";
                worksheet.Cells[6, 46].Value = "Width";
                worksheet.Cells[6, 47].Value = "Depth";
                worksheet.Cells[6, 48].Value = "Depth(%)";
                worksheet.Cells[6, 49].Value = "Table(%)";
                worksheet.Cells[6, 50].Value = "Crown Ang";
                worksheet.Cells[6, 51].Value = "Crown Hgt";
                worksheet.Cells[6, 52].Value = "Pavilion Ang";
                worksheet.Cells[6, 53].Value = "Pavilion Hgt";
                worksheet.Cells[6, 54].Value = "Girdle(%)";
                worksheet.Cells[6, 55].Value = "Luster";
                worksheet.Cells[6, 56].Value = "Type2A";
                worksheet.Cells[6, 57].Value = "Table Inclusion";
                worksheet.Cells[6, 58].Value = "Crown Inclusion";
                worksheet.Cells[6, 59].Value = "Table Natts";
                worksheet.Cells[6, 60].Value = "Crown Natts";
                worksheet.Cells[6, 61].Value = "Culet";
                worksheet.Cells[6, 62].Value = "Comments";
                worksheet.Cells[6, 63].Value = "Supplier Comment";
                worksheet.Cells[6, 64].Value = "Table Open";
                worksheet.Cells[6, 65].Value = "Crown Open";
                worksheet.Cells[6, 66].Value = "Pavilion Open";
                worksheet.Cells[6, 67].Value = "Girdle Open";
                worksheet.Cells[6, 68].Value = "Shade";
                worksheet.Cells[6, 69].Value = "Milky";

                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                int i = 0;
                string cut;
                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    #region Assigns Value to Cell

                    if (dt.Rows[i - inStartIndex]["DNA_PATH"] != null && dt.Rows[i - inStartIndex]["DNA_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["DNA_PATH"]) + "\",\" DNA \")";
                        worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    if (dt.Rows[i - inStartIndex]["IMG_PATH"] != null && dt.Rows[i - inStartIndex]["IMG_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["IMG_PATH"]) + "\",\" Image \")";
                        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    if (dt.Rows[i - inStartIndex]["VDO_PATH"] != null && dt.Rows[i - inStartIndex]["VDO_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["VDO_PATH"]) + "\",\" Video \")";
                        worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }
                    string Lab = (dt.Rows[i - inStartIndex]["LAB"] != null) ? (dt.Rows[i - inStartIndex]["LAB"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = Lab;

                    if (dt.Rows[i - inStartIndex]["CER_PATH"] != null && dt.Rows[i - inStartIndex]["CER_PATH"].GetType().Name != "DBNull")
                    {
                        worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Convert.ToString(dt.Rows[i - inStartIndex]["CER_PATH"]) + "\",\" " + Lab + " \")";
                        worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                        worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(System.Drawing.Color.Blue);
                    }

                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["SUPPLIER"] != null) ? (dt.Rows[i - inStartIndex]["SUPPLIER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SUPPLIER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["BG"] != null) ? (dt.Rows[i - inStartIndex]["BG"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BG"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["PARTY_NAME"] != null) ? (dt.Rows[i - inStartIndex]["PARTY_NAME"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_NAME"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["BUYER_NAME"] != null) ? (dt.Rows[i - inStartIndex]["BUYER_NAME"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BUYER_NAME"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["STATUS"] != null) ? (dt.Rows[i - inStartIndex]["STATUS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["STATUS"]) : "") : "";
                    
                    //worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"] != null) ? (dt.Rows[i - inStartIndex]["PARTY_STONE_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]) : "") : "";
                    string values_1 = Convert.ToString(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                    Int64 number_1;
                    bool success_1 = Int64.TryParse(values_1, out number_1);
                    if (success_1)
                    {
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["PARTY_STONE_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 10].Value = values_1;
                    }

                    //worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["CERTI_NO"] != null) ? (dt.Rows[i - inStartIndex]["CERTI_NO"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CERTI_NO"]) : "") : "";
                    string values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                    Int64 number_2;
                    bool success_2 = Int64.TryParse(values_2, out number_2);
                    if (success_2)
                    {
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["CERTI_NO"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 11].Value = values_2;
                    }

                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["SHAPE"] != null) ? (dt.Rows[i - inStartIndex]["SHAPE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHAPE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["POINTER"] != null) ? (dt.Rows[i - inStartIndex]["POINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["SUBPOINTER"] != null) ? (dt.Rows[i - inStartIndex]["SUBPOINTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SUBPOINTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["COLOR"] != null) ? (dt.Rows[i - inStartIndex]["COLOR"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COLOR"]) : "") : "";
                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["PURITY"] != null) ? (dt.Rows[i - inStartIndex]["PURITY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PURITY"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["CTS"] != null) ? (dt.Rows[i - inStartIndex]["CTS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CTS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["RAP_PRICE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_PRICE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_PRICE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["RAP_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["RAP_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RAP_VALUE"]) : ((Decimal?)null)) : null;
                    
                    //worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_OFFER_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 20].Formula = "=(1-U" + inwrkrow + "/S" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_BASE_VALUE"]) : ((Decimal?)null)) : null;
                    
                    //worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["SUPP_FINAL_DISC_PER"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_FINAL_DISC_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_FINAL_DISC_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 22].Formula = "=(1-W" + inwrkrow + "/S" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["NET_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["NET_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["NET_VALUE"]) : ((Decimal?)null)) : null;
                    
                    //worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["SUPP_FINAL_DIS_WITH_MAX_SLAB"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_FINAL_DIS_WITH_MAX_SLAB"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["SUPP_FINAL_DIS_WITH_MAX_SLAB"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 24].Formula = "=(1-Y" + inwrkrow + "/S" + inwrkrow + ")*100";

                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["MAX_SLAB_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["MAX_SLAB_VALUE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["MAX_SLAB_VALUE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 26].Value = "";
                    worksheet.Cells[inwrkrow, 27].Value = "";
                    worksheet.Cells[inwrkrow, 28].Value = "";
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["ANALIS_STOCK_DISCOUNT"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_STOCK_DISCOUNT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_STOCK_DISCOUNT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["ANALIS_STOCK_PCS"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_STOCK_PCS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_STOCK_PCS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["ANALIS_PUR_DISCOUNT"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_PUR_DISCOUNT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_PUR_DISCOUNT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["ANALIS_PUR_PCS"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_PUR_PCS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_PUR_PCS"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["ANALIS_SALES_DISCOUNT"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_SALES_DISCOUNT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_SALES_DISCOUNT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["ANALIS_SALES_PCS"] != null) ? (dt.Rows[i - inStartIndex]["ANALIS_SALES_PCS"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["ANALIS_SALES_PCS"]) : ((Decimal?)null)) : null;

                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["CMT_GRD"] != null) ? (dt.Rows[i - inStartIndex]["CMT_GRD"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CMT_GRD"]) : "") : "";
                    if (worksheet.Cells[inwrkrow, 35].Value.ToString().ToUpper() == "K3")
                    {
                        //worksheet.Cells[inwrkrow, 35].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        worksheet.Cells[inwrkrow, 1, inwrkrow, 69].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    }

                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["LAB_CMT_GRD_VALUE"] != null) ? (dt.Rows[i - inStartIndex]["LAB_CMT_GRD_VALUE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LAB_CMT_GRD_VALUE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["VZONE"] != null) ? (dt.Rows[i - inStartIndex]["VZONE"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["VZONE"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["PARAM_GRD"] != null) ? (dt.Rows[i - inStartIndex]["PARAM_GRD"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PARAM_GRD"]) : "") : "";

                    cut = (dt.Rows[i - inStartIndex]["CUT"] != null) ? (dt.Rows[i - inStartIndex]["CUT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CUT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (cut == "FR" ? "F" : cut);
                    worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["POLISH"] != null) ? (dt.Rows[i - inStartIndex]["POLISH"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["POLISH"]) : "") : "";
                    worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["SYMM"] != null) ? (dt.Rows[i - inStartIndex]["SYMM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMM"]) : "") : "";
                    if (cut.ToUpper() == "3EX")
                    {
                        worksheet.Cells[inwrkrow, 39].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 40].Style.Font.Bold = true;
                        worksheet.Cells[inwrkrow, 41].Style.Font.Bold = true;
                    }

                    worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["FLS"] != null) ? (dt.Rows[i - inStartIndex]["FLS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["FLS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 43].Value = (dt.Rows[i - inStartIndex]["SYMBOL"] != null) ? (dt.Rows[i - inStartIndex]["SYMBOL"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SYMBOL"]) : "") : "";
                    worksheet.Cells[inwrkrow, 44].Value = (dt.Rows[i - inStartIndex]["RATIO"] != null) ? (dt.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["RATIO"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 45].Value = (dt.Rows[i - inStartIndex]["LENGTH"] != null) ? (dt.Rows[i - inStartIndex]["LENGTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["LENGTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 46].Value = (dt.Rows[i - inStartIndex]["WIDTH"] != null) ? (dt.Rows[i - inStartIndex]["WIDTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["WIDTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 47].Value = (dt.Rows[i - inStartIndex]["DEPTH"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 48].Value = (dt.Rows[i - inStartIndex]["DEPTH_PER"] != null) ? (dt.Rows[i - inStartIndex]["DEPTH_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["DEPTH_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 49].Value = (dt.Rows[i - inStartIndex]["TABLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["TABLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 50].Value = (dt.Rows[i - inStartIndex]["CROWN_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 51].Value = (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["CROWN_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 52].Value = (dt.Rows[i - inStartIndex]["PAV_ANGLE"] != null) ? (dt.Rows[i - inStartIndex]["PAV_ANGLE"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_ANGLE"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 53].Value = (dt.Rows[i - inStartIndex]["PAV_HEIGHT"] != null) ? (dt.Rows[i - inStartIndex]["PAV_HEIGHT"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["PAV_HEIGHT"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 54].Value = (dt.Rows[i - inStartIndex]["GIRDLE_PER"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_PER"].GetType().Name != "DBNull" ? Convert.ToDecimal(dt.Rows[i - inStartIndex]["GIRDLE_PER"]) : ((Decimal?)null)) : null;
                    worksheet.Cells[inwrkrow, 55].Value = (dt.Rows[i - inStartIndex]["LUSTER"] != null) ? (dt.Rows[i - inStartIndex]["LUSTER"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LUSTER"]) : "") : "";
                    worksheet.Cells[inwrkrow, 56].Value = (dt.Rows[i - inStartIndex]["TYPE2A"] != null) ? (dt.Rows[i - inStartIndex]["TYPE2A"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TYPE2A"]) : "") : "";
                    worksheet.Cells[inwrkrow, 57].Value = (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 58].Value = (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_INCLUSION"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_INCLUSION"]) : "") : "";
                    worksheet.Cells[inwrkrow, 59].Value = (dt.Rows[i - inStartIndex]["TABLE_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 60].Value = (dt.Rows[i - inStartIndex]["CROWN_NATTS"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_NATTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_NATTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 61].Value = (dt.Rows[i - inStartIndex]["CULET"] != null) ? (dt.Rows[i - inStartIndex]["CULET"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CULET"]) : "") : "";
                    worksheet.Cells[inwrkrow, 62].Value = (dt.Rows[i - inStartIndex]["COMMENTS"] != null) ? (dt.Rows[i - inStartIndex]["COMMENTS"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["COMMENTS"]) : "") : "";
                    worksheet.Cells[inwrkrow, 63].Value = (dt.Rows[i - inStartIndex]["SUPP_COMMENT"] != null) ? (dt.Rows[i - inStartIndex]["SUPP_COMMENT"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SUPP_COMMENT"]) : "") : "";
                    worksheet.Cells[inwrkrow, 64].Value = (dt.Rows[i - inStartIndex]["TABLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["TABLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TABLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 65].Value = (dt.Rows[i - inStartIndex]["CROWN_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["CROWN_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CROWN_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 66].Value = (dt.Rows[i - inStartIndex]["PAV_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["PAV_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PAV_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 67].Value = (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"] != null) ? (dt.Rows[i - inStartIndex]["GIRDLE_OPEN"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["GIRDLE_OPEN"]) : "") : "";
                    worksheet.Cells[inwrkrow, 68].Value = (dt.Rows[i - inStartIndex]["SHADE_NAME"] != null) ? (dt.Rows[i - inStartIndex]["SHADE_NAME"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["SHADE_NAME"]) : "") : "";
                    worksheet.Cells[inwrkrow, 69].Value = (dt.Rows[i - inStartIndex]["MILKY"] != null) ? (dt.Rows[i - inStartIndex]["MILKY"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["MILKY"]) : "") : "";

                    worksheet.Cells[inwrkrow, 62].Style.WrapText = true;
                    worksheet.Cells[inwrkrow, 63].Style.WrapText = true;

                    if (worksheet.Row(inwrkrow).Height < 16.8)
                    {
                        worksheet.Row(inwrkrow).Height = 16.8;
                    }

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 69].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 69].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 69].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                Color H = System.Drawing.ColorTranslator.FromHtml("#93c5f7");
                Color I = System.Drawing.ColorTranslator.FromHtml("#c4bd97");
                Color T_U = System.Drawing.ColorTranslator.FromHtml("#c0c0c0");
                Color V_W = System.Drawing.ColorTranslator.FromHtml("#ffff00");
                Color X_Y = System.Drawing.ColorTranslator.FromHtml("#ff99ff");
                Color Z_AA_AB = System.Drawing.ColorTranslator.FromHtml("#ccecff");
                Color AE_AF = System.Drawing.ColorTranslator.FromHtml("#fcd5b4");
                Color AG_AH = System.Drawing.ColorTranslator.FromHtml("#66ffcc");
                Color AI_AJ = System.Drawing.ColorTranslator.FromHtml("#e4dfec");
                Color AK = System.Drawing.ColorTranslator.FromHtml("#daeef3");
                Color AL = System.Drawing.ColorTranslator.FromHtml("#99cc00");
                Color AM = System.Drawing.ColorTranslator.FromHtml("#f2dc13");
                Color AN = System.Drawing.ColorTranslator.FromHtml("#00ffff");
                Color BL = System.Drawing.ColorTranslator.FromHtml("#daeef3");

                worksheet.Cells[inStartIndex, 6, (inwrkrow - 1), 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 6, (inwrkrow - 1), 6].Style.Fill.BackgroundColor.SetColor(AM);

                worksheet.Cells[inStartIndex, 8, (inwrkrow - 1), 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 8, (inwrkrow - 1), 8].Style.Fill.BackgroundColor.SetColor(H);

                worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 9, (inwrkrow - 1), 9].Style.Fill.BackgroundColor.SetColor(I);

                worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(T_U);

                worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(V_W);

                worksheet.Cells[inStartIndex, 24, (inwrkrow - 1), 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 24, (inwrkrow - 1), 25].Style.Fill.BackgroundColor.SetColor(X_Y);

                worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 26, (inwrkrow - 1), 28].Style.Fill.BackgroundColor.SetColor(Z_AA_AB);

                worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 29, (inwrkrow - 1), 30].Style.Fill.BackgroundColor.SetColor(AE_AF);

                worksheet.Cells[inStartIndex, 31, (inwrkrow - 1), 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 31, (inwrkrow - 1), 32].Style.Fill.BackgroundColor.SetColor(AG_AH);

                worksheet.Cells[inStartIndex, 33, (inwrkrow - 1), 34].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 33, (inwrkrow - 1), 34].Style.Fill.BackgroundColor.SetColor(AI_AJ);

                worksheet.Cells[inStartIndex, 35, (inwrkrow - 1), 35].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 35, (inwrkrow - 1), 35].Style.Fill.BackgroundColor.SetColor(AK);

                worksheet.Cells[inStartIndex, 36, (inwrkrow - 1), 36].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 36, (inwrkrow - 1), 36].Style.Fill.BackgroundColor.SetColor(AL);

                worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 37].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 37, (inwrkrow - 1), 37].Style.Fill.BackgroundColor.SetColor(AM);

                worksheet.Cells[inStartIndex, 38, (inwrkrow - 1), 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 38, (inwrkrow - 1), 38].Style.Fill.BackgroundColor.SetColor(AN);

                worksheet.Cells[inStartIndex, 62, (inwrkrow - 1), 62].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[inStartIndex, 62, (inwrkrow - 1), 62].Style.Fill.BackgroundColor.SetColor(BL);

                worksheet.Cells[5, 1, 5, 69].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 69].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 69].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 69].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[inStartIndex, 5, (inwrkrow - 1), 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 69].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;


                worksheet.Cells[5, 10].Formula = "=SUBTOTAL(103,J" + inStartIndex + ":J" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 17].Formula = "=SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 19].Formula = "=SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 21].Formula = "=SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 22].Formula = "=IF(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 23].Formula = "=SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 24].Formula = "=IF(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 25].Formula = "=SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 26].Formula = "=IF(SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")=0,0,((1 - (SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*100))";
                worksheet.Cells[5, 27].Formula = "=SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")";
                worksheet.Cells[5, 28].Formula = "=+SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")";

                worksheet.Cells[5, 10].Style.Numberformat.Format = "#,##0";
                worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0.00";
                worksheet.Cells[5, 19, i, 27].Style.Numberformat.Format = "#,##0.00";

                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);

            }
        }

        public static void CreateUserActivity(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("User Activity");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "User Activity";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "User Activity";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 42].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 39].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 39].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 39].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(12);
                worksheet.Cells[6, 2].AutoFitColumns(15);
                worksheet.Cells[6, 3].AutoFitColumns(12);
                worksheet.Cells[6, 4].AutoFitColumns(15);
                worksheet.Cells[6, 5].AutoFitColumns(8);
                worksheet.Cells[6, 6].AutoFitColumns(8);
                worksheet.Cells[6, 7].AutoFitColumns(9);
                worksheet.Cells[6, 8].AutoFitColumns(9);
                worksheet.Cells[6, 9].AutoFitColumns(10);
                worksheet.Cells[6, 10].AutoFitColumns(8);
                worksheet.Cells[6, 11].AutoFitColumns(9);
                worksheet.Cells[6, 12].AutoFitColumns(8);
                worksheet.Cells[6, 13].AutoFitColumns(8);
                worksheet.Cells[6, 14].AutoFitColumns(8);
                worksheet.Cells[6, 15].AutoFitColumns(12);
                worksheet.Cells[6, 16].AutoFitColumns(15);
                worksheet.Cells[6, 17].AutoFitColumns(15);
                worksheet.Cells[6, 18].AutoFitColumns(10);
                worksheet.Cells[6, 19].AutoFitColumns(10);
                worksheet.Cells[6, 20].AutoFitColumns(10);
                worksheet.Cells[6, 21].AutoFitColumns(10);
                worksheet.Cells[6, 22].AutoFitColumns(10);
                worksheet.Cells[6, 23].AutoFitColumns(10);
                worksheet.Cells[6, 24].AutoFitColumns(10);
                worksheet.Cells[6, 25].AutoFitColumns(10);
                worksheet.Cells[6, 26].AutoFitColumns(10);
                worksheet.Cells[6, 27].AutoFitColumns(10);
                worksheet.Cells[6, 28].AutoFitColumns(17);
                worksheet.Cells[6, 29].AutoFitColumns(17);
                worksheet.Cells[6, 30].AutoFitColumns(17);
                worksheet.Cells[6, 31].AutoFitColumns(17);
                worksheet.Cells[6, 32].AutoFitColumns(17);
                worksheet.Cells[6, 33].AutoFitColumns(12);
                worksheet.Cells[6, 34].AutoFitColumns(12);
                worksheet.Cells[6, 35].AutoFitColumns(12);
                worksheet.Cells[6, 36].AutoFitColumns(12);
                worksheet.Cells[6, 37].AutoFitColumns(12);
                worksheet.Cells[6, 38].AutoFitColumns(12);
                worksheet.Cells[6, 39].AutoFitColumns(12);


                worksheet.Cells[6, 1].Value = "Trans ID";
                worksheet.Cells[6, 2].Value = "Trans Date";
                worksheet.Cells[6, 3].Value = "User Name";
                worksheet.Cells[6, 4].Value = "Company Name";
                worksheet.Cells[6, 5].Value = "Lab";
                worksheet.Cells[6, 6].Value = "Cts";
                worksheet.Cells[6, 7].Value = "Shape";
                worksheet.Cells[6, 8].Value = "Color";
                worksheet.Cells[6, 9].Value = "Clarity";
                worksheet.Cells[6, 10].Value = "Cut";
                worksheet.Cells[6, 11].Value = "Polish";
                worksheet.Cells[6, 12].Value = "Symm";
                worksheet.Cells[6, 13].Value = "Fls";
                worksheet.Cells[6, 14].Value = "Disc";
                worksheet.Cells[6, 15].Value = "Pointer";
                worksheet.Cells[6, 16].Value = "Rap Amount";
                worksheet.Cells[6, 17].Value = "Net Amount";
                worksheet.Cells[6, 18].Value = "Length";
                worksheet.Cells[6, 19].Value = "Width";
                worksheet.Cells[6, 20].Value = "Depth";
                worksheet.Cells[6, 21].Value = "Depth(%)";
                worksheet.Cells[6, 22].Value = "Table(%)";
                worksheet.Cells[6, 23].Value = "Crn Ang";
                worksheet.Cells[6, 24].Value = "Crn Ht";
                worksheet.Cells[6, 25].Value = "Pav Ang";
                worksheet.Cells[6, 26].Value = "Pav Ht";
                worksheet.Cells[6, 27].Value = "Shade";
                worksheet.Cells[6, 28].Value = "Table Inclusion";
                worksheet.Cells[6, 29].Value = "Table Natts";
                worksheet.Cells[6, 30].Value = "Crown Inclusion";
                worksheet.Cells[6, 31].Value = "Crown Natts";
                worksheet.Cells[6, 32].Value = "Milky Luster";
                worksheet.Cells[6, 33].Value = "Location";
                worksheet.Cells[6, 34].Value = "Status";
                worksheet.Cells[6, 35].Value = "Form Name";
                worksheet.Cells[6, 36].Value = "Activity";
                worksheet.Cells[6, 37].Value = "Browser Name";
                worksheet.Cells[6, 38].Value = "IP Address";
                worksheet.Cells[6, 39].Value = "Login Type";

                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                //Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                //Color cellBg1 = System.Drawing.ColorTranslator.FromHtml("#ff99cc");
                int i = 0;
                string values_2;
                Int64 number_2;
                bool success2;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    worksheet.Cells[i, 1, i, 39].Style.Font.Size = 9;
                    worksheet.Cells[i, 1, i, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[i, 1, i, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                    #region Assigns Value to Cell

                    if (dt.Rows[i - inStartIndex]["iTransId"] != null)
                    {
                        if (dt.Rows[i - inStartIndex]["iTransId"].GetType().Name != "DBNull")
                            values_2 = Convert.ToString(dt.Rows[i - inStartIndex]["iTransId"]);
                        else
                            values_2 = "";
                    }
                    else
                    {
                        values_2 = "";
                    }
                    success2 = Int64.TryParse(values_2, out number_2);
                    if (success2)
                    {
                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt64(dt.Rows[i - inStartIndex]["iTransId"]);
                    }
                    else
                    {
                        worksheet.Cells[inwrkrow, 1].Value = values_2;
                    }

                    worksheet.Cells[inwrkrow, 2].Value = (dt.Rows[i - inStartIndex]["dTransDate"] != null) ? (dt.Rows[i - inStartIndex]["dTransDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["dTransDate"]) : "") : "";
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["sUsername"] != null) ? (dt.Rows[i - inStartIndex]["sUsername"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["Cts"] != null) ? (dt.Rows[i - inStartIndex]["Cts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Cts"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";
                    worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                    worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                    worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";
                    worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                    worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["Disc"] != null) ? (dt.Rows[i - inStartIndex]["Disc"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Disc"]) : "") : "";
                    worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["RapAmount"] != null) ? (dt.Rows[i - inStartIndex]["RapAmount"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["RapAmount"]) : "") : "";
                    worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["NetAmount"] != null) ? (dt.Rows[i - inStartIndex]["NetAmount"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["NetAmount"]) : "") : "";
                    worksheet.Cells[inwrkrow, 18].Value = (dt.Rows[i - inStartIndex]["Length"] != null) ? (dt.Rows[i - inStartIndex]["Length"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Length"]) : "") : "";
                    worksheet.Cells[inwrkrow, 19].Value = (dt.Rows[i - inStartIndex]["Width"] != null) ? (dt.Rows[i - inStartIndex]["Width"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Width"]) : "") : "";
                    worksheet.Cells[inwrkrow, 20].Value = (dt.Rows[i - inStartIndex]["Depth"] != null) ? (dt.Rows[i - inStartIndex]["Depth"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Depth"]) : "") : "";
                    worksheet.Cells[inwrkrow, 21].Value = (dt.Rows[i - inStartIndex]["DepthPer"] != null) ? (dt.Rows[i - inStartIndex]["DepthPer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["DepthPer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 22].Value = (dt.Rows[i - inStartIndex]["TablePer"] != null) ? (dt.Rows[i - inStartIndex]["TablePer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["TablePer"]) : "") : "";
                    worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["CrAng"] != null) ? (dt.Rows[i - inStartIndex]["CrAng"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CrAng"]) : "") : "";
                    worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["CrHt"] != null) ? (dt.Rows[i - inStartIndex]["CrHt"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CrHt"]) : "") : "";
                    worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["PavAng"] != null) ? (dt.Rows[i - inStartIndex]["PavAng"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PavAng"]) : "") : "";
                    worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["PavHt"] != null) ? (dt.Rows[i - inStartIndex]["PavHt"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["PavHt"]) : "") : "";
                    worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["sShade"] != null) ? (dt.Rows[i - inStartIndex]["sShade"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShade"]) : "") : "";
                    worksheet.Cells[inwrkrow, 28].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                    worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                    worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                    worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                    worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["sLuster"] != null) ? (dt.Rows[i - inStartIndex]["sLuster"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLuster"]) : "") : "";
                    worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";
                    worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["sStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStatus"]) : "") : "";
                    worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["sFormName"] != null) ? (dt.Rows[i - inStartIndex]["sFormName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFormName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["sActivityType"] != null) ? (dt.Rows[i - inStartIndex]["sActivityType"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sActivityType"]) : "") : "";
                    worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["BrowserName"] != null) ? (dt.Rows[i - inStartIndex]["BrowserName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BrowserName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["IPAddr"] != null) ? (dt.Rows[i - inStartIndex]["IPAddr"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["IPAddr"]) : "") : "";
                    worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["LoginType"] != null) ? (dt.Rows[i - inStartIndex]["LoginType"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LoginType"]) : "") : "";

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[5, 1, 5, 39].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 39].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 39].Style;
                cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                    = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;

                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }

        public static void CreateOfferHistory(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath, bool isAdmin, bool isEmp, float OfferPercentage, string FromDate, string ToDate)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Offer History");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";
                worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS OFFER HISTORY FOR THE DATE " + FromDate + " TO " + ToDate;
                worksheet.Cells[1, 6].Style.Font.Size = 24;
                worksheet.Cells[1, 6].Style.Font.Bold = true;
                //worksheet.Cells[1, 6, 1, 18].Merge = true;

                Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Row(5).Height = 40;
                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 2].Style.Font.Size = 11;
                worksheet.Cells[2, 2].Style.Font.Bold = true;
                worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 6].Style.Font.Size = 11;
                worksheet.Cells[2, 6].Style.Font.Bold = true;
                worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[2, 6, 2, 19].Merge = true;

                worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[3, 6].Style.Font.Size = 11;
                worksheet.Cells[3, 6].Style.Font.Bold = true;
                worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[3, 6, 3, 18].Merge = true;

                //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells[4, 2, 4, 5].Merge = true;
                //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 2].Style.Font.Size = 9;
                //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells[4, 6, 4, 9].Merge = true;
                //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 6].Style.Font.Size = 9;

                #endregion

                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                int i = 0;
                Color colFromHex_Pointer1 = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                Color colFromHex_Dis1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color colFromHexCartTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                string Image, Video, hyprlink1, S_Detail, Certificate, cut;
                object valididty = 0, cur_rap_rate1 = 0;
                decimal offerAmt = 0, disc = 0, OfferPer = 0, cts = 0, cur_rap_rate = 0;

                worksheet.Cells[5, 1].Value = "Total";

                if (isAdmin || isEmp)
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 48].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 48].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 48].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 48].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 48].AutoFilter = true;

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 48].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[6, 1].AutoFitColumns(8);
                    worksheet.Cells[6, 2].AutoFitColumns(8);
                    worksheet.Cells[6, 3].AutoFitColumns(8);
                    worksheet.Cells[6, 4].AutoFitColumns(10);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(30);
                    worksheet.Cells[6, 8].AutoFitColumns(15);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(10);
                    worksheet.Cells[6, 11].AutoFitColumns(11);
                    worksheet.Cells[6, 12].AutoFitColumns(10);
                    worksheet.Cells[6, 13].AutoFitColumns(6.75);
                    worksheet.Cells[6, 14].AutoFitColumns(9.50);
                    worksheet.Cells[6, 15].AutoFitColumns(9);
                    worksheet.Cells[6, 16].AutoFitColumns(7);
                    worksheet.Cells[6, 17].AutoFitColumns(7);
                    worksheet.Cells[6, 18].AutoFitColumns(8);
                    worksheet.Cells[6, 19].AutoFitColumns(15);
                    worksheet.Cells[6, 20].AutoFitColumns(15);
                    worksheet.Cells[6, 21].AutoFitColumns(9);
                    worksheet.Cells[6, 22].AutoFitColumns(15);
                    worksheet.Cells[6, 23].AutoFitColumns(9);
                    worksheet.Cells[6, 24].AutoFitColumns(15);
                    worksheet.Cells[6, 25].AutoFitColumns(9);
                    worksheet.Cells[6, 26].AutoFitColumns(12);
                    worksheet.Cells[6, 27].AutoFitColumns(8);
                    worksheet.Cells[6, 28].AutoFitColumns(20);
                    worksheet.Cells[6, 29].AutoFitColumns(9);
                    worksheet.Cells[6, 30].AutoFitColumns(15);
                    worksheet.Cells[6, 31].AutoFitColumns(7);
                    worksheet.Cells[6, 32].AutoFitColumns(7);
                    worksheet.Cells[6, 33].AutoFitColumns(7);
                    worksheet.Cells[6, 34].AutoFitColumns(7);
                    worksheet.Cells[6, 35].AutoFitColumns(7);
                    worksheet.Cells[6, 36].AutoFitColumns(8);
                    worksheet.Cells[6, 37].AutoFitColumns(8);
                    worksheet.Cells[6, 38].AutoFitColumns(8);
                    worksheet.Cells[6, 39].AutoFitColumns(8);
                    worksheet.Cells[6, 40].AutoFitColumns(8);
                    worksheet.Cells[6, 41].AutoFitColumns(13);
                    worksheet.Cells[6, 42].AutoFitColumns(13);
                    worksheet.Cells[6, 43].AutoFitColumns(13);
                    worksheet.Cells[6, 44].AutoFitColumns(13);
                    worksheet.Cells[6, 45].AutoFitColumns(8);
                    worksheet.Cells[6, 46].AutoFitColumns(8);
                    worksheet.Cells[6, 47].AutoFitColumns(8);
                    worksheet.Cells[6, 48].AutoFitColumns(8);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Company Name";
                    worksheet.Cells[6, 8].Value = "User Name";
                    worksheet.Cells[6, 9].Value = "Location";
                    worksheet.Cells[6, 10].Value = "Status";
                    worksheet.Cells[6, 11].Value = "Shape";
                    worksheet.Cells[6, 12].Value = "Pointer";
                    worksheet.Cells[6, 13].Value = "Lab";
                    worksheet.Cells[6, 14].Value = "Certi Type";
                    worksheet.Cells[6, 15].Value = "BGM";
                    worksheet.Cells[6, 16].Value = "Color";
                    worksheet.Cells[6, 17].Value = "Clarity";
                    worksheet.Cells[6, 18].Value = "Cts";
                    worksheet.Cells[6, 19].Value = "Rap Price($)";
                    worksheet.Cells[6, 20].Value = "Rap Amount($)";
                    worksheet.Cells[6, 21].Value = "Disc(%)";
                    worksheet.Cells[6, 22].Value = "Net Amt($)";
                    worksheet.Cells[6, 23].Value = "Offer Disc.(%)";
                    worksheet.Cells[6, 24].Value = "Offer Amt($)";
                    worksheet.Cells[6, 25].Value = "Offer Valid Days";
                    worksheet.Cells[6, 26].Value = "Offer Valid Date";
                    worksheet.Cells[6, 27].Value = "Offer Status";
                    worksheet.Cells[6, 28].Value = "Offer Remark";
                    worksheet.Cells[6, 29].Value = "Offer Final Disc.(%)";
                    worksheet.Cells[6, 30].Value = "Offer Final Amt($)";
                    worksheet.Cells[6, 31].Value = "Cut";
                    worksheet.Cells[6, 32].Value = "Polish";
                    worksheet.Cells[6, 33].Value = "Symm";
                    worksheet.Cells[6, 34].Value = "Fls";
                    worksheet.Cells[6, 35].Value = "Ratio";
                    worksheet.Cells[6, 36].Value = "Length";
                    worksheet.Cells[6, 37].Value = "Width";
                    worksheet.Cells[6, 38].Value = "Depth";
                    worksheet.Cells[6, 39].Value = "Depth(%)";
                    worksheet.Cells[6, 40].Value = "Table(%)";
                    worksheet.Cells[6, 41].Value = "Table Black";
                    worksheet.Cells[6, 42].Value = "Crown Black";
                    worksheet.Cells[6, 43].Value = "Table White";
                    worksheet.Cells[6, 44].Value = "Crown White";
                    worksheet.Cells[6, 45].Value = "Crn Ang";
                    worksheet.Cells[6, 46].Value = "Crn Ht";
                    worksheet.Cells[6, 47].Value = "Pav Ang";
                    worksheet.Cells[6, 48].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                        worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["sUsername"] != null) ? (dt.Rows[i - inStartIndex]["sUsername"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"]) : "") : "";
                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 10].Value = asTitleCase.ToTitleCase(S_Detail);

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]);
                        //worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]) != "")
                        {
                            //var CertiTypeLink = Convert.ToString(dt.Rows[i - inStartIndex]["CertiTypeLink"]);
                            var CertiTypeLink = External_CertiTypeURL + dt.Rows[i - inStartIndex]["sRefNo"];
                            var Certi_Type = Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]);

                            worksheet.Cells[inwrkrow, 14].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                            worksheet.Cells[inwrkrow, 14].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 14].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 17].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";

                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 22].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);

                        worksheet.Cells[inwrkrow, 23].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);
                        worksheet.Cells[inwrkrow, 24].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferAmt"]);
                        worksheet.Cells[inwrkrow, 25].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        worksheet.Cells[inwrkrow, 26].Value = dt.Rows[i - inStartIndex]["SOfferValidity_ExpiryDate"].ToString();

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["SOfferValidity_Status"] == null ? "" : dt.Rows[i - inStartIndex]["SOfferValidity_Status"]) == "Active")
                        {
                            worksheet.Cells[inwrkrow, 27].Value = "Active";
                            worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 27].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 27].Value = "In Active";
                            worksheet.Cells[inwrkrow, 27].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 27].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 28].Value = dt.Rows[i - inStartIndex]["SOfferRemark"].ToString();
                        worksheet.Cells[inwrkrow, 29].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalDisc"]);
                        worksheet.Cells[inwrkrow, 30].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalAmt"]);

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 31].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 32].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 33].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 35].Value = ((dt.Rows[i - inStartIndex]["RATIO"] != null) ?
                               (dt.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dt.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null); 
                        worksheet.Cells[inwrkrow, 36].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 37].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 38].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 39].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 40].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 43].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 44].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 45].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 46].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 47].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 48].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_6 = worksheet.Cells[5, 6].Style;
                    cellStyleHeader_5_6.Border.Left.Style = cellStyleHeader_5_6.Border.Right.Style
                            = cellStyleHeader_5_6.Border.Top.Style = cellStyleHeader_5_6.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "=ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_18 = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_5_18.Border.Left.Style = cellStyleHeader_5_18.Border.Right.Style
                            = cellStyleHeader_5_18.Border.Top.Style = cellStyleHeader_5_18.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 20].Formula = "=ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_20 = worksheet.Cells[5, 20].Style;
                    cellStyleHeader_5_20.Border.Left.Style = cellStyleHeader_5_20.Border.Right.Style
                            = cellStyleHeader_5_20.Border.Top.Style = cellStyleHeader_5_20.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 21].Formula = "= IF(SUBTOTAL(109, T" + inStartIndex + ": T" + (inwrkrow - 1) + ") = 0, 0, ROUND((1 - (SUBTOTAL(109, V" + inStartIndex + ": V" + (inwrkrow - 1) + ") / SUBTOTAL(109, T" + inStartIndex + ": T" + (inwrkrow - 1) + "))) * (-100), 2))";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_21 = worksheet.Cells[5, 21].Style;
                    cellStyleHeader_5_21.Border.Left.Style = cellStyleHeader_5_21.Border.Right.Style
                            = cellStyleHeader_5_21.Border.Top.Style = cellStyleHeader_5_21.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 22].Formula = "=ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_22 = worksheet.Cells[5, 22].Style;
                    cellStyleHeader_5_22.Border.Left.Style = cellStyleHeader_5_22.Border.Right.Style
                            = cellStyleHeader_5_22.Border.Top.Style = cellStyleHeader_5_22.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 23].Formula = "=IF(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + ")/SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_23 = worksheet.Cells[5, 23].Style;
                    cellStyleHeader_5_23.Border.Left.Style = cellStyleHeader_5_23.Border.Right.Style
                            = cellStyleHeader_5_23.Border.Top.Style = cellStyleHeader_5_23.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 24].Formula = "=ROUND(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 24].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_24 = worksheet.Cells[5, 24].Style;
                    cellStyleHeader_5_24.Border.Left.Style = cellStyleHeader_5_24.Border.Right.Style
                            = cellStyleHeader_5_24.Border.Top.Style = cellStyleHeader_5_24.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 1, 5, 48].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 48].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 48].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 12, (inwrkrow - 1), 12].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 18, (inwrkrow - 1), 24].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 29, (inwrkrow - 1), 30].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 36, (inwrkrow - 1), 40].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 45, (inwrkrow - 1), 48].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 30].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[7, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Font.Bold = true;
                    worksheet.Cells[7, 23, (inwrkrow - 1), 24].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 29, (inwrkrow - 1), 30].Style.Font.Bold = true;
                    worksheet.Cells[7, 29, (inwrkrow - 1), 30].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);


                }
                else
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 46].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 46].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 46].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 46].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 46].AutoFilter = true;

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 46].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[6, 1].AutoFitColumns(8);
                    worksheet.Cells[6, 2].AutoFitColumns(8);
                    worksheet.Cells[6, 3].AutoFitColumns(8);
                    worksheet.Cells[6, 4].AutoFitColumns(10);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(11);
                    worksheet.Cells[6, 8].AutoFitColumns(10);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(10);
                    worksheet.Cells[6, 11].AutoFitColumns(6.75);
                    worksheet.Cells[6, 12].AutoFitColumns(9.50);
                    worksheet.Cells[6, 13].AutoFitColumns(9);
                    worksheet.Cells[6, 14].AutoFitColumns(7);
                    worksheet.Cells[6, 15].AutoFitColumns(7);
                    worksheet.Cells[6, 16].AutoFitColumns(8);
                    worksheet.Cells[6, 17].AutoFitColumns(15);
                    worksheet.Cells[6, 18].AutoFitColumns(15);
                    worksheet.Cells[6, 19].AutoFitColumns(9);
                    worksheet.Cells[6, 20].AutoFitColumns(15);
                    worksheet.Cells[6, 21].AutoFitColumns(9);
                    worksheet.Cells[6, 22].AutoFitColumns(15);
                    worksheet.Cells[6, 23].AutoFitColumns(9);
                    worksheet.Cells[6, 24].AutoFitColumns(12);
                    worksheet.Cells[6, 25].AutoFitColumns(9);
                    worksheet.Cells[6, 26].AutoFitColumns(20);
                    worksheet.Cells[6, 27].AutoFitColumns(9);
                    worksheet.Cells[6, 28].AutoFitColumns(15);
                    worksheet.Cells[6, 29].AutoFitColumns(7);
                    worksheet.Cells[6, 30].AutoFitColumns(7);
                    worksheet.Cells[6, 31].AutoFitColumns(7);
                    worksheet.Cells[6, 32].AutoFitColumns(7);
                    worksheet.Cells[6, 33].AutoFitColumns(7.86);
                    worksheet.Cells[6, 34].AutoFitColumns(8);
                    worksheet.Cells[6, 35].AutoFitColumns(8);
                    worksheet.Cells[6, 36].AutoFitColumns(8);
                    worksheet.Cells[6, 37].AutoFitColumns(8);
                    worksheet.Cells[6, 38].AutoFitColumns(8);
                    worksheet.Cells[6, 39].AutoFitColumns(13);
                    worksheet.Cells[6, 40].AutoFitColumns(13);
                    worksheet.Cells[6, 41].AutoFitColumns(13);
                    worksheet.Cells[6, 42].AutoFitColumns(13);
                    worksheet.Cells[6, 43].AutoFitColumns(8);
                    worksheet.Cells[6, 44].AutoFitColumns(8);
                    worksheet.Cells[6, 45].AutoFitColumns(8);
                    worksheet.Cells[6, 46].AutoFitColumns(8);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Location";
                    worksheet.Cells[6, 8].Value = "Status";
                    worksheet.Cells[6, 9].Value = "Shape";
                    worksheet.Cells[6, 10].Value = "Pointer";
                    worksheet.Cells[6, 11].Value = "Lab";
                    worksheet.Cells[6, 12].Value = "Certi Type";
                    worksheet.Cells[6, 13].Value = "BGM";
                    worksheet.Cells[6, 14].Value = "Color";
                    worksheet.Cells[6, 15].Value = "Clarity";
                    worksheet.Cells[6, 16].Value = "Cts";
                    worksheet.Cells[6, 17].Value = "Rap Price($)";
                    worksheet.Cells[6, 18].Value = "Rap Amount($)";
                    worksheet.Cells[6, 19].Value = "Disc(%)";
                    worksheet.Cells[6, 20].Value = "Net Amt($)";
                    worksheet.Cells[6, 21].Value = "Offer Disc.(%)";
                    worksheet.Cells[6, 22].Value = "Offer Amt($)";
                    worksheet.Cells[6, 23].Value = "Offer Valid Days";
                    worksheet.Cells[6, 24].Value = "Offer Valid Date";
                    worksheet.Cells[6, 25].Value = "Offer Status";
                    worksheet.Cells[6, 26].Value = "Offer Remark";
                    worksheet.Cells[6, 27].Value = "Offer Final Disc.(%)";
                    worksheet.Cells[6, 28].Value = "Offer Final Amt($)";
                    worksheet.Cells[6, 29].Value = "Cut";
                    worksheet.Cells[6, 30].Value = "Polish";
                    worksheet.Cells[6, 31].Value = "Symm";
                    worksheet.Cells[6, 32].Value = "Fls";
                    worksheet.Cells[6, 33].Value = "Ratio";
                    worksheet.Cells[6, 34].Value = "Length";
                    worksheet.Cells[6, 35].Value = "Width";
                    worksheet.Cells[6, 36].Value = "Depth";
                    worksheet.Cells[6, 37].Value = "Depth(%)";
                    worksheet.Cells[6, 38].Value = "Table(%)";
                    worksheet.Cells[6, 39].Value = "Table Black";
                    worksheet.Cells[6, 40].Value = "Crown Black";
                    worksheet.Cells[6, 41].Value = "Table White";
                    worksheet.Cells[6, 42].Value = "Crown White";
                    worksheet.Cells[6, 43].Value = "Crn Ang";
                    worksheet.Cells[6, 44].Value = "Crn Ht";
                    worksheet.Cells[6, 45].Value = "Pav Ang";
                    worksheet.Cells[6, 46].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(S_Detail);

                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]);
                        //worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]) != "")
                        {
                            //var CertiTypeLink = Convert.ToString(dt.Rows[i - inStartIndex]["CertiTypeLink"]);
                            var CertiTypeLink = External_CertiTypeURL + dt.Rows[i - inStartIndex]["sRefNo"];
                            var Certi_Type = Convert.ToString(dt.Rows[i - inStartIndex]["Certi_Type"]);

                            worksheet.Cells[inwrkrow, 12].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                            worksheet.Cells[inwrkrow, 12].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";

                        worksheet.Cells[inwrkrow, 16].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);

                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);
                        worksheet.Cells[inwrkrow, 22].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferAmt"]);
                        worksheet.Cells[inwrkrow, 23].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        worksheet.Cells[inwrkrow, 24].Value = dt.Rows[i - inStartIndex]["SOfferValidity_ExpiryDate"].ToString();

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["SOfferValidity_Status"] == null ? "" : dt.Rows[i - inStartIndex]["SOfferValidity_Status"]) == "Active")
                        {
                            worksheet.Cells[inwrkrow, 25].Value = "Active";
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 25].Value = "In Active";
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 26].Value = dt.Rows[i - inStartIndex]["SOfferRemark"].ToString();
                        worksheet.Cells[inwrkrow, 27].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalDisc"]);
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalAmt"]);

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 29].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 29].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        
                        worksheet.Cells[inwrkrow, 33].Value = ((dt.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dt.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dt.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null); 
                        
                        worksheet.Cells[inwrkrow, 34].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 35].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 36].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 37].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 38].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 43].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 44].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 45].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 46].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_6 = worksheet.Cells[5, 6].Style;
                    cellStyleHeader_5_6.Border.Left.Style = cellStyleHeader_5_6.Border.Right.Style
                            = cellStyleHeader_5_6.Border.Top.Style = cellStyleHeader_5_6.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 16].Formula = "=ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_16 = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_5_16.Border.Left.Style = cellStyleHeader_5_16.Border.Right.Style
                            = cellStyleHeader_5_16.Border.Top.Style = cellStyleHeader_5_16.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 18].Formula = "=ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_18 = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_5_18.Border.Left.Style = cellStyleHeader_5_18.Border.Right.Style
                            = cellStyleHeader_5_18.Border.Top.Style = cellStyleHeader_5_18.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 19].Formula = "= IF(SUBTOTAL(109, R" + inStartIndex + ": R" + (inwrkrow - 1) + ") = 0, 0, ROUND((1 - (SUBTOTAL(109, T" + inStartIndex + ": T" + (inwrkrow - 1) + ") / SUBTOTAL(109, R" + inStartIndex + ": R" + (inwrkrow - 1) + "))) * (-100), 2))";
                    worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_19 = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_5_19.Border.Left.Style = cellStyleHeader_5_19.Border.Right.Style
                            = cellStyleHeader_5_19.Border.Top.Style = cellStyleHeader_5_19.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 20].Formula = "=ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_20 = worksheet.Cells[5, 20].Style;
                    cellStyleHeader_5_20.Border.Left.Style = cellStyleHeader_5_20.Border.Right.Style
                            = cellStyleHeader_5_19.Border.Top.Style = cellStyleHeader_5_20.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 21].Formula = "=IF(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_21 = worksheet.Cells[5, 21].Style;
                    cellStyleHeader_5_21.Border.Left.Style = cellStyleHeader_5_21.Border.Right.Style
                            = cellStyleHeader_5_21.Border.Top.Style = cellStyleHeader_5_21.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 22].Formula = "=ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_22 = worksheet.Cells[5, 22].Style;
                    cellStyleHeader_5_22.Border.Left.Style = cellStyleHeader_5_22.Border.Right.Style
                            = cellStyleHeader_5_22.Border.Top.Style = cellStyleHeader_5_22.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 1, 5, 46].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 46].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 10, (inwrkrow - 1), 10].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 16, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 27, (inwrkrow - 1), 28].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 34, (inwrkrow - 1), 38].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 43, (inwrkrow - 1), 46].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 28].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;
                    worksheet.Cells[7, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[7, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 27, (inwrkrow - 1), 28].Style.Font.Bold = true;
                    worksheet.Cells[7, 27, (inwrkrow - 1), 28].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);


                }
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }
        public static void CreateOfferHistory_2(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath, bool isAdmin, bool isEmp, float OfferPercentage, string FromDate, string ToDate)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Offer History");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";
                worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS OFFER HISTORY FOR THE DATE " + FromDate + " TO " + ToDate;
                worksheet.Cells[1, 6].Style.Font.Size = 24;
                worksheet.Cells[1, 6].Style.Font.Bold = true;
                //worksheet.Cells[1, 6, 1, 18].Merge = true;

                Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Row(5).Height = 40;
                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 2].Style.Font.Size = 11;
                worksheet.Cells[2, 2].Style.Font.Bold = true;
                worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 6].Style.Font.Size = 11;
                worksheet.Cells[2, 6].Style.Font.Bold = true;
                worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[2, 6, 2, 19].Merge = true;

                worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[3, 6].Style.Font.Size = 11;
                worksheet.Cells[3, 6].Style.Font.Bold = true;
                worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[3, 6, 3, 18].Merge = true;

                //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells[4, 2, 4, 5].Merge = true;
                //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 2].Style.Font.Size = 9;
                //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells[4, 6, 4, 9].Merge = true;
                //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 6].Style.Font.Size = 9;

                #endregion

                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                int i = 0;
                Color colFromHex_Pointer1 = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                Color colFromHex_Dis1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color colFromHexCartTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                string Image, Video, hyprlink1, S_Detail, Certificate, cut;
                object valididty = 0, cur_rap_rate1 = 0;
                decimal offerAmt = 0, disc = 0, OfferPer = 0, cts = 0, cur_rap_rate = 0;

                worksheet.Cells[5, 1].Value = "Total";

                if (isAdmin || isEmp)
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 46].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 46].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 46].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 46].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 46].AutoFilter = true;

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 46].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[6, 1].AutoFitColumns(8);
                    worksheet.Cells[6, 2].AutoFitColumns(8);
                    worksheet.Cells[6, 3].AutoFitColumns(8);
                    worksheet.Cells[6, 4].AutoFitColumns(10);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(30);
                    worksheet.Cells[6, 8].AutoFitColumns(15);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(10);
                    worksheet.Cells[6, 11].AutoFitColumns(11);
                    worksheet.Cells[6, 12].AutoFitColumns(10);
                    worksheet.Cells[6, 13].AutoFitColumns(6);
                    worksheet.Cells[6, 14].AutoFitColumns(9);
                    worksheet.Cells[6, 15].AutoFitColumns(7);
                    worksheet.Cells[6, 16].AutoFitColumns(7);
                    worksheet.Cells[6, 17].AutoFitColumns(8);
                    worksheet.Cells[6, 18].AutoFitColumns(15);
                    worksheet.Cells[6, 19].AutoFitColumns(15);
                    worksheet.Cells[6, 20].AutoFitColumns(9);
                    worksheet.Cells[6, 21].AutoFitColumns(15);
                    worksheet.Cells[6, 22].AutoFitColumns(9);
                    worksheet.Cells[6, 23].AutoFitColumns(15);
                    worksheet.Cells[6, 24].AutoFitColumns(9);
                    worksheet.Cells[6, 25].AutoFitColumns(12);
                    worksheet.Cells[6, 26].AutoFitColumns(8);
                    worksheet.Cells[6, 27].AutoFitColumns(20);
                    worksheet.Cells[6, 28].AutoFitColumns(9);
                    worksheet.Cells[6, 29].AutoFitColumns(15);
                    worksheet.Cells[6, 30].AutoFitColumns(7);
                    worksheet.Cells[6, 31].AutoFitColumns(7);
                    worksheet.Cells[6, 32].AutoFitColumns(7);
                    worksheet.Cells[6, 33].AutoFitColumns(7);
                    worksheet.Cells[6, 34].AutoFitColumns(8);
                    worksheet.Cells[6, 35].AutoFitColumns(8);
                    worksheet.Cells[6, 36].AutoFitColumns(8);
                    worksheet.Cells[6, 37].AutoFitColumns(8);
                    worksheet.Cells[6, 38].AutoFitColumns(8);
                    worksheet.Cells[6, 39].AutoFitColumns(13);
                    worksheet.Cells[6, 40].AutoFitColumns(13);
                    worksheet.Cells[6, 41].AutoFitColumns(13);
                    worksheet.Cells[6, 42].AutoFitColumns(13);
                    worksheet.Cells[6, 43].AutoFitColumns(8);
                    worksheet.Cells[6, 44].AutoFitColumns(8);
                    worksheet.Cells[6, 45].AutoFitColumns(8);
                    worksheet.Cells[6, 46].AutoFitColumns(8);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Company Name";
                    worksheet.Cells[6, 8].Value = "User Name";
                    worksheet.Cells[6, 9].Value = "Location";
                    worksheet.Cells[6, 10].Value = "Status";
                    worksheet.Cells[6, 11].Value = "Shape";
                    worksheet.Cells[6, 12].Value = "Pointer";
                    worksheet.Cells[6, 13].Value = "Lab";
                    worksheet.Cells[6, 14].Value = "BGM";
                    worksheet.Cells[6, 15].Value = "Color";
                    worksheet.Cells[6, 16].Value = "Clarity";
                    worksheet.Cells[6, 17].Value = "Cts";
                    worksheet.Cells[6, 18].Value = "Rap Price($)";
                    worksheet.Cells[6, 19].Value = "Rap Amount($)";
                    worksheet.Cells[6, 20].Value = "Disc(%)";
                    worksheet.Cells[6, 21].Value = "Net Amt($)";
                    worksheet.Cells[6, 22].Value = "Offer Disc.(%)";
                    worksheet.Cells[6, 23].Value = "Offer Amt($)";
                    worksheet.Cells[6, 24].Value = "Offer Valid Days";
                    worksheet.Cells[6, 25].Value = "Offer Valid Date";
                    worksheet.Cells[6, 26].Value = "Offer Status";
                    worksheet.Cells[6, 27].Value = "Offer Remark";
                    worksheet.Cells[6, 28].Value = "Offer Final Disc.(%)";
                    worksheet.Cells[6, 29].Value = "Offer Final Amt($)";
                    worksheet.Cells[6, 30].Value = "Cut";
                    worksheet.Cells[6, 31].Value = "Polish";
                    worksheet.Cells[6, 32].Value = "Symm";
                    worksheet.Cells[6, 33].Value = "Fls";
                    worksheet.Cells[6, 34].Value = "Length";
                    worksheet.Cells[6, 35].Value = "Width";
                    worksheet.Cells[6, 36].Value = "Depth";
                    worksheet.Cells[6, 37].Value = "Depth(%)";
                    worksheet.Cells[6, 38].Value = "Table(%)";
                    worksheet.Cells[6, 39].Value = "Table Black";
                    worksheet.Cells[6, 40].Value = "Crown Black";
                    worksheet.Cells[6, 41].Value = "Table White";
                    worksheet.Cells[6, 42].Value = "Crown White";
                    worksheet.Cells[6, 43].Value = "Crn Ang";
                    worksheet.Cells[6, 44].Value = "Crn Ht";
                    worksheet.Cells[6, 45].Value = "Pav Ang";
                    worksheet.Cells[6, 46].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                        worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["sUsername"] != null) ? (dt.Rows[i - inStartIndex]["sUsername"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"]) : "") : "";
                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 10].Value = asTitleCase.ToTitleCase(S_Detail);

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";

                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);

                        worksheet.Cells[inwrkrow, 22].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);
                        worksheet.Cells[inwrkrow, 23].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferAmt"]);
                        worksheet.Cells[inwrkrow, 24].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        worksheet.Cells[inwrkrow, 25].Value = dt.Rows[i - inStartIndex]["SOfferValidity_ExpiryDate"].ToString();

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["SOfferValidity_Status"] == null ? "" : dt.Rows[i - inStartIndex]["SOfferValidity_Status"]) == "Active")
                        {
                            worksheet.Cells[inwrkrow, 26].Value = "Active";
                            worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 26].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 26].Value = "In Active";
                            worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 26].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 27].Value = dt.Rows[i - inStartIndex]["SOfferRemark"].ToString();
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalDisc"]);
                        worksheet.Cells[inwrkrow, 29].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalAmt"]);

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 30].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 31].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 32].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 34].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 35].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 36].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 37].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 38].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 42].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 43].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 44].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 45].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 46].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_6 = worksheet.Cells[5, 6].Style;
                    cellStyleHeader_5_6.Border.Left.Style = cellStyleHeader_5_6.Border.Right.Style
                            = cellStyleHeader_5_6.Border.Top.Style = cellStyleHeader_5_6.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "=ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_17 = worksheet.Cells[5, 17].Style;
                    cellStyleHeader_5_17.Border.Left.Style = cellStyleHeader_5_17.Border.Right.Style
                            = cellStyleHeader_5_17.Border.Top.Style = cellStyleHeader_5_17.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 19].Formula = "=ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_19 = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_5_19.Border.Left.Style = cellStyleHeader_5_19.Border.Right.Style
                            = cellStyleHeader_5_19.Border.Top.Style = cellStyleHeader_5_19.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 20].Formula = "= IF(SUBTOTAL(109, S" + inStartIndex + ": S" + (inwrkrow - 1) + ") = 0, 0, ROUND((1 - (SUBTOTAL(109, U" + inStartIndex + ": U" + (inwrkrow - 1) + ") / SUBTOTAL(109, S" + inStartIndex + ": S" + (inwrkrow - 1) + "))) * (-100), 2))";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_20 = worksheet.Cells[5, 20].Style;
                    cellStyleHeader_5_20.Border.Left.Style = cellStyleHeader_5_20.Border.Right.Style
                            = cellStyleHeader_5_20.Border.Top.Style = cellStyleHeader_5_20.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 21].Formula = "=ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_21 = worksheet.Cells[5, 21].Style;
                    cellStyleHeader_5_21.Border.Left.Style = cellStyleHeader_5_21.Border.Right.Style
                            = cellStyleHeader_5_21.Border.Top.Style = cellStyleHeader_5_21.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 22].Formula = "=IF(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ")/SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_22 = worksheet.Cells[5, 22].Style;
                    cellStyleHeader_5_22.Border.Left.Style = cellStyleHeader_5_22.Border.Right.Style
                            = cellStyleHeader_5_22.Border.Top.Style = cellStyleHeader_5_22.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 23].Formula = "=ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_23 = worksheet.Cells[5, 23].Style;
                    cellStyleHeader_5_23.Border.Left.Style = cellStyleHeader_5_23.Border.Right.Style
                            = cellStyleHeader_5_23.Border.Top.Style = cellStyleHeader_5_23.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 1, 5, 46].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 46].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 12, (inwrkrow - 1), 12].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 17, (inwrkrow - 1), 23].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 28, (inwrkrow - 1), 29].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 34, (inwrkrow - 1), 38].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 43, (inwrkrow - 1), 46].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 29].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Font.Bold = true;
                    worksheet.Cells[7, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 22, (inwrkrow - 1), 23].Style.Font.Bold = true;
                    worksheet.Cells[7, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 28, (inwrkrow - 1), 29].Style.Font.Bold = true;
                    worksheet.Cells[7, 28, (inwrkrow - 1), 29].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);


                }
                else
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 44].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 44].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 44].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 44].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 44].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 44].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 44].AutoFilter = true;

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 44].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[6, 1].AutoFitColumns(8);
                    worksheet.Cells[6, 2].AutoFitColumns(8);
                    worksheet.Cells[6, 3].AutoFitColumns(8);
                    worksheet.Cells[6, 4].AutoFitColumns(10);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(11);
                    worksheet.Cells[6, 8].AutoFitColumns(10);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(10);
                    worksheet.Cells[6, 11].AutoFitColumns(6);
                    worksheet.Cells[6, 12].AutoFitColumns(9);
                    worksheet.Cells[6, 13].AutoFitColumns(7);
                    worksheet.Cells[6, 14].AutoFitColumns(7);
                    worksheet.Cells[6, 15].AutoFitColumns(8);
                    worksheet.Cells[6, 16].AutoFitColumns(15);
                    worksheet.Cells[6, 17].AutoFitColumns(15);
                    worksheet.Cells[6, 18].AutoFitColumns(9);
                    worksheet.Cells[6, 19].AutoFitColumns(15);
                    worksheet.Cells[6, 20].AutoFitColumns(9);
                    worksheet.Cells[6, 21].AutoFitColumns(15);
                    worksheet.Cells[6, 22].AutoFitColumns(9);
                    worksheet.Cells[6, 23].AutoFitColumns(12);
                    worksheet.Cells[6, 24].AutoFitColumns(9);
                    worksheet.Cells[6, 25].AutoFitColumns(20);
                    worksheet.Cells[6, 26].AutoFitColumns(9);
                    worksheet.Cells[6, 27].AutoFitColumns(15);
                    worksheet.Cells[6, 28].AutoFitColumns(7);
                    worksheet.Cells[6, 29].AutoFitColumns(7);
                    worksheet.Cells[6, 30].AutoFitColumns(7);
                    worksheet.Cells[6, 31].AutoFitColumns(7);
                    worksheet.Cells[6, 32].AutoFitColumns(8);
                    worksheet.Cells[6, 33].AutoFitColumns(8);
                    worksheet.Cells[6, 34].AutoFitColumns(8);
                    worksheet.Cells[6, 35].AutoFitColumns(8);
                    worksheet.Cells[6, 36].AutoFitColumns(8);
                    worksheet.Cells[6, 37].AutoFitColumns(13);
                    worksheet.Cells[6, 38].AutoFitColumns(13);
                    worksheet.Cells[6, 39].AutoFitColumns(13);
                    worksheet.Cells[6, 40].AutoFitColumns(13);
                    worksheet.Cells[6, 41].AutoFitColumns(8);
                    worksheet.Cells[6, 42].AutoFitColumns(8);
                    worksheet.Cells[6, 43].AutoFitColumns(8);
                    worksheet.Cells[6, 44].AutoFitColumns(8);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Location";
                    worksheet.Cells[6, 8].Value = "Status";
                    worksheet.Cells[6, 9].Value = "Shape";
                    worksheet.Cells[6, 10].Value = "Pointer";
                    worksheet.Cells[6, 11].Value = "Lab";
                    worksheet.Cells[6, 12].Value = "BGM";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cts";
                    worksheet.Cells[6, 16].Value = "Rap Price($)";
                    worksheet.Cells[6, 17].Value = "Rap Amount($)";
                    worksheet.Cells[6, 18].Value = "Disc(%)";
                    worksheet.Cells[6, 19].Value = "Net Amt($)";
                    worksheet.Cells[6, 20].Value = "Offer Disc.(%)";
                    worksheet.Cells[6, 21].Value = "Offer Amt($)";
                    worksheet.Cells[6, 22].Value = "Offer Valid Days";
                    worksheet.Cells[6, 23].Value = "Offer Valid Date";
                    worksheet.Cells[6, 24].Value = "Offer Status";
                    worksheet.Cells[6, 25].Value = "Offer Remark";
                    worksheet.Cells[6, 26].Value = "Offer Final Disc.(%)";
                    worksheet.Cells[6, 27].Value = "Offer Final Amt($)";
                    worksheet.Cells[6, 28].Value = "Cut";
                    worksheet.Cells[6, 29].Value = "Polish";
                    worksheet.Cells[6, 30].Value = "Symm";
                    worksheet.Cells[6, 31].Value = "Fls";
                    worksheet.Cells[6, 32].Value = "Length";
                    worksheet.Cells[6, 33].Value = "Width";
                    worksheet.Cells[6, 34].Value = "Depth";
                    worksheet.Cells[6, 35].Value = "Depth(%)";
                    worksheet.Cells[6, 36].Value = "Table(%)";
                    worksheet.Cells[6, 37].Value = "Table Black";
                    worksheet.Cells[6, 38].Value = "Crown Black";
                    worksheet.Cells[6, 39].Value = "Table White";
                    worksheet.Cells[6, 40].Value = "Crown White";
                    worksheet.Cells[6, 41].Value = "Crn Ang";
                    worksheet.Cells[6, 42].Value = "Crn Ht";
                    worksheet.Cells[6, 43].Value = "Pav Ang";
                    worksheet.Cells[6, 44].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(S_Detail);

                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";

                        worksheet.Cells[inwrkrow, 15].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 16].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);

                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);
                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferAmt"]);
                        worksheet.Cells[inwrkrow, 22].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        worksheet.Cells[inwrkrow, 23].Value = dt.Rows[i - inStartIndex]["SOfferValidity_ExpiryDate"].ToString();

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["SOfferValidity_Status"] == null ? "" : dt.Rows[i - inStartIndex]["SOfferValidity_Status"]) == "Active")
                        {
                            worksheet.Cells[inwrkrow, 24].Value = "Active";
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Color.SetColor(Color.Green);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 24].Value = "In Active";
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Color.SetColor(Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 25].Value = dt.Rows[i - inStartIndex]["SOfferRemark"].ToString();
                        worksheet.Cells[inwrkrow, 26].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalDisc"]);
                        worksheet.Cells[inwrkrow, 27].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferFinalAmt"]);

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 28].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 29].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 30].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 28].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 29].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 32].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 33].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 34].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 35].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 36].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 37].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 38].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 39].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 40].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 41].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 42].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 43].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 44].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 44].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 44].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_6 = worksheet.Cells[5, 6].Style;
                    cellStyleHeader_5_6.Border.Left.Style = cellStyleHeader_5_6.Border.Right.Style
                            = cellStyleHeader_5_6.Border.Top.Style = cellStyleHeader_5_6.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 15].Formula = "=ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_15 = worksheet.Cells[5, 15].Style;
                    cellStyleHeader_5_15.Border.Left.Style = cellStyleHeader_5_15.Border.Right.Style
                            = cellStyleHeader_5_15.Border.Top.Style = cellStyleHeader_5_15.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 17].Formula = "=ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_17 = worksheet.Cells[5, 17].Style;
                    cellStyleHeader_5_17.Border.Left.Style = cellStyleHeader_5_17.Border.Right.Style
                            = cellStyleHeader_5_17.Border.Top.Style = cellStyleHeader_5_17.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 18].Formula = "= IF(SUBTOTAL(109, Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ") = 0, 0, ROUND((1 - (SUBTOTAL(109, S" + inStartIndex + ": S" + (inwrkrow - 1) + ") / SUBTOTAL(109, Q" + inStartIndex + ": Q" + (inwrkrow - 1) + "))) * (-100), 2))";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_18 = worksheet.Cells[5, 18].Style;
                    cellStyleHeader_5_18.Border.Left.Style = cellStyleHeader_5_18.Border.Right.Style
                            = cellStyleHeader_5_18.Border.Top.Style = cellStyleHeader_5_18.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 19].Formula = "=ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_19 = worksheet.Cells[5, 19].Style;
                    cellStyleHeader_5_19.Border.Left.Style = cellStyleHeader_5_19.Border.Right.Style
                            = cellStyleHeader_5_19.Border.Top.Style = cellStyleHeader_5_19.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 20].Formula = "=IF(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_20 = worksheet.Cells[5, 20].Style;
                    cellStyleHeader_5_20.Border.Left.Style = cellStyleHeader_5_20.Border.Right.Style
                            = cellStyleHeader_5_20.Border.Top.Style = cellStyleHeader_5_20.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 21].Formula = "=ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_5_21 = worksheet.Cells[5, 21].Style;
                    cellStyleHeader_5_21.Border.Left.Style = cellStyleHeader_5_21.Border.Right.Style
                            = cellStyleHeader_5_21.Border.Top.Style = cellStyleHeader_5_21.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    worksheet.Cells[5, 1, 5, 44].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 44].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 44].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 10, (inwrkrow - 1), 10].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 15, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 26, (inwrkrow - 1), 27].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 32, (inwrkrow - 1), 36].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 41, (inwrkrow - 1), 44].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 27].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 18, (inwrkrow - 1), 19].Style.Font.Bold = true;
                    worksheet.Cells[7, 18, (inwrkrow - 1), 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Font.Bold = true;
                    worksheet.Cells[7, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 26, (inwrkrow - 1), 27].Style.Font.Bold = true;
                    worksheet.Cells[7, 26, (inwrkrow - 1), 27].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);


                }
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }
        public static void CreateOfferHistory_1(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath, bool isAdmin, bool isEmp, float OfferPercentage)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Offer History");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";
                worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + DateTime.Now.ToString("dd-MM-yyyy");
                worksheet.Cells[1, 6].Style.Font.Size = 24;
                worksheet.Cells[1, 6].Style.Font.Bold = true;
                //worksheet.Cells[1, 6, 1, 18].Merge = true;

                Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Row(5).Height = 40;
                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 2].Style.Font.Size = 11;
                worksheet.Cells[2, 2].Style.Font.Bold = true;
                worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[2, 6].Style.Font.Size = 11;
                worksheet.Cells[2, 6].Style.Font.Bold = true;
                worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[2, 6, 2, 19].Merge = true;

                worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                worksheet.Cells[3, 6].Style.Font.Size = 11;
                worksheet.Cells[3, 6].Style.Font.Bold = true;
                worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                //worksheet.Cells[3, 6, 3, 18].Merge = true;

                //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                //worksheet.Cells[4, 2, 4, 5].Merge = true;
                //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 2].Style.Font.Size = 9;
                //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                //worksheet.Cells[4, 6, 4, 9].Merge = true;
                //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                //worksheet.Cells[4, 6].Style.Font.Size = 9;

                #endregion

                var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                int i = 0;
                Color colFromHex_Pointer1 = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                Color colFromHex_Dis1 = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                Color colFromHexCartTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");

                string Image, Video, hyprlink1, S_Detail, Certificate, cut;
                object valididty = 0, cur_rap_rate1 = 0;
                decimal offerAmt = 0, disc = 0, OfferPer = 0, cts = 0, cur_rap_rate = 0;

                worksheet.Cells[5, 1].Value = "Total";

                if (isAdmin || isEmp)
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 40].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 40].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 40].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 40].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 40].AutoFilter = true;

                    worksheet.Cells[6, 1].AutoFitColumns(8.86);
                    worksheet.Cells[6, 2].AutoFitColumns(9);
                    worksheet.Cells[6, 3].AutoFitColumns(12);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(15);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(29);
                    worksheet.Cells[6, 8].AutoFitColumns(12);
                    worksheet.Cells[6, 9].AutoFitColumns(12);
                    worksheet.Cells[6, 10].AutoFitColumns(16);
                    worksheet.Cells[6, 11].AutoFitColumns(11);
                    worksheet.Cells[6, 12].AutoFitColumns(12);
                    worksheet.Cells[6, 13].AutoFitColumns(8);
                    worksheet.Cells[6, 14].AutoFitColumns(11);
                    worksheet.Cells[6, 15].AutoFitColumns(8);
                    worksheet.Cells[6, 16].AutoFitColumns(8);
                    worksheet.Cells[6, 17].AutoFitColumns(8);
                    worksheet.Cells[6, 18].AutoFitColumns(15);
                    worksheet.Cells[6, 19].AutoFitColumns(8);
                    worksheet.Cells[6, 20].AutoFitColumns(15);
                    worksheet.Cells[6, 21].AutoFitColumns(10);
                    worksheet.Cells[6, 22].AutoFitColumns(10);
                    worksheet.Cells[6, 23].AutoFitColumns(15);
                    worksheet.Cells[6, 24].AutoFitColumns(8);
                    worksheet.Cells[6, 25].AutoFitColumns(9);
                    worksheet.Cells[6, 26].AutoFitColumns(8);
                    worksheet.Cells[6, 27].AutoFitColumns(8);
                    worksheet.Cells[6, 28].AutoFitColumns(10);
                    worksheet.Cells[6, 29].AutoFitColumns(10);
                    worksheet.Cells[6, 30].AutoFitColumns(10);
                    worksheet.Cells[6, 31].AutoFitColumns(10);
                    worksheet.Cells[6, 32].AutoFitColumns(10);
                    worksheet.Cells[6, 33].AutoFitColumns(17);
                    worksheet.Cells[6, 34].AutoFitColumns(17);
                    worksheet.Cells[6, 35].AutoFitColumns(17);
                    worksheet.Cells[6, 36].AutoFitColumns(17);
                    worksheet.Cells[6, 37].AutoFitColumns(10);
                    worksheet.Cells[6, 38].AutoFitColumns(10);
                    worksheet.Cells[6, 39].AutoFitColumns(10);
                    worksheet.Cells[6, 40].AutoFitColumns(10);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Company Name";
                    worksheet.Cells[6, 8].Value = "User Name";
                    worksheet.Cells[6, 9].Value = "Location";
                    worksheet.Cells[6, 10].Value = "Status";
                    worksheet.Cells[6, 11].Value = "Shape";
                    worksheet.Cells[6, 12].Value = "Pointer";
                    worksheet.Cells[6, 13].Value = "Lab";
                    worksheet.Cells[6, 14].Value = "BGM";
                    worksheet.Cells[6, 15].Value = "Color";
                    worksheet.Cells[6, 16].Value = "Clarity";
                    worksheet.Cells[6, 17].Value = "Cts";
                    worksheet.Cells[6, 18].Value = "Rap Amount($)";
                    worksheet.Cells[6, 19].Value = "Disc(%)";
                    worksheet.Cells[6, 20].Value = "Net Amount($)";
                    worksheet.Cells[6, 21].Value = "Offer Disc";
                    worksheet.Cells[6, 22].Value = "Offer Amt";
                    worksheet.Cells[6, 23].Value = "Offer Valid Days";
                    worksheet.Cells[6, 24].Value = "Cut";
                    worksheet.Cells[6, 25].Value = "Polish";
                    worksheet.Cells[6, 26].Value = "Symm";
                    worksheet.Cells[6, 27].Value = "Fls";
                    worksheet.Cells[6, 28].Value = "Length";
                    worksheet.Cells[6, 29].Value = "Width";
                    worksheet.Cells[6, 30].Value = "Depth";
                    worksheet.Cells[6, 31].Value = "Depth(%)";
                    worksheet.Cells[6, 32].Value = "Table(%)";
                    worksheet.Cells[6, 33].Value = "Table Black";
                    worksheet.Cells[6, 34].Value = "Crown Black";
                    worksheet.Cells[6, 35].Value = "Table White";
                    worksheet.Cells[6, 36].Value = "Crown White";
                    worksheet.Cells[6, 37].Value = "Crn Ang";
                    worksheet.Cells[6, 38].Value = "Crn Ht";
                    worksheet.Cells[6, 39].Value = "Pav Ang";
                    worksheet.Cells[6, 40].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dt.Rows[i - inStartIndex]["image_url"] == null ? "" : dt.Rows[i - inStartIndex]["image_url"]);
                        //if (dt.Rows[i - inStartIndex]["image_url"] != null)
                        //{
                        //    Image = Convert.ToString(dt.Rows[i - inStartIndex]["image_url"]);
                        //    if (Image != "")
                        //    {
                        //        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                        //        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null ? "" : dt.Rows[i - inStartIndex]["movie_url"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                //worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                        worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["sUsername"] != null) ? (dt.Rows[i - inStartIndex]["sUsername"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"]) : "") : "";
                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 10].Value = asTitleCase.ToTitleCase(S_Detail);

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                //worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }
                        worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 15].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 16].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";
                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 20].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);
                        worksheet.Cells[inwrkrow, 21].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);

                        /* Offer Amt calculation */
                        disc = (worksheet.Cells[inwrkrow, 19].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 19].Value));
                        OfferPer = (worksheet.Cells[inwrkrow, 21].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 21].Value));
                        cts = (worksheet.Cells[inwrkrow, 17].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 17].Value));
                        cur_rap_rate1 = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        cur_rap_rate = (cur_rap_rate1.ToString() == "" ? 0 : Convert.ToDecimal(cur_rap_rate1));

                        offerAmt = GetOfferAmt(disc, OfferPer, cts, cur_rap_rate, OfferPercentage);
                        if (offerAmt.ToString() == "0.00" || offerAmt.ToString() == "0" || offerAmt.ToString() == "")
                            worksheet.Cells[inwrkrow, 22].Value = "";
                        else
                            worksheet.Cells[inwrkrow, 22].Value = Convert.ToDecimal(offerAmt);
                        /*------------------------------------------------------------------------------------------------------------------------*/

                        valididty = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        if (valididty.ToString() == "0" || valididty.ToString() == "")
                            worksheet.Cells[inwrkrow, 23].Value = Convert.ToInt64("1");
                        else
                            worksheet.Cells[inwrkrow, 23].Value = valididty;

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 24].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 26].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 27].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 29].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 30].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 31].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 32].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 35].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 36].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 37].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 38].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 39].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 40].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);
                        //worksheet.Cells[inwrkrow, 41].Value = (dt.Rows[i - inStartIndex]["sShade"] != null) ? (dt.Rows[i - inStartIndex]["sShade"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShade"]) : "") : "";

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 40].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexCartTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[5, 6].Style.Border.Left.Style = worksheet.Cells[5, 6].Style.Border.Right.Style
                            = worksheet.Cells[5, 6].Style.Border.Top.Style = worksheet.Cells[5, 6].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";

                    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";

                    worksheet.Cells[5, 19].Formula = "=ROUND(((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100)),2)";

                    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";

                    worksheet.Cells[5, 17, 5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17, 5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexCartTotal);

                    worksheet.Cells[5, 1, 5, 40].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 40].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 12, (inwrkrow - 1), 12].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 17, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 28, (inwrkrow - 1), 31].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 37, (inwrkrow - 1), 40].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;
                    worksheet.Cells[7, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[7, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);

                    ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 40].Style;
                    cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                        = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;
                }
                else
                {
                    #region Header name and style

                    worksheet.Cells[6, 1, 6, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 38].Style.Fill.BackgroundColor.SetColor(colFromHex);
                    worksheet.Cells[6, 1, 6, 38].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 38].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 38].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 38].AutoFilter = true;

                    worksheet.Cells[6, 1].AutoFitColumns(8.86);
                    worksheet.Cells[6, 2].AutoFitColumns(9);
                    worksheet.Cells[6, 3].AutoFitColumns(12);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(15);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(12);
                    worksheet.Cells[6, 8].AutoFitColumns(12);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(12);
                    worksheet.Cells[6, 11].AutoFitColumns(8);
                    worksheet.Cells[6, 12].AutoFitColumns(12);
                    worksheet.Cells[6, 13].AutoFitColumns(9);
                    worksheet.Cells[6, 14].AutoFitColumns(10);
                    worksheet.Cells[6, 15].AutoFitColumns(8);
                    worksheet.Cells[6, 16].AutoFitColumns(15);
                    worksheet.Cells[6, 17].AutoFitColumns(8);
                    worksheet.Cells[6, 18].AutoFitColumns(15);
                    worksheet.Cells[6, 19].AutoFitColumns(10);
                    worksheet.Cells[6, 20].AutoFitColumns(10);
                    worksheet.Cells[6, 21].AutoFitColumns(15);
                    worksheet.Cells[6, 22].AutoFitColumns(8);
                    worksheet.Cells[6, 23].AutoFitColumns(9);
                    worksheet.Cells[6, 24].AutoFitColumns(8);
                    worksheet.Cells[6, 25].AutoFitColumns(8);
                    worksheet.Cells[6, 26].AutoFitColumns(10);
                    worksheet.Cells[6, 27].AutoFitColumns(10);
                    worksheet.Cells[6, 28].AutoFitColumns(10);
                    worksheet.Cells[6, 29].AutoFitColumns(10);
                    worksheet.Cells[6, 30].AutoFitColumns(10);
                    worksheet.Cells[6, 31].AutoFitColumns(17);
                    worksheet.Cells[6, 32].AutoFitColumns(17);
                    worksheet.Cells[6, 33].AutoFitColumns(17);
                    worksheet.Cells[6, 34].AutoFitColumns(17);
                    worksheet.Cells[6, 35].AutoFitColumns(10);
                    worksheet.Cells[6, 36].AutoFitColumns(10);
                    worksheet.Cells[6, 37].AutoFitColumns(10);
                    worksheet.Cells[6, 38].AutoFitColumns(10);

                    worksheet.Cells[6, 1].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Offer ID";
                    worksheet.Cells[6, 5].Value = "Offer Date";
                    worksheet.Cells[6, 6].Value = "Stock Id";
                    worksheet.Cells[6, 7].Value = "Location";
                    worksheet.Cells[6, 8].Value = "Status";
                    worksheet.Cells[6, 9].Value = "Shape";
                    worksheet.Cells[6, 10].Value = "Pointer";
                    worksheet.Cells[6, 11].Value = "Lab";
                    worksheet.Cells[6, 12].Value = "BGM";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cts";
                    worksheet.Cells[6, 16].Value = "Rap Amount($)";
                    worksheet.Cells[6, 17].Value = "Disc(%)";
                    worksheet.Cells[6, 18].Value = "Net Amount($)";
                    worksheet.Cells[6, 19].Value = "Offer Disc";
                    worksheet.Cells[6, 20].Value = "Offer Amt";
                    worksheet.Cells[6, 21].Value = "Offer Valid Days";
                    worksheet.Cells[6, 22].Value = "Cut";
                    worksheet.Cells[6, 23].Value = "Polish";
                    worksheet.Cells[6, 24].Value = "Symm";
                    worksheet.Cells[6, 25].Value = "Fls";
                    worksheet.Cells[6, 26].Value = "Length";
                    worksheet.Cells[6, 27].Value = "Width";
                    worksheet.Cells[6, 28].Value = "Depth";
                    worksheet.Cells[6, 29].Value = "Depth(%)";
                    worksheet.Cells[6, 30].Value = "Table(%)";
                    worksheet.Cells[6, 31].Value = "Table Black";
                    worksheet.Cells[6, 32].Value = "Crown Black";
                    worksheet.Cells[6, 33].Value = "Table White";
                    worksheet.Cells[6, 34].Value = "Crown White";
                    worksheet.Cells[6, 35].Value = "Crn Ang";
                    worksheet.Cells[6, 36].Value = "Crn Ht";
                    worksheet.Cells[6, 37].Value = "Pav Ang";
                    worksheet.Cells[6, 38].Value = "Pav Ht";

                    worksheet.View.FreezePanes(7, 1);

                    #endregion

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"] == null ? "" : dt.Rows[i - inStartIndex]["view_dna"]);

                        S_Detail = Convert.ToString(dt.Rows[i - inStartIndex]["view_dna"]);
                        if (S_Detail != "")
                        {
                            worksheet.Cells[inwrkrow, 1].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                            worksheet.Cells[inwrkrow, 1].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 1].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dt.Rows[i - inStartIndex]["image_url"] == null ? "" : dt.Rows[i - inStartIndex]["image_url"]);
                        //if (dt.Rows[i - inStartIndex]["image_url"] != null)
                        //{
                        //    Image = Convert.ToString(dt.Rows[i - inStartIndex]["image_url"]);
                        //    if (Image != "")
                        //    {
                        //        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCertiNo"]) == "")
                        //        {
                        //            hyprlink1 = Image;
                        //        }
                        //        else
                        //        {
                        //            hyprlink1 = External_ImageURL + Convert.ToString(dt.Rows[i - inStartIndex]["sCertiNo"]) + "/PR.jpg";
                        //        }
                        //        worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + hyprlink1 + "\",\" Image \")";
                        //        worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        //        worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        //    }
                        //}

                        var img = false;
                        if (dt.Rows[i - inStartIndex]["image_url"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url1"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url2"].ToString() != "")
                            img = true;
                        if (dt.Rows[i - inStartIndex]["image_url3"].ToString() != "")
                            img = true;

                        if (img == true)
                        {
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Convert.ToString(ImageURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        //worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null ? "" : dt.Rows[i - inStartIndex]["movie_url"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"] == null || dt.Rows[i - inStartIndex]["movie_url"].ToString() == "" ? "" : VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]);
                        if (dt.Rows[i - inStartIndex]["movie_url"] != null)
                        {
                            Video = Convert.ToString(dt.Rows[i - inStartIndex]["movie_url"]);
                            if (Video != "")
                            {
                                //worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Convert.ToString(VideoURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\" Video \")";
                                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 4].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["iOfferId"]);

                        worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["OfferDate"] != null) ? (dt.Rows[i - inStartIndex]["OfferDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["OfferDate"]) : "") : "";

                        worksheet.Cells[inwrkrow, 6].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["sRefNo"]);

                        worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["sLocation"] != null) ? (dt.Rows[i - inStartIndex]["sLocation"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLocation"]) : "") : "";

                        S_Detail = (dt.Rows[i - inStartIndex]["sStoneStatus"] != null) ? (dt.Rows[i - inStartIndex]["sStoneStatus"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sStoneStatus"]) : "") : "";
                        if (S_Detail.ToLower() == "new")
                            S_Detail = "Available";

                        worksheet.Cells[inwrkrow, 8].Value = asTitleCase.ToTitleCase(S_Detail);
                        worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["sShape"] != null) ? (dt.Rows[i - inStartIndex]["sShape"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sShape"]) : "") : "";

                        worksheet.Cells[inwrkrow, 10].Value = (dt.Rows[i - inStartIndex]["sPointer"] != null) ? (dt.Rows[i - inStartIndex]["sPointer"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPointer"]) : "") : "";

                        worksheet.Cells[inwrkrow, 11].Value = (dt.Rows[i - inStartIndex]["sLab"] != null) ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sLab"]) : "") : "";
                        worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                        if (dt.Rows[i - inStartIndex]["sCertiNo"] != null && dt.Rows[i - inStartIndex]["sCertiNo"].ToString() != "")
                        {
                            Certificate = Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"] != null ? (dt.Rows[i - inStartIndex]["sLab"].GetType().Name != "view_certi_url" ? Convert.ToString(dt.Rows[i - inStartIndex]["view_certi_url"]) : "") : "");
                            if (Certificate != "")
                            {
                                //worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + Convert.ToString(CertiURL + dt.Rows[i - inStartIndex]["sRefNo"]) + "\",\"" + dt.Rows[i - inStartIndex]["sLab"] + " \")";
                                worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                                worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                            }
                        }

                        worksheet.Cells[inwrkrow, 12].Value = (dt.Rows[i - inStartIndex]["BGM"] != null) ? (dt.Rows[i - inStartIndex]["BGM"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BGM"]) : "") : "";
                        worksheet.Cells[inwrkrow, 13].Value = (dt.Rows[i - inStartIndex]["sColor"] != null) ? (dt.Rows[i - inStartIndex]["sColor"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sColor"]) : "") : "";
                        worksheet.Cells[inwrkrow, 14].Value = (dt.Rows[i - inStartIndex]["sClarity"] != null) ? (dt.Rows[i - inStartIndex]["sClarity"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sClarity"]) : "") : "";
                        worksheet.Cells[inwrkrow, 15].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Cts"]);
                        worksheet.Cells[inwrkrow, 16].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["RapAmount"]);

                        worksheet.Cells[inwrkrow, 17].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Disc"]);
                        worksheet.Cells[inwrkrow, 18].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["NetAmount"]);

                        worksheet.Cells[inwrkrow, 19].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["SOfferPer"]);

                        /* Offer Amt calculation */
                        disc = (worksheet.Cells[inwrkrow, 17].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 17].Value));
                        OfferPer = (worksheet.Cells[inwrkrow, 19].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 19].Value));
                        cts = (worksheet.Cells[inwrkrow, 15].Value.ToString() == "" ? 0 : Convert.ToDecimal(worksheet.Cells[inwrkrow, 15].Value));
                        cur_rap_rate1 = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["cur_rap_rate"]);
                        cur_rap_rate = (cur_rap_rate1.ToString() == "" ? 0 : Convert.ToDecimal(cur_rap_rate1));

                        offerAmt = GetOfferAmt(disc, OfferPer, cts, cur_rap_rate, OfferPercentage);
                        if (offerAmt.ToString() == "0.00" || offerAmt.ToString() == "0" || offerAmt.ToString() == "")
                            worksheet.Cells[inwrkrow, 20].Value = "";
                        else
                            worksheet.Cells[inwrkrow, 20].Value = Convert.ToDecimal(offerAmt);
                        /*----------------------------------------------------------------------- */

                        valididty = GetConvertedIntValue(dt.Rows[i - inStartIndex]["SOffer_Validity"]);
                        if (valididty.ToString() == "0" || valididty.ToString() == "")
                            worksheet.Cells[inwrkrow, 21].Value = Convert.ToInt64("1");
                        else
                            worksheet.Cells[inwrkrow, 21].Value = valididty;

                        cut = (dt.Rows[i - inStartIndex]["sCut"] != null) ? (dt.Rows[i - inStartIndex]["sCut"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) : "") : "";
                        worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 23].Value = (dt.Rows[i - inStartIndex]["sPolish"] != null) ? (dt.Rows[i - inStartIndex]["sPolish"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sPolish"]) : "") : "";
                        worksheet.Cells[inwrkrow, 24].Value = (dt.Rows[i - inStartIndex]["sSymm"] != null) ? (dt.Rows[i - inStartIndex]["sSymm"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sSymm"]) : "") : "";

                        if (Convert.ToString(dt.Rows[i - inStartIndex]["sCut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 25].Value = (dt.Rows[i - inStartIndex]["sFls"] != null) ? (dt.Rows[i - inStartIndex]["sFls"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sFls"]) : "") : "";
                        worksheet.Cells[inwrkrow, 26].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Length"]);
                        worksheet.Cells[inwrkrow, 27].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Width"]);
                        worksheet.Cells[inwrkrow, 28].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["Depth"]);
                        worksheet.Cells[inwrkrow, 29].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["DepthPer"]);
                        worksheet.Cells[inwrkrow, 30].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["TablePer"]);
                        worksheet.Cells[inwrkrow, 31].Value = (dt.Rows[i - inStartIndex]["sTableNatts"] != null) ? (dt.Rows[i - inStartIndex]["sTableNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sTableNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 32].Value = (dt.Rows[i - inStartIndex]["sCrownNatts"] != null) ? (dt.Rows[i - inStartIndex]["sCrownNatts"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownNatts"]) : "") : "";
                        worksheet.Cells[inwrkrow, 33].Value = (dt.Rows[i - inStartIndex]["sInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 34].Value = (dt.Rows[i - inStartIndex]["sCrownInclusion"] != null) ? (dt.Rows[i - inStartIndex]["sCrownInclusion"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCrownInclusion"]) : "") : "";
                        worksheet.Cells[inwrkrow, 35].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrAng"]);
                        worksheet.Cells[inwrkrow, 36].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["CrHt"]);
                        worksheet.Cells[inwrkrow, 37].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavAng"]);
                        worksheet.Cells[inwrkrow, 38].Value = GetConvertedDecimalValue(dt.Rows[i - inStartIndex]["PavHt"]);

                        inwrkrow++;

                        #endregion
                    }
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 38].Style.Font.Size = 9;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(colFromHexCartTotal);
                    worksheet.Cells[5, 6].Style.Numberformat.Format = "#,##";

                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";

                    worksheet.Cells[5, 17].Formula = "=ROUND(((1-(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")/SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + ")))*(-100)),2)";

                    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";

                    worksheet.Cells[5, 15, 5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15, 5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexCartTotal);

                    worksheet.Cells[5, 1, 5, 38].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 38].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[5, 10, (inwrkrow - 1), 10].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 14, (inwrkrow - 1), 17].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 25, (inwrkrow - 1), 29].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 35, (inwrkrow - 1), 38].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";

                    worksheet.Cells[6, 17, (inwrkrow - 1), 18].Style.Font.Bold = true;
                    worksheet.Cells[7, 17, (inwrkrow - 1), 18].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 17, (inwrkrow - 1), 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 17, (inwrkrow - 1), 18].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis1);

                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Font.Bold = true;
                    worksheet.Cells[7, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 10, (inwrkrow - 1), 10].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer1);

                    ExcelStyle cellStyle = worksheet.Cells[5, 1, 6, 38].Style;
                    cellStyle.Border.Left.Style = cellStyle.Border.Right.Style = cellStyle.Border.Top.Style
                        = cellStyle.Border.Bottom.Style = ExcelBorderStyle.Thin;
                }
                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }

        public static decimal GetOfferAmt(decimal disc, decimal OfferPer, decimal cts, decimal cur_rap_rate, float OfferPercentage)
        {
            decimal offerAmt = 0, min, max;

            if (disc > 0)
            {
                min = disc - ((decimal)OfferPercentage);
                max = disc + ((decimal)OfferPercentage);
            }
            else
            {
                min = disc + ((decimal)OfferPercentage);
                max = disc - ((decimal)OfferPercentage);
            }


            if ((disc > 0 && OfferPer >= min && OfferPer <= max)
            || (disc < 0 && OfferPer <= min && OfferPer >= max))
            {

                decimal newRate;
                if (OfferPercentage > 0)
                {
                    newRate = cur_rap_rate - ((cur_rap_rate * ((-1) * OfferPer)) / 100);
                    offerAmt = newRate * cts;
                }
                else
                {
                    newRate = cur_rap_rate + ((cur_rap_rate * OfferPer) / 100);
                    offerAmt = newRate * cts;
                }

            }

            return offerAmt;
        }

        public static void CreateUserList(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("User List");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "User List";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "User List";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 7].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 7].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 7].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 7].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(30);
                worksheet.Cells[6, 2].AutoFitColumns(30);
                worksheet.Cells[6, 3].AutoFitColumns(15);
                worksheet.Cells[6, 4].AutoFitColumns(30);
                worksheet.Cells[6, 5].AutoFitColumns(15);
                worksheet.Cells[6, 6].AutoFitColumns(30);
                worksheet.Cells[6, 7].AutoFitColumns(15);

                worksheet.Cells[6, 1].Value = "Company Name";
                worksheet.Cells[6, 2].Value = "User Name";
                worksheet.Cells[6, 3].Value = "User Type";
                worksheet.Cells[6, 4].Value = "Country";
                worksheet.Cells[6, 5].Value = "Join Date";
                worksheet.Cells[6, 6].Value = "Email";
                worksheet.Cells[6, 7].Value = "Mobile No";

                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                //Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                //Color cellBg1 = System.Drawing.ColorTranslator.FromHtml("#ff99cc");
                int i = 0;
                //string values_2;
                //Int64 number_2;
                //bool success2;

                for (i = inStartIndex; i < inEndCounter; i++)
                {
                    worksheet.Cells[i, 1, i, 7].Style.Font.Size = 9;
                    worksheet.Cells[i, 1, i, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[i, 1, i, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #region Assigns Value to Cell

                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = (dt.Rows[i - inStartIndex]["UserName"] != null) ? (dt.Rows[i - inStartIndex]["UserName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["UserName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["UserType"] != null) ? (dt.Rows[i - inStartIndex]["UserType"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["UserType"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["Country"] != null) ? (dt.Rows[i - inStartIndex]["Country"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Country"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["JoinDate"] != null) ? (dt.Rows[i - inStartIndex]["JoinDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["JoinDate"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["Email"] != null) ? (dt.Rows[i - inStartIndex]["Email"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Email"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = GetConvertedIntValue(dt.Rows[i - inStartIndex]["MobileNo"]);

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[5, 1, 5, 7].Style.Font.Size = 11;
                worksheet.Cells[5, 1, 5, 7].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }

        public static void CreateLoginInfo(DataTable dt, string _strFolderPath, string _strFilePath, string LivePath)
        {
            using (ExcelPackage p = new ExcelPackage())
            {
                #region Company Detail on Header

                p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                //Create a sheet
                p.Workbook.Worksheets.Add("Login Info");

                ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                worksheet.Name = "Login Info";
                worksheet.Cells.Style.Font.Size = 11;
                worksheet.Cells.Style.Font.Name = "Calibri";

                worksheet.Cells[1, 1].Value = "Print Date " + DateTime.Now.ToString("dd-MM-yyyy hh:mm:ss");
                worksheet.Cells[2, 1].Value = "Login Info";

                #endregion

                #region Header name and style

                worksheet.Row(6).Height = 40;
                worksheet.Row(6).Style.WrapText = true;

                var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 9].Style.Fill;
                cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                worksheet.Cells[6, 1, 6, 9].Style.Font.Size = 10;
                worksheet.Cells[6, 1, 6, 9].Style.Font.Bold = true;
                worksheet.Cells[6, 1, 6, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                worksheet.Cells[6, 1, 6, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                worksheet.Cells[6, 1, 6, 9].AutoFilter = true;

                worksheet.Cells[6, 1].AutoFitColumns(15);
                worksheet.Cells[6, 2].AutoFitColumns(15);
                worksheet.Cells[6, 3].AutoFitColumns(30);
                worksheet.Cells[6, 4].AutoFitColumns(30);
                worksheet.Cells[6, 5].AutoFitColumns(30);
                worksheet.Cells[6, 6].AutoFitColumns(30);
                worksheet.Cells[6, 7].AutoFitColumns(15);
                worksheet.Cells[6, 8].AutoFitColumns(30);
                worksheet.Cells[6, 9].AutoFitColumns(20);

                worksheet.Cells[6, 1].Value = "Login Date";
                worksheet.Cells[6, 2].Value = "Login Time";
                worksheet.Cells[6, 3].Value = "User Name";
                worksheet.Cells[6, 4].Value = "Company Name";
                worksheet.Cells[6, 5].Value = "Customer Name";
                worksheet.Cells[6, 6].Value = "Country Name";
                worksheet.Cells[6, 7].Value = "Login Type";
                worksheet.Cells[6, 8].Value = "Browser";
                worksheet.Cells[6, 9].Value = "OS";

                worksheet.View.FreezePanes(7, 1);

                #endregion

                int inStartIndex = 7;
                int inwrkrow = 7;
                int inEndCounter = dt.Rows.Count + inStartIndex;
                int TotalRow = dt.Rows.Count;
                //Color cellBg = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                //Color cellBg1 = System.Drawing.ColorTranslator.FromHtml("#ff99cc");
                int i = 0;
                //string values_2;
                //Int64 number_2;
                //bool success2;

                for (i = inStartIndex; i < inEndCounter; i++)
                {

                    #region Assigns Value to Cell

                    worksheet.Cells[inwrkrow, 1].Value = (dt.Rows[i - inStartIndex]["LoginDate"] != null) ? (dt.Rows[i - inStartIndex]["LoginDate"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LoginDate"]) : "") : "";
                    worksheet.Cells[inwrkrow, 2].Value = (dt.Rows[i - inStartIndex]["LoginTime"] != null) ? (dt.Rows[i - inStartIndex]["LoginTime"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LoginTime"]) : "") : "";
                    worksheet.Cells[inwrkrow, 3].Value = (dt.Rows[i - inStartIndex]["sUsername"] != null) ? (dt.Rows[i - inStartIndex]["sUsername"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sUsername"]) : "") : "";
                    worksheet.Cells[inwrkrow, 4].Value = (dt.Rows[i - inStartIndex]["sCompName"] != null) ? (dt.Rows[i - inStartIndex]["sCompName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 5].Value = (dt.Rows[i - inStartIndex]["CustomerName"] != null) ? (dt.Rows[i - inStartIndex]["CustomerName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["CustomerName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 6].Value = (dt.Rows[i - inStartIndex]["sCompCountry"] != null) ? (dt.Rows[i - inStartIndex]["sCompCountry"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["sCompCountry"]) : "") : "";
                    worksheet.Cells[inwrkrow, 7].Value = (dt.Rows[i - inStartIndex]["LoginType"] != null) ? (dt.Rows[i - inStartIndex]["LoginType"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["LoginType"]) : "") : "";
                    worksheet.Cells[inwrkrow, 8].Value = (dt.Rows[i - inStartIndex]["BrowserName"] != null) ? (dt.Rows[i - inStartIndex]["BrowserName"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["BrowserName"]) : "") : "";
                    worksheet.Cells[inwrkrow, 9].Value = (dt.Rows[i - inStartIndex]["Platform"] != null) ? (dt.Rows[i - inStartIndex]["Platform"].GetType().Name != "DBNull" ? Convert.ToString(dt.Rows[i - inStartIndex]["Platform"]) : "") : "";

                    inwrkrow++;

                    #endregion
                }

                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 9].Style.Font.Size = 9;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                worksheet.Cells[5, 1, 5, 9].Style.Font.Size = 8;
                worksheet.Cells[5, 1, 5, 9].Style.Font.Bold = true;
                worksheet.Cells[5, 1, 5, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                worksheet.Cells[5, 1, 5, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                int rowEnd = worksheet.Dimension.End.Row;
                removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                Byte[] bin = p.GetAsByteArray();

                if (!Directory.Exists(_strFolderPath))
                {
                    Directory.CreateDirectory(_strFolderPath);
                }

                System.IO.File.WriteAllBytes(_strFilePath, bin);
            }
        }

        public static object GetConvertedDecimalValue(object row)
        {
            string values_2;
            decimal number_2;
            bool success2;

            if (row != null)
            {
                if (row.GetType().Name != "DBNull")
                    values_2 = Convert.ToString(row);
                else
                    values_2 = "";
            }
            else
            {
                values_2 = "";
            }
            success2 = decimal.TryParse(values_2, out number_2);
            if (success2)
            {
                return Convert.ToDecimal(row);
            }
            else
            {
                return values_2;
            }
        }

        public static object GetConvertedIntValue(object row)
        {
            string values_2;
            Int64 number_2;
            bool success2;

            if (row != null)
            {
                if (row.GetType().Name != "DBNull")
                    values_2 = Convert.ToString(row);
                else
                    values_2 = "";
            }
            else
            {
                values_2 = "";
            }
            success2 = Int64.TryParse(values_2, out number_2);
            if (success2)
            {
                return Convert.ToInt64(row);
            }
            else
            {
                return values_2;
            }
        }

        public void AddNewRow(String Address)
        {
            //UInt32 rowNumber = GetRowIndex(Address);
            ////Row row = GetRow(sheetData1, rowNumber);
            //this.CurrentRowCount += 1;
            this.SetCellValue(Address, "");
        }

        public String GetTableName()
        {
            return _TableName;
        }

        protected void RaiseFillingWorksheet(FillingWorksheetEventArgs e)
        {
            if (FillingWorksheetEvent != null)
            {
                FillingWorksheetEvent(this, ref e);
            }

        }

        private void setDefaultStyleIndex()
        {
            ExcelCellFormat ef = new ExcelCellFormat();
            //ef.backgroundArgb = KnownHexValue.White;
            ef.isbold = false;
            ef.isitalic = false;
            DefaultStyleindex = AddStyle(ef);
        }

        public static UInt32 GetRowIndex(string address)
        {
            string rowPart;
            UInt32 l;
            UInt32 result = 0;

            for (int i = 0; i < address.Length; i++)
            {
                if (UInt32.TryParse(address.Substring(i, 1), out l))
                {
                    rowPart = address.Substring(i, address.Length - i);
                    if (UInt32.TryParse(rowPart, out l))
                    {
                        result = l;
                        break;
                    }
                }
            }
            return result;
        }

        public String GetColumnName(int ColIndex)
        {
            return AllColumns[ColIndex].Caption;
        }

        public int GetColumnIndex(String ColName)
        {
            //return AllColumns[ColIndex].Caption;
            foreach (ExcelHeader item in AllColumns)
            {
                if (item.Caption == ColName)
                    return item.ColInd;
            }
            return -1;
        }

        public static String GetColumnAlphaIndex(double ColIndex)
        {

            if (ColIndex <= 0) return "";

            double LastCharIndex = ColIndex % 26;

            if (ColIndex <= 0)
            {
                return GetCharacter(ColIndex);
            }
            else if (ColIndex <= 26)
            {
                return GetCharacter(ColIndex);
            }
            else
            {
                if (LastCharIndex == 0)
                {
                    LastCharIndex = 26;
                }

                string Ch = GetCharacter(LastCharIndex);
                return GetColumnAlphaIndex(Math.Floor((ColIndex - LastCharIndex) / 26)) + Ch;
            }


        }

        private static string GetCharacter(double Index)
        {

            string c = ((char)(64 + Index)).ToString();


            return c;


        }

        public String ReplaceFormulaWithAlphaIndex(String formula)
        {
            foreach (ExcelHeader item in AllColumns)
            {
                formula = formula.Replace(this.GetTableName() + "[" + item.Caption + "]", GetColumnAlphaIndex(item.ColInd) + this.TableDetailStartRow + ":" + GetColumnAlphaIndex(item.ColInd) + (this.TableFooterStartRow - 1).ToString());
            }
            return formula;
        }

        public String ReplaceFormulaWithAlphaIndexDetail(String formula)
        {
            foreach (ExcelHeader item in AllColumns)
            {
                formula = formula.Replace(this.GetTableName() + "[[#This Row],[" + item.Caption + "]]", GetColumnAlphaIndex(item.ColInd) + this.CurrentRowCount.ToString());
            }
            return formula;
        }

        public EpExcelExport(string SheetName, String TableName)
        {
            this._SheetName = SheetName;
            this._TableName = TableName;
        }


        public uint AddStyle(ExcelFormat format)
        {
            return this.AddStyle(this._worksheet, format);
        }

        public uint AddStyle(ExcelWorksheet ws, ExcelFormat format)
        {
            foreach (ExcelFormat cf in StyleList.Values)
            {
                if (cf.IsEqual(format))
                {
                    return (UInt32)cf.StyleInd;
                }
            }

            //if (stylesheet1.CellFormats == null)
            //{
            //    stylesheet1.CellFormats = new CellFormats();

            //}

            //if (stylesheet1.CellFormats.ChildElements.Count == 0)
            //{
            //    stylesheet1.CellFormats.Append(new CellFormat());
            //}

            //uint newStyle = this.AddCellFormat(stylesheet1, format.fontsize, format.forColorArgb, format.fontname, format.FontFamilyindex
            //, format.fontScheme, format.isbold, format.isitalic, format.ul,
            //format.pattern, format.backgroundArgb, format.left, format.right, format.top, format.bottom, format.diagonal, format.Format, format.HorizontalAllign, format.VerticalAllign);





            uint newStyle = (uint)StyleList.Count() + 1;
            var namedStyle = ws.Workbook.Styles.CreateNamedStyle(newStyle.ToString());

            if (format.FontFamilyindex > 0)
                namedStyle.Style.Font.Family = format.FontFamilyindex;

            if (!String.IsNullOrEmpty(format.fontname))
                namedStyle.Style.Font.Name = format.fontname;

            if (format.fontsize > 0)
                namedStyle.Style.Font.Size = (float)format.fontsize;

            namedStyle.Style.Font.Bold = format.isbold;
            namedStyle.Style.Font.Italic = format.isitalic;
            namedStyle.Style.VerticalAlignment = format.VerticalAllign;
            namedStyle.Style.HorizontalAlignment = format.HorizontalAllign;

            if (format.ul == ExcelUnderLineType.None)
            {

            }
            else
            {
                namedStyle.Style.Font.UnderLineType = format.ul;
            }

            if (!string.IsNullOrEmpty(format.forColorArgb))
                namedStyle.Style.Font.Color.SetColor(System.Drawing.Color.FromArgb(Convert.ToInt32(format.forColorArgb)));


            if (!string.IsNullOrEmpty(format.backgroundArgb))
            {
                namedStyle.Style.Fill.PatternType = ExcelFillStyle.Solid;
                namedStyle.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.FromArgb(Convert.ToInt32(format.backgroundArgb)));
            }


            if (!string.IsNullOrEmpty(format.Format))
                namedStyle.Style.Numberformat.Format = format.Format;

            format.StyleInd = newStyle;

            StyleList.Add(newStyle, format);

            return newStyle;
        }


        public void ApplyStyle(ExcelRange c, uint StyleInd)
        {
            c.StyleName = StyleInd.ToString();


            //c.StyleIndex = StyleInd;
        }

        public void ApplyStyle(ExcelWorksheet ws, ExcelRange c, ExcelFormat format)
        {

            UInt32 styleind = AddStyle(ws, format);

            ApplyStyle(c, styleind);


            //format.StyleInd = c.StyleIndex;


            format.StyleInd = Convert.ToUInt32(c.StyleName.ToString());
            //format.StyleInd = styleind;



            //if (!StyleList.ContainsKey(styleind))
            //{
            //    StyleList.Add(c.StyleIndex, format);
            //}

        }


        protected virtual void CreateHeader(FillingWorksheetEventArgs e)
        {
            AddHeaderEventArgs AddHeaderpara = new AddHeaderEventArgs(e.Worksheet, CurrentRowCount);

            if (AddHeaderEvent != null)
            {
                AddHeaderEvent(this, ref AddHeaderpara);
            }

            CurrentRowCount = AddHeaderpara.HeaderRowcount;
        }

        protected virtual void CreateDetail(FillingWorksheetEventArgs e)
        {

        }

        protected virtual void CreateFooter(FillingWorksheetEventArgs e)
        {
            Int32 CellColNo = 0;
            CurrentRowCount = CurrentRowCount + 1;
            //Row row = GetRow(e.Data, (uint)CurrentRowCount);

            for (int i = 0; i < AllColumns.Count; i++)
            {
                ExcelHeader h = AllColumns[i];


                if (h.visible == true)
                {
                    CellColNo = h.ColInd;

                    string colname = GetColumnAlphaIndex(CellColNo);
                    BeforeCreateCellEventArgs CellArgs = new BeforeCreateCellEventArgs();
                    //CellArgs.ColDataType = DocumentFormat.OpenXml.Spreadsheet.CellValues.String;
                    CellArgs.ta = TableArea.Footer;
                    RaiseBeforeCreateCellEvent(CellArgs);
                    //Cell c = this.InsertCellInRow(e.Data, row, colname + (CurrentRowCount).ToString());
                    ExcelRange c = this._worksheet.Cells[colname + (CurrentRowCount).ToString()];
                    ExcelCellFormat cf = new ExcelCellFormat();
                    //cf.ul = UnderlineValues.None;
                    //c.DataType = CellArgs.ColDataType;
                    string prevText = "";

                    if (c.Value != null)
                    {
                        prevText = c.Value.ToString();
                    }


                    if (h.SummFunction != TotalsRowFunctionValues.None)
                    {
                        //col.TotalsRowFunction = AllColumns[i].SummFunction;



                        //cf.Formula = GetSummFormula(h.Caption, h.SummFunction);

                        //String vBaseFormula = GetSummFormula(h.Caption, h.SummFunction);
                        //vBaseFormula = vBaseFormula.Replace(this.GetTableName() + "[" + h.Caption + "]", colname + this.TableDetailStartRow.ToString() + ":" + colname + (this.TableFooterStartRow - 1).ToString());
                        //cf.Formula = vBaseFormula;

                        //cf.Formula = GetSummFormula(h.Caption, h.SummFunction).Replace(cFORMULA_START_INDEX, this.TableDetailStartRow.ToString()).Replace(cFORMULA_END_INDEX, (this.TableFooterStartRow - 1).ToString());
                        //priyanka on date [24-Oct-16]
                        //cf.Formula = ReplaceFormulaWithAlphaIndex(GetSummFormula(h.Caption, h.SummFunction));
                        ////priyanka on date [24-Oct-16] edn
                        if (h.SummFunction == TotalsRowFunctionValues.Custom &&
                            h.SummFormula != null &&
                            h.SummFormula.Length > 0)
                        {

                            //cf.Formula= h.SummFormula;

                            //vBaseFormula = h.SummFormula;
                            //vBaseFormula = vBaseFormula.Replace(this.GetTableName() + "[" + h.Caption + "]", colname + this.TableDetailStartRow.ToString() + ":" + colname + (this.TableFooterStartRow - 1).ToString());
                            //cf.Formula = vBaseFormula;

                            //cf.Formula = h.SummFormula.Replace(cFORMULA_START_INDEX, this.TableDetailStartRow.ToString()).Replace(cFORMULA_END_INDEX, (this.TableFooterStartRow - 1).ToString());

                            cf.Formula = ReplaceFormulaWithAlphaIndex(h.SummFormula);
                        }//priyanka on date [24-Oct-16]
                        else
                        {
                            cf.Formula = ReplaceFormulaWithAlphaIndex(GetSummFormula(h.Caption, h.SummFunction));
                        }
                        //priyanka on date [24-Oct-16] end//
                        //AddFormulaCalculationChain(colname + (TableFooterStartRow).ToString());
                    }


                    cf.tableArea = TableArea.Footer;
                    cf.RowInd = (int)CurrentRowCount;
                    cf.ColInd = CellColNo;
                    cf.HeaderStartRow = TableHeaderStartRow;
                    cf.DetailStartRow = TableDetailStartRow;
                    cf.ColumnName = h.Caption;
                    cf.Format = h.NumFormat;
                    cf.HorizontalAllign = h.HorizontalAllign;
                    cf.VerticalAllign = h.VerticalAllign;
                    cf.Text = prevText;

                    RaiseAfterCreateCellEvent(ref cf);

                    ApplyStyle(e.Worksheet, c, cf);

                    if (cf.Formula != null && cf.Formula.Length > 0)
                    {
                        //CellFormula cfor = new CellFormula();
                        //cfor.FormulaType = CellFormulaValues.Normal;
                        //cfor.Text = cf.Formula;
                        //AddFormulaCalculationChain(c.CellReference);
                        //c.Append(cfor);
                        //RJCHANGE
                        c.Formula = cf.Formula;
                        //SetCellValue(c, "=" + cf.Formula);
                    }
                    else if (cf.Text != null)
                    {
                        SetCellValue(c, cf.Text);
                    }
                }
            }

            AddHeaderEventArgs AddHeaderpara = new AddHeaderEventArgs(e.Worksheet, 0);
            AddFooterEventArgs footerArgs = new AddFooterEventArgs(e.Worksheet, AddHeaderpara.HeaderRowcount, CurrentRowCount);

            if (AddFooterEvent != null)
            {
                AddFooterEvent(this, ref footerArgs);
            }

        }

        protected void SetCellValue(String Address, String val)
        {
            this.SetCellValue(this._worksheet.Cells[Address], val, -1);
        }

        public void SetCellValue(String Address, String val, UInt32 StyleInd)
        {
            this.SetCellValue(this._worksheet.Cells[Address], val, (Int32)StyleInd);
        }

        protected void SetCellValue(ExcelRange c, String val)
        {
            this.SetCellValue(c, val, -1);
        }

        protected void SetCellValue(ExcelRange c, String val, Int32 StyleInd)
        {
            //if (c.Start.Column == 1 || c.End.Column == 1)

            //this._worksheet.Column(1).ColumnMax = 1;

            double dVal;
            if (c.Style.Numberformat.Format != "General" && double.TryParse(val, out dVal))
            {
                c.Value = dVal;
            }
            else
            {
                c.Value = val;
            }

            if (StyleInd > 0)
            {
                c.StyleName = StyleInd.ToString();
            }

            //if (c.Start.Column == 1 || c.End.Column == 1)
            //    this._worksheet.Column(1).ColumnMax = 1;

        }

        //public void InsertCellInWorksheet(ExcelWorksheet worksheet, String CellAddress, int row, int col, String CellValue, String HyperLink, String Formula, ExcelStyle cStyle)
        //{
        //    worksheet.Cells[row, col].Value = CellValue;
        //    worksheet.Cells[row, col].Hyperlink = new Uri(HyperLink);
        //    worksheet.Cells[row, col].Formula = Formula;
        //}

        public void Save()
        {
            //document.WorkbookPart.Workbook.Save();
            //document.Close();
        }

        protected virtual void AddColumnDef(List<ExcelHeader> AllColumns)
        {
        }

        protected virtual void AddColumnDef(List<ExcelHeader> AllColumns, int iTransId)
        {
        }

        protected void RaiseAfterCreateCellEvent(ref ExcelCellFormat e)
        {
            if (AfterCreateCellEvent != null)
            {
                AfterCreateCellEvent(this, ref e);
            }
        }

        protected void RaiseBeforeCreateColumn(ref ExcelHeader e)
        {
            if (BeforeCreateColumnEvent != null)
            {
                BeforeCreateColumnEvent(this, ref e);
            }
        }

        protected void RaiseBeforeCreateColumn1(ref ExcelHeader e, List<ApiColSettings> columnsSettings)
        {
            if (BeforeCreateColumnEvent1 != null)
            {
                BeforeCreateColumnEvent1(this, ref e, columnsSettings);
            }
        }

        protected void RaiseBeforeCreateCellEvent(BeforeCreateCellEventArgs e)
        {
            if (BeforeCreateCellEvent != null)
            {
                BeforeCreateCellEvent(this, ref e);
            }
        }

        public string GetSummFormula(String ColName, TotalsRowFunctionValues ind, String CompareColName, String CompareCondition)
        {
            int funcind = 0;

            switch (ind)
            {
                case TotalsRowFunctionValues.Average:
                    funcind = (int)FormulaIndex.Average;
                    break;
                case TotalsRowFunctionValues.Count:
                    funcind = (int)FormulaIndex.CountA;
                    break;
                case TotalsRowFunctionValues.CountNumbers:
                    funcind = (int)FormulaIndex.Count;
                    break;
                case TotalsRowFunctionValues.Maximum:
                    funcind = (int)FormulaIndex.Max;
                    break;
                case TotalsRowFunctionValues.Minimum:
                    funcind = (int)FormulaIndex.Min;
                    break;
                case TotalsRowFunctionValues.StandardDeviation:
                    funcind = (int)FormulaIndex.StdDev;
                    break;
                case TotalsRowFunctionValues.Sum:
                    funcind = (int)FormulaIndex.Sum;
                    break;
                case TotalsRowFunctionValues.Variance:
                    funcind = (int)FormulaIndex.Var;
                    break;
                case TotalsRowFunctionValues.SumIf:
                    funcind = (int)FormulaIndex.SumIf;
                    break;
                default:
                    return "";
            }
            if (funcind == (int)FormulaIndex.SumIf)
                return "SUMIF(" + this.GetTableName() + "[" + CompareColName + @"], """ + CompareCondition + @"""," + this.GetTableName() + "[" + ColName + @"])";
            else
                return "SUBTOTAL(" + ((Int32)funcind).ToString() + "," + this.GetTableName() + "[" + ColName + "])";
            //return "SUBTOTAL(" + ((Int32)funcind).ToString() + "," + GetColumnAlphaIndex(GetColumnIndex(ColName)) + cFORMULA_START_INDEX + ":" + GetColumnAlphaIndex(GetColumnIndex(ColName)) + cFORMULA_END_INDEX + ")";
            //return "SUBTOTAL(" + ((Int32)funcind).ToString() + "," + "[" + ColName + "]" + cFORMULA_START_INDEX + ":" + "[" + ColName + "]" + cFORMULA_END_INDEX + ")";

        }


        public string GetSummFormula(String ColName, TotalsRowFunctionValues ind)
        {
            return GetSummFormula(ColName, ind, "", "");
        }

        public static void CreateOverseasExcel(DataTable dtDiamonds, string _strFolderPath, string _strFilePath, string LivePath)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color colFromHex_Dis = System.Drawing.ColorTranslator.FromHtml("#ccffff");

                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("OverseasSearch");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUNRISE DIAMONDS INVENTORY FOR THE DATE " + " " + DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 40].Style.Font.Bold = true;
                    worksheet.Cells[5, 1, 5, 40].Style.Font.Size = 11;
                    worksheet.Cells[5, 1, 5, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 40].Style.Font.Size = 11;
                    worksheet.Cells[6, 1, 6, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 40].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 40].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 40].AutoFilter = true;

                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    var cellBackgroundColor1 = worksheet.Cells[6, 1, 6, 40].Style.Fill;
                    cellBackgroundColor1.PatternType = ExcelFillStyle.Solid;
                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    cellBackgroundColor1.BackgroundColor.SetColor(colFromHex);

                    #endregion

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    //worksheet.Cells[6, 2].Value = "DNA";
                    worksheet.Cells[6, 2].Value = "View Image";
                    worksheet.Cells[6, 3].Value = "HD Movie";
                    worksheet.Cells[6, 4].Value = "Stock Id";
                    worksheet.Cells[6, 5].Value = "Location";
                    worksheet.Cells[6, 6].Value = "Status";
                    worksheet.Cells[6, 7].Value = "Shape";
                    worksheet.Cells[6, 8].Value = "Pointer";
                    worksheet.Cells[6, 9].Value = "Lab";
                    worksheet.Cells[6, 10].Value = "BGM";
                    worksheet.Cells[6, 11].Value = "Color";
                    worksheet.Cells[6, 12].Value = "Clarity";
                    worksheet.Cells[6, 13].Value = "Cts";
                    worksheet.Cells[6, 14].Value = "Rap Price($)";
                    worksheet.Cells[6, 15].Value = "Rap Amt($)";
                    worksheet.Cells[6, 16].Value = "Disc(%)";
                    worksheet.Cells[6, 17].Value = "Net Amt($)";
                    worksheet.Cells[6, 18].Value = "Price/Cts";
                    worksheet.Cells[6, 19].Value = "Cut";
                    worksheet.Cells[6, 20].Value = "Polish";
                    worksheet.Cells[6, 21].Value = "Symm";
                    worksheet.Cells[6, 22].Value = "Fls";
                    worksheet.Cells[6, 23].Value = "Length";
                    worksheet.Cells[6, 24].Value = "Width";
                    worksheet.Cells[6, 25].Value = "Depth";
                    worksheet.Cells[6, 26].Value = "Depth(%)";
                    worksheet.Cells[6, 27].Value = "Table(%)";
                    worksheet.Cells[6, 28].Value = "Key To Symbol";
                    worksheet.Cells[6, 29].Value = "Culet";
                    worksheet.Cells[6, 30].Value = "Table Black";
                    worksheet.Cells[6, 31].Value = "Crown Black";
                    worksheet.Cells[6, 32].Value = "Table White";
                    worksheet.Cells[6, 33].Value = "Crown White";
                    worksheet.Cells[6, 34].Value = "Cr Ang";
                    worksheet.Cells[6, 35].Value = "Cr Ht";
                    worksheet.Cells[6, 36].Value = "Pav Ang";
                    worksheet.Cells[6, 37].Value = "Pav Ht";
                    worksheet.Cells[6, 38].Value = "Girdle(%)";
                    worksheet.Cells[6, 39].Value = "Girdle Type";
                    worksheet.Cells[6, 40].Value = "Laser Insc";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 40].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    int inStartIndex = 7, i = 0;
                    int inwrkrow = 7;
                    int inEndCounter = dtDiamonds.Rows.Count + inStartIndex;
                    int TotalRow = dtDiamonds.Rows.Count;

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    //worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    worksheet.Cells[6, 2].AutoFitColumns(9);
                    worksheet.Cells[6, 3].AutoFitColumns(12);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(10.14);
                    worksheet.Cells[6, 6].AutoFitColumns(8.43);
                    worksheet.Cells[6, 7].AutoFitColumns(9.57);
                    worksheet.Cells[6, 8].AutoFitColumns(8.14);
                    worksheet.Cells[6, 9].AutoFitColumns(8.14);
                    worksheet.Cells[6, 10].AutoFitColumns(8.43);
                    worksheet.Cells[6, 11].AutoFitColumns(9.29);
                    worksheet.Cells[6, 12].AutoFitColumns(13);
                    worksheet.Cells[6, 13].AutoFitColumns(12);
                    worksheet.Cells[6, 14].AutoFitColumns(8.14);
                    worksheet.Cells[6, 15].AutoFitColumns(15);
                    worksheet.Cells[6, 16].AutoFitColumns(8.14);
                    worksheet.Cells[6, 17].AutoFitColumns(15);
                    worksheet.Cells[6, 18].AutoFitColumns(8.14);
                    worksheet.Cells[6, 19].AutoFitColumns(7.86);
                    worksheet.Cells[6, 20].AutoFitColumns(7.86);
                    worksheet.Cells[6, 21].AutoFitColumns(7.86);
                    worksheet.Cells[6, 22].AutoFitColumns(7.86);
                    worksheet.Cells[6, 23].AutoFitColumns(7.86);
                    worksheet.Cells[6, 24].AutoFitColumns(7.86);
                    worksheet.Cells[6, 25].AutoFitColumns(7.86);
                    worksheet.Cells[6, 26].AutoFitColumns(9);
                    worksheet.Cells[6, 27].AutoFitColumns(7.9);
                    worksheet.Cells[6, 28].AutoFitColumns(36);
                    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    worksheet.Cells[6, 30].AutoFitColumns(7.86);
                    worksheet.Cells[6, 32].AutoFitColumns(7.86);
                    worksheet.Cells[6, 33].AutoFitColumns(7.86);
                    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    worksheet.Cells[6, 35].AutoFitColumns(7.86);
                    worksheet.Cells[6, 36].AutoFitColumns(7.86);
                    worksheet.Cells[6, 37].AutoFitColumns(7.86);
                    worksheet.Cells[6, 38].AutoFitColumns(7.86);
                    worksheet.Cells[6, 39].AutoFitColumns(7.86);
                    worksheet.Cells[6, 40].AutoFitColumns(7.86);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    string values_1, Image, Video, hyprlink1, S_Detail, Certificate, cut;
                    Int64 number_1;
                    bool success1;
                    var asTitleCase = Thread.CurrentThread.CurrentCulture.TextInfo;
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToInt32(dtDiamonds.Rows[i - inStartIndex]["sr"]);

                        //S_Detail = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_dna"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_dna"]);
                        //if (S_Detail != "")
                        //{
                        //    worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                        //    worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                        //    worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        //}

                        Image = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["image_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["image_url"]);
                        if (Image != "")
                        {
                            hyprlink1 = External_ImageURL + Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["certi_no"]) + "/PR.jpg";
                            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                        }

                        Video = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["movie_url"]);
                        if (Video != "")
                        {
                            worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                            worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                        }

                        values_1 = dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"].ToString();
                        success1 = Int64.TryParse(values_1, out number_1);
                        if (success1)
                        {
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(dtDiamonds.Rows[i - inStartIndex]["stone_ref_no"]);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 4].Value = values_1;
                        }
                        worksheet.Cells[inwrkrow, 5].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Location"]).ToLower());
                        worksheet.Cells[inwrkrow, 6].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["status"]).ToLower());
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["shape"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["pointer"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["lab"]);

                        Certificate = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["view_certi_url"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["view_certi_url"]);
                        if (Certificate != "")
                        {
                            worksheet.Cells[inwrkrow, 9].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtDiamonds.Rows[i - inStartIndex]["lab"] + " \")";
                            worksheet.Cells[inwrkrow, 9].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 9].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["BGM"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["color"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["clarity"]);
                        worksheet.Cells[inwrkrow, 13].Value = ((dtDiamonds.Rows[i - inStartIndex]["cts"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 14].Value = ((dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["cur_rap_rate"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 15].Value = ((dtDiamonds.Rows[i - inStartIndex]["rap_amount"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["rap_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["rap_amount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 16].Value = ((dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["sales_disc_per"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtDiamonds.Rows[i - inStartIndex]["net_amount"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["net_amount"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["net_amount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 18].Value = ((dtDiamonds.Rows[i - inStartIndex]["price_per_cts"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["price_per_cts"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["price_per_cts"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]);
                        worksheet.Cells[inwrkrow, 19].Value = (cut == "FR" ? "F" : cut);
                        worksheet.Cells[inwrkrow, 20].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["polish"]);
                        worksheet.Cells[inwrkrow, 21].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symm"]);

                        if (Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["cut"]) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 19].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 20].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 21].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 22].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["fls"]);

                        worksheet.Cells[inwrkrow, 23].Value = ((dtDiamonds.Rows[i - inStartIndex]["length"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["length"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["length"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 24].Value = ((dtDiamonds.Rows[i - inStartIndex]["width"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["width"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["width"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 25].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["depth"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 26].Value = ((dtDiamonds.Rows[i - inStartIndex]["depth_per"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["depth_per"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["depth_per"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 27].Value = ((dtDiamonds.Rows[i - inStartIndex]["table_per"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["table_per"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["table_per"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["symbol"]);
                        worksheet.Cells[inwrkrow, 29].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sculet"]).ToLower());
                        worksheet.Cells[inwrkrow, 30].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["table_natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["table_natts"]).ToLower());
                        worksheet.Cells[inwrkrow, 31].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Natts"]).ToLower());
                        worksheet.Cells[inwrkrow, 32].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["inclusion"]).ToLower());
                        worksheet.Cells[inwrkrow, 33].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["Crown_Inclusion"]).ToLower());
                        worksheet.Cells[inwrkrow, 34].Value = dtDiamonds.Rows[i - inStartIndex]["crown_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_angle"];

                        worksheet.Cells[inwrkrow, 35].Value = dtDiamonds.Rows[i - inStartIndex]["crown_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["crown_height"];

                        worksheet.Cells[inwrkrow, 36].Value = dtDiamonds.Rows[i - inStartIndex]["pav_angle"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_angle"];

                        worksheet.Cells[inwrkrow, 37].Value = dtDiamonds.Rows[i - inStartIndex]["pav_height"] == null ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"].ToString() == "" ? 0 : dtDiamonds.Rows[i - inStartIndex]["pav_height"];

                        worksheet.Cells[inwrkrow, 38].Value = ((dtDiamonds.Rows[i - inStartIndex]["girdle_per"] != null) ?
                                (dtDiamonds.Rows[i - inStartIndex]["girdle_per"].GetType().Name != "DBNull" ?
                                Convert.ToDouble(dtDiamonds.Rows[i - inStartIndex]["girdle_per"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 39].Value = asTitleCase.ToTitleCase(Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["girdle_type"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["girdle_type"]).ToLower());

                        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtDiamonds.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtDiamonds.Rows[i - inStartIndex]["sInscription"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[inStartIndex, 1, (inwrkrow - 1), 40].Style.Font.Size = 9;

                    worksheet.Cells[6, 8, (inwrkrow - 1), 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 8, (inwrkrow - 1), 8].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 13, (inwrkrow - 1), 18].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 17].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[6, 16, (inwrkrow - 1), 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 16, (inwrkrow - 1), 17].Style.Fill.BackgroundColor.SetColor(colFromHex_Dis);

                    worksheet.Cells[inStartIndex, 23, (inwrkrow - 1), 27].Style.Numberformat.Format = "0.00";
                    worksheet.Cells[inStartIndex, 34, (inwrkrow - 1), 38].Style.Numberformat.Format = "0.00";

                    worksheet.Cells[5, 4].Formula = "ROUND(SUBTOTAL(102,A" + inStartIndex + ":A" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 4].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 4].Style.Numberformat.Format = "#,##";
                    ExcelStyle cellStyleHeader_Total = worksheet.Cells[5, 4].Style;
                    cellStyleHeader_Total.Border.Left.Style = cellStyleHeader_Total.Border.Right.Style
                            = cellStyleHeader_Total.Border.Top.Style = cellStyleHeader_Total.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 13].Formula = "ROUND(SUBTOTAL(109,M" + inStartIndex + ":M" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 13].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 13].Style.Numberformat.Format = "#,##0.00";
                    ExcelStyle cellStyleHeader_Totalcarat = worksheet.Cells[5, 13].Style;
                    cellStyleHeader_Totalcarat.Border.Left.Style = cellStyleHeader_Totalcarat.Border.Right.Style
                            = cellStyleHeader_Totalcarat.Border.Top.Style = cellStyleHeader_Totalcarat.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0";
                    ExcelStyle cellStyleHeader_TotalAmt = worksheet.Cells[5, 15].Style;
                    cellStyleHeader_TotalAmt.Border.Left.Style = cellStyleHeader_TotalAmt.Border.Right.Style
                            = cellStyleHeader_TotalAmt.Border.Top.Style = cellStyleHeader_TotalAmt.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 16].Formula = "ROUND((1-(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")/SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + ")))*(-100),2)";
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";
                    ExcelStyle cellStyleHeader_TotalDis = worksheet.Cells[5, 16].Style;
                    cellStyleHeader_TotalDis.Border.Left.Style = cellStyleHeader_TotalDis.Border.Right.Style
                            = cellStyleHeader_TotalDis.Border.Top.Style = cellStyleHeader_TotalDis.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";
                    ExcelStyle cellStyleHeader_TotalNet = worksheet.Cells[5, 17].Style;
                    cellStyleHeader_TotalNet.Border.Left.Style = cellStyleHeader_TotalNet.Border.Right.Style
                            = cellStyleHeader_TotalNet.Border.Top.Style = cellStyleHeader_TotalNet.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;
                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);
                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public class FillingWorksheetEventArgs : EventArgs
        {

            public FillingWorksheetEventArgs(ExcelWorksheet ws, ExcelStyle Style)
            {

                this.Worksheet = ws;
                this.Style = Style;

            }


            private ExcelStyle _Style;

            public ExcelStyle Style
            {
                get { return _Style; }
                set { _Style = value; }
            }



            private ExcelWorksheet ws;

            public ExcelWorksheet Worksheet
            {
                get { return ws; }
                set { ws = value; }
            }

            //private SheetData wsd;

            //public SheetData Data
            //{
            //    get { return wsd; }
            //    set { wsd = value; }
            //}

            private int _FooterRowCount;

            public int FooterRowCount
            {
                get { return _FooterRowCount; }
                set { _FooterRowCount = value; }
            }

            private int _StartrowCount;

            public int StartrowCount
            {
                get { return _StartrowCount; }
                set { _StartrowCount = value; }
            }



        }

        public class BeforeCreateCellEventArgs : EventArgs
        {
            public OfficeOpenXml.eDataTypes ColDataType;
            public CellType celltype;
            public TableArea ta;
        }

        public class AddHeaderEventArgs : EventArgs
        {

            public AddHeaderEventArgs(ExcelWorksheet ws, UInt32 HeaderRowcount)
            {

                this._HeaderRowcount = HeaderRowcount;

            }

            private ExcelWorksheet _Worksheet;

            public ExcelWorksheet Worksheet
            {
                get { return _Worksheet; }
                set { _Worksheet = value; }
            }

            private UInt32 _HeaderRowcount;

            public UInt32 HeaderRowcount
            {
                get { return _HeaderRowcount; }
                set { _HeaderRowcount = value; }
            }


        }

        public class AddFooterEventArgs : EventArgs
        {

            public AddFooterEventArgs(ExcelWorksheet ws, UInt32 DetailStartRowcount, UInt32 DetailEndRowcount)
            {
                //this._Worksheet = ws;
                //this._DetailStartCount = DetailStartRowcount;
                //this._DetailEndCount = DetailEndRowcount;
            }

            private ExcelWorksheet _Worksheet;

            public ExcelWorksheet Worksheet
            {
                get { return _Worksheet; }
                set { _Worksheet = value; }
            }

            private int _DetailStartCount;

            public int DetailStartCount
            {
                get { return _DetailStartCount; }
                set { _DetailStartCount = value; }
            }


            private int _DetailEndCount;

            public int DetailEndCount
            {
                get { return _DetailEndCount; }
                set { _DetailEndCount = value; }
            }
        }

        public struct ExcelHeader
        {
            public String ColName;
            public String HyperlinkColName;
            public String Caption;
            public eDataTypes ColDataType;
            public TotalsRowFunctionValues SummFunction;
            public String SummFormula;
            public String SummText;
            public Int32 ColInd;
            public bool visible;
            public string NumFormat;
            public OfficeOpenXml.Style.ExcelVerticalAlignment VerticalAllign;
            public OfficeOpenXml.Style.ExcelHorizontalAlignment HorizontalAllign;
            public Double Width;
        }

        public class ExcelFormat : ICloneable
        {
            public String ColumnName;
            public Double fontsize;
            public String forColorArgb;
            public String fontname;
            public Int32 FontFamilyindex;
            public Boolean isbold;
            public Boolean isitalic = false;
            public String backgroundArgb;
            public TableArea tableArea;
            public UInt32? StyleInd;
            public string Format;
            public string url;
            public object GridRow;
            public int RowIndex; //add by kaushal date[07-04-2018]
            public OfficeOpenXml.Style.ExcelUnderLineType ul;
            public OfficeOpenXml.Style.ExcelVerticalAlignment VerticalAllign;
            public OfficeOpenXml.Style.ExcelHorizontalAlignment HorizontalAllign;


            public bool IsEqual(ExcelFormat cf)
            {

                if (this.fontsize != cf.fontsize)
                {
                    return false;
                }

                if (this.forColorArgb != cf.forColorArgb)
                {
                    return false;
                }

                if (this.backgroundArgb != cf.backgroundArgb)
                {
                    return false;
                }

                if (this.fontname != cf.fontname)
                {
                    return false;
                }
                if (this.FontFamilyindex != cf.FontFamilyindex)
                {
                    return false;
                }

                if (this.isbold != cf.isbold)
                {
                    return false;
                }
                if (this.isitalic != cf.isitalic)
                {
                    return false;
                }

                if (this.Format != cf.Format)
                {
                    return false;
                }

                if (this.VerticalAllign != cf.VerticalAllign)
                {
                    return false;
                }

                if (this.HorizontalAllign != cf.HorizontalAllign)
                {
                    return false;
                }


                return true;

            }

            public object Clone()
            {
                ExcelFormat newclone = new ExcelFormat();

                newclone.ColumnName = this.ColumnName;
                newclone.fontsize = this.fontsize;
                newclone.forColorArgb = this.forColorArgb;
                newclone.fontname = this.fontname;
                newclone.FontFamilyindex = this.FontFamilyindex;
                newclone.isbold = this.isbold;
                newclone.isitalic = this.isitalic;
                newclone.backgroundArgb = this.backgroundArgb;
                newclone.tableArea = this.tableArea;
                newclone.StyleInd = this.StyleInd;
                newclone.Format = this.Format;
                newclone.url = this.url;
                newclone.GridRow = this.GridRow;
                newclone.VerticalAllign = this.VerticalAllign;
                newclone.HorizontalAllign = this.HorizontalAllign;

                return newclone;

            }
        }

        public class ExcelCellFormat : ExcelFormat
        {

            public bool OverrideDefault = false;
            public String Formula;
            public String Text;
            public int ColInd;
            public int RowInd;
            public int? HeaderStartRow;
            public int? DetailStartRow;
            public int? FooterStartRow;

            public bool IsEqual(ExcelCellFormat cf)
            {

                if (this.fontsize != cf.fontsize)
                {
                    return false;
                }

                if (this.forColorArgb != cf.forColorArgb)
                {
                    return false;
                }
                if (this.fontname != cf.fontname)
                {
                    return false;
                }
                if (this.FontFamilyindex != cf.FontFamilyindex)
                {
                    return false;
                }

                if (this.isbold != cf.isbold)
                {
                    return false;
                }
                if (this.isitalic != cf.isitalic)
                {
                    return false;
                }
                if (this.Formula != cf.Formula)
                {
                    return false;
                }
                if (this.Format != cf.Format)
                {
                    return false;
                }

                if (this.VerticalAllign != cf.VerticalAllign)
                {
                    return false;
                }

                if (this.HorizontalAllign != cf.HorizontalAllign)
                {
                    return false;
                }


                return true;

            }
        }

        public enum CellType
        {
            Normal = 1,
            Formula = 2
        }

        public enum TotalsRowFunctionValues
        {
            //[EnumString("none")]
            None = 0,
            //[EnumString("sum")]
            Sum = 1,
            //[EnumString("min")]
            Minimum = 2,
            //[EnumString("max")]
            Maximum = 3,
            //[EnumString("average")]
            Average = 4,
            //[EnumString("count")]
            Count = 5,
            //[EnumString("countNums")]
            CountNumbers = 6,
            //[EnumString("stdDev")]
            StandardDeviation = 7,
            //[EnumString("var")]
            Variance = 8,
            //[EnumString("custom")]
            Custom = 9,
            SumIf = 10,
        }

        public enum FormulaIndex
        {

            Average = 101,
            Count = 102, CountA = 103, Max = 104, Min = 105, Product = 106, StdDev = 107, StdEvp = 108,
            Sum = 109, Var = 110, VarP = 111,
            AverageAll = 1,
            CountAll = 2, CountAAll = 3, MaxAll = 4, MinAll = 5, ProductAll = 6, StdDevAll = 7, StdDevPAll = 8,
            SumAll = 9, VarAll = 10, VarPAll = 11, SumIf = 12
        }

        public struct KnownHexValue
        {
            //public const String Black = "FF000000";
            //public const String White = "FFFFFFFF";
            //public const String Blue = "FF0000FF";

            public const String Black = "-16777216";
            public const String White = "-1";
            public const String Blue = "-16776961";
        }

        public enum TableArea
        {
            Header = 1, Detail = 2, Footer = 3
        }
        public static void CreatePurchaseOrderExcel_Old(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUPPLIER ORDER HISTORY FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 28].Style.Font.Size = 11;

                    worksheet.Cells[5, 1, 6, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 28].Style.Font.Size = 10;
                    worksheet.Cells[5, 1, 6, 28].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 28].AutoFilter = true;

                    worksheet.Cells[6, 7, 6, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 9, 6, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[6, 1, 6, 28].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 28].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    worksheet.Cells[6, 2].Value = "Order Date";
                    worksheet.Cells[6, 3].Value = "Order No.";
                    worksheet.Cells[6, 4].Value = "Supp. Status";
                    worksheet.Cells[6, 5].Value = "User Name";
                    worksheet.Cells[6, 6].Value = "Company Name";
                    worksheet.Cells[6, 7].Value = "Stock Id";
                    worksheet.Cells[6, 8].Value = "Certi No.";
                    worksheet.Cells[6, 9].Value = "Shape";
                    worksheet.Cells[6, 10].Value = "Lab";
                    worksheet.Cells[6, 11].Value = "BGM";
                    worksheet.Cells[6, 12].Value = "Pointer";
                    worksheet.Cells[6, 13].Value = "Color";
                    worksheet.Cells[6, 14].Value = "Clarity";
                    worksheet.Cells[6, 15].Value = "Cts";
                    worksheet.Cells[6, 16].Value = "Rap Price($)";
                    worksheet.Cells[6, 17].Value = "Rap Amt($)";
                    worksheet.Cells[6, 18].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[6, 19].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[6, 20].Value = "Final Disc.(%)";
                    worksheet.Cells[6, 21].Value = "Final Value";

                    worksheet.Cells[6, 22].Value = "Profit.(%)";
                    worksheet.Cells[6, 23].Value = "Cut";
                    worksheet.Cells[6, 24].Value = "Polish";
                    worksheet.Cells[6, 25].Value = "Symm";
                    worksheet.Cells[6, 26].Value = "Fls";
                    worksheet.Cells[6, 27].Value = "Customer Name";
                    worksheet.Cells[6, 28].Value = "Party Code";


                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 28].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    worksheet.Cells[6, 3].AutoFitColumns(9);
                    worksheet.Cells[6, 4].AutoFitColumns(12);
                    worksheet.Cells[6, 5].AutoFitColumns(10);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(16);
                    worksheet.Cells[6, 8].AutoFitColumns(38);
                    worksheet.Cells[6, 9].AutoFitColumns(10);
                    worksheet.Cells[6, 10].AutoFitColumns(38);
                    worksheet.Cells[6, 11].AutoFitColumns(16);
                    worksheet.Cells[6, 12].AutoFitColumns(12);
                    worksheet.Cells[6, 13].AutoFitColumns(10.14);
                    worksheet.Cells[6, 14].AutoFitColumns(25);
                    worksheet.Cells[6, 15].AutoFitColumns(10);
                    worksheet.Cells[6, 16].AutoFitColumns(10);
                    worksheet.Cells[6, 17].AutoFitColumns(10);
                    worksheet.Cells[6, 18].AutoFitColumns(9.57);
                    worksheet.Cells[6, 19].AutoFitColumns(8.14);
                    worksheet.Cells[6, 20].AutoFitColumns(8.14);
                    worksheet.Cells[6, 21].AutoFitColumns(13.5);
                    worksheet.Cells[6, 22].AutoFitColumns(8.43);
                    worksheet.Cells[6, 23].AutoFitColumns(9.29);
                    worksheet.Cells[6, 24].AutoFitColumns(13);
                    worksheet.Cells[6, 25].AutoFitColumns(8.14);
                    worksheet.Cells[6, 26].AutoFitColumns(15);
                    worksheet.Cells[6, 27].AutoFitColumns(15);
                    worksheet.Cells[6, 28].AutoFitColumns(15);
                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 10, inEndCounter, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 28].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = (i - 6);


                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 3].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Supplier_Status"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);
                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);



                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);


                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);



                        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);


                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(skyBlueColor);



                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    worksheet.Cells[5, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 7].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[5, 7].Style.Border.Left.Style = worksheet.Cells[5, 7].Style.Border.Right.Style
                            = worksheet.Cells[5, 7].Style.Border.Top.Style = worksheet.Cells[5, 7].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 15].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 15].Style.Border.Left.Style = worksheet.Cells[5, 15].Style.Border.Right.Style
                            = worksheet.Cells[5, 15].Style.Border.Top.Style = worksheet.Cells[5, 15].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 17].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 17].Style.Border.Left.Style = worksheet.Cells[5, 17].Style.Border.Right.Style
                            = worksheet.Cells[5, 17].Style.Border.Top.Style = worksheet.Cells[5, 17].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                    //worksheet.Cells[5, 16].Formula = "IF(SUBTOTAL(109,AA" + inStartIndex + ": AA" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,AC" + inStartIndex + ":AC" + (inwrkrow - 1) + ")/SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")))*(-100),2))";
                    //worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";
                    //worksheet.Cells[5, 16].Style.Border.Left.Style = worksheet.Cells[5, 16].Style.Border.Right.Style
                    //        = worksheet.Cells[5, 16].Style.Border.Top.Style = worksheet.Cells[5, 16].Style.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 19].Style.Border.Left.Style = worksheet.Cells[5, 19].Style.Border.Right.Style
                            = worksheet.Cells[5, 19].Style.Border.Top.Style = worksheet.Cells[5, 19].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //worksheet.Cells[5, 30].Formula = "ROUND(SUBTOTAL(109,AD" + inStartIndex + ":AD" + (inwrkrow - 1) + "),2)";
                    //worksheet.Cells[5, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //worksheet.Cells[5, 30].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //worksheet.Cells[5, 30].Style.Numberformat.Format = "#,##0.00";
                    //worksheet.Cells[5, 30].Style.Border.Left.Style = worksheet.Cells[5, 30].Style.Border.Right.Style
                    //        = worksheet.Cells[5, 30].Style.Border.Top.Style = worksheet.Cells[5, 30].Style.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                            = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 18].Style.Border.Left.Style = worksheet.Cells[5, 18].Style.Border.Right.Style
                            = worksheet.Cells[5, 18].Style.Border.Top.Style = worksheet.Cells[5, 18].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    ////=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                    worksheet.Cells[5, 20].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ") / SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                            = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;
                    //}
                    //else if (isEmp)
                    //{
                    //    worksheet.Cells[5, 1].Value = "Total";
                    //    worksheet.Cells[5, 1, 5, 45].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    //    worksheet.Cells[5, 1, 5, 45].Style.Font.Size = 11;

                    //    worksheet.Cells[5, 1, 6, 45].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //    worksheet.Cells[6, 1, 6, 45].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    //    worksheet.Cells[6, 1, 6, 45].Style.Font.Size = 10;
                    //    worksheet.Cells[5, 1, 6, 45].Style.Font.Bold = true;
                    //    worksheet.Cells[6, 1, 6, 45].AutoFilter = true;

                    //    worksheet.Cells[6, 7, 6, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //    worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //    worksheet.Cells[6, 8, 6, 45].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //    worksheet.Cells[6, 1, 6, 45].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 1, 6, 45].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    //    #region Header Name Declaration

                    //    worksheet.Cells[6, 1].Value = "Sr. No";
                    //    worksheet.Cells[6, 2].Value = "DNA";
                    //    worksheet.Cells[6, 3].Value = "View Image";
                    //    worksheet.Cells[6, 4].Value = "HD Movie";
                    //    worksheet.Cells[6, 5].Value = "Order Date";
                    //    worksheet.Cells[6, 6].Value = "Order No.";
                    //    worksheet.Cells[6, 7].Value = "Assist By";
                    //    worksheet.Cells[6, 8].Value = "Stock Id";
                    //    worksheet.Cells[6, 9].Value = "Location";
                    //    worksheet.Cells[6, 10].Value = "Supp. Status";
                    //    worksheet.Cells[6, 11].Value = "Shape";
                    //    worksheet.Cells[6, 12].Value = "Pointer";
                    //    worksheet.Cells[6, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    //    worksheet.Cells[6, 13].Value = "Lab";
                    //    worksheet.Cells[6, 14].Value = "Certi No.";
                    //    worksheet.Cells[6, 15].Value = "BGM";
                    //    worksheet.Cells[6, 16].Value = "Color";
                    //    worksheet.Cells[6, 17].Value = "Clarity";
                    //    worksheet.Cells[6, 18].Value = "Cts";
                    //    worksheet.Cells[6, 19].Value = "Rap Price($)";
                    //    worksheet.Cells[6, 20].Value = "Rap Amt($)";

                    //    worksheet.Cells[6, 21].Value = "Disc(%)";
                    //    worksheet.Cells[6, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 21].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[6, 22].Value = "Net Amt($)";
                    //    worksheet.Cells[6, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 22].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[6, 23].Value = "Price/Cts";
                    //    worksheet.Cells[6, 24].Value = "Cut";
                    //    worksheet.Cells[6, 25].Value = "Polish";
                    //    worksheet.Cells[6, 26].Value = "Symm";
                    //    worksheet.Cells[6, 27].Value = "Fls";
                    //    worksheet.Cells[6, 28].Value = "Length";
                    //    worksheet.Cells[6, 29].Value = "Width";
                    //    worksheet.Cells[6, 30].Value = "Depth";
                    //    worksheet.Cells[6, 31].Value = "Depth(%)";
                    //    worksheet.Cells[6, 32].Value = "Table(%)";
                    //    worksheet.Cells[6, 33].Value = "Key To Symbol";
                    //    worksheet.Cells[6, 34].Value = "Culet";
                    //    worksheet.Cells[6, 35].Value = "Table Black";
                    //    worksheet.Cells[6, 36].Value = "Crown Black";
                    //    worksheet.Cells[6, 37].Value = "Table White";
                    //    worksheet.Cells[6, 38].Value = "Crown White";
                    //    worksheet.Cells[6, 39].Value = "Cr Ang";
                    //    worksheet.Cells[6, 40].Value = "Cr Ht";
                    //    worksheet.Cells[6, 41].Value = "Pav Ang";
                    //    worksheet.Cells[6, 42].Value = "Pav Ht";
                    //    worksheet.Cells[6, 43].Value = "Girdle(%)";
                    //    worksheet.Cells[6, 44].Value = "Girdle Type";
                    //    worksheet.Cells[6, 45].Value = "Laser Insc";

                    //    worksheet.Cells[6, 1, 6, 45].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 45].Style.Border.Right.Style
                    //            = worksheet.Cells[6, 1, 6, 45].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 45].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    #endregion

                    //    #region Set AutoFit and Decimal Number Format

                    //    worksheet.View.FreezePanes(7, 1);

                    //    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    //    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    //    worksheet.Cells[6, 3].AutoFitColumns(9);
                    //    worksheet.Cells[6, 4].AutoFitColumns(12);
                    //    worksheet.Cells[6, 5].AutoFitColumns(10);
                    //    worksheet.Cells[6, 6].AutoFitColumns(10);
                    //    worksheet.Cells[6, 7].AutoFitColumns(16);
                    //    worksheet.Cells[6, 8].AutoFitColumns(12);
                    //    worksheet.Cells[6, 9].AutoFitColumns(10.14);
                    //    worksheet.Cells[6, 10].AutoFitColumns(8.43);
                    //    worksheet.Cells[6, 11].AutoFitColumns(9.57);
                    //    worksheet.Cells[6, 12].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 13].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 14].AutoFitColumns(13.5);
                    //    worksheet.Cells[6, 15].AutoFitColumns(8.43);
                    //    worksheet.Cells[6, 16].AutoFitColumns(9.29);
                    //    worksheet.Cells[6, 17].AutoFitColumns(13);
                    //    worksheet.Cells[6, 19].AutoFitColumns(15);
                    //    worksheet.Cells[6, 20].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 21].AutoFitColumns(11);
                    //    worksheet.Cells[6, 18].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 22].AutoFitColumns(11);
                    //    worksheet.Cells[6, 23].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 24].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 25].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 26].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 27].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 28].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 30].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 31].AutoFitColumns(9);
                    //    worksheet.Cells[6, 32].AutoFitColumns(7.9);
                    //    worksheet.Cells[6, 33].AutoFitColumns(35.29);
                    //    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 35].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 36].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 37].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 38].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 39].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 40].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 41].AutoFitColumns(7);
                    //    worksheet.Cells[6, 42].AutoFitColumns(7);
                    //    worksheet.Cells[6, 43].AutoFitColumns(10);
                    //    worksheet.Cells[6, 44].AutoFitColumns(7);
                    //    worksheet.Cells[6, 45].AutoFitColumns(7.9);

                    //    //Set Cell Faoat value with Alignment
                    //    worksheet.Cells[inStartIndex, 7, inEndCounter, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //    worksheet.Cells[inStartIndex, 8, inEndCounter, 45].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //    #endregion

                    //    worksheet.Cells[inStartIndex, 1, inEndCounter, 45].Style.Font.Size = 9;
                    //    for (i = inStartIndex; i < inEndCounter; i++)
                    //    {
                    //        #region Assigns Value to Cell
                    //        worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                    //        S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                    //        if (!string.IsNullOrEmpty(S_Detail))
                    //        {
                    //            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                    //            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                    //            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                    //        }

                    //        if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                    //        {
                    //            Image = Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                    //            if (!string.IsNullOrEmpty(Image))
                    //            {
                    //                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                    //                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }
                    //        if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                    //        {
                    //            Video = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                    //            if (!string.IsNullOrEmpty(Video))
                    //            {
                    //                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                    //                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }

                    //        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 6].Value = values_2;
                    //        }

                    //        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 8].Value = values_2;
                    //        }
                    //        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Supplier_Status"]);
                    //        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                    //        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                    //        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                    //        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                    //        worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);

                    //        if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                    //        {
                    //            Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                    //            if (Certificate != "")
                    //            {
                    //                worksheet.Cells[inwrkrow, 13].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                    //                worksheet.Cells[inwrkrow, 13].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 13].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 14].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 14].Value = values_2;
                    //        }

                    //        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                    //        worksheet.Cells[inwrkrow, 16].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                    //        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                    //        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                    //        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                    //        worksheet.Cells[inwrkrow, 24].Value = (cut == "FR" ? "F" : cut);
                    //        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                    //        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                    //        if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                    //        {
                    //            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                    //            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                    //            worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                    //        }

                    //        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                    //        worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 29].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 30].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 31].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                    //        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                    //        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                    //        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                    //        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                    //        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                    //        worksheet.Cells[inwrkrow, 39].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                    //        worksheet.Cells[inwrkrow, 40].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                    //        worksheet.Cells[inwrkrow, 41].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                    //        worksheet.Cells[inwrkrow, 42].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                    //        try
                    //        {
                    //            worksheet.Cells[inwrkrow, 43].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                    //        }
                    //        catch { }

                    //        worksheet.Cells[inwrkrow, 44].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                    //        worksheet.Cells[inwrkrow, 45].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                    //        inwrkrow++;

                    //        #endregion
                    //    }

                    //    worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[inStartIndex, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);
                    //    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 23].Style.Numberformat.Format = "#,##0.00";

                    //    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    //    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    //    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[inStartIndex, 28, (inwrkrow - 1), 32].Style.Numberformat.Format = "0.00";
                    //    worksheet.Cells[inStartIndex, 39, (inwrkrow - 1), 43].Style.Numberformat.Format = "0.00";

                    //    worksheet.Cells[5, 8].Formula = "ROUND(SUBTOTAL(103,H" + inStartIndex + ":H" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 8].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 8].Style.Numberformat.Format = "#,##";
                    //    worksheet.Cells[5, 8].Style.Border.Left.Style = worksheet.Cells[5, 8].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 8].Style.Border.Top.Style = worksheet.Cells[5, 8].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 18].Style.Border.Left.Style = worksheet.Cells[5, 18].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 18].Style.Border.Top.Style = worksheet.Cells[5, 18].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0";
                    //    worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 21].Formula = "ROUND((1-(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")/SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")))*(-100),2)";
                    //    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";
                    //    worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;
                    //}
                    //else
                    //{
                    //    worksheet.Cells[5, 1].Value = "Total";
                    //    worksheet.Cells[5, 1, 5, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    //    worksheet.Cells[5, 1, 5, 49].Style.Font.Size = 11;
                    //    worksheet.Cells[5, 1, 6, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //    worksheet.Cells[6, 1, 6, 49].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    //    worksheet.Cells[6, 1, 6, 49].Style.Font.Size = 10;
                    //    worksheet.Cells[5, 1, 6, 49].Style.Font.Bold = true;
                    //    worksheet.Cells[6, 1, 6, 49].AutoFilter = true;
                    //    worksheet.Cells[6, 1, 6, 49].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 1, 6, 49].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    //    #region Header Name Declaration

                    //    worksheet.Cells[6, 1].Value = "Sr. No";
                    //    worksheet.Cells[6, 2].Value = "DNA";
                    //    worksheet.Cells[6, 3].Value = "View Image";
                    //    worksheet.Cells[6, 4].Value = "HD Movie";
                    //    worksheet.Cells[6, 5].Value = "Order Date";
                    //    worksheet.Cells[6, 6].Value = "Order No.";
                    //    worksheet.Cells[6, 7].Value = "Stock Id";
                    //    worksheet.Cells[6, 8].Value = "Location";
                    //    worksheet.Cells[6, 9].Value = "Status";
                    //    worksheet.Cells[6, 10].Value = "Arrival in HK";
                    //    worksheet.Cells[6, 11].Value = "Ready to Pick up";
                    //    worksheet.Cells[6, 12].Value = "Collected Date";
                    //    worksheet.Cells[6, 13].Value = "Shape";

                    //    worksheet.Cells[6, 14].Value = "Pointer";
                    //    worksheet.Cells[6, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    //    worksheet.Cells[6, 15].Value = "Lab";
                    //    worksheet.Cells[6, 16].Value = "Certi No.";
                    //    worksheet.Cells[6, 17].Value = "BGM";
                    //    worksheet.Cells[6, 18].Value = "Color";
                    //    worksheet.Cells[6, 19].Value = "Clarity";
                    //    worksheet.Cells[6, 20].Value = "Cts";
                    //    worksheet.Cells[6, 21].Value = "Rap Price($)";
                    //    worksheet.Cells[6, 22].Value = "Rap Amt($)";

                    //    worksheet.Cells[6, 23].Value = "Offer Disc.(%)"; //"Disc(%)";
                    //    worksheet.Cells[6, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 23].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[6, 24].Value = "Offer Value($)"; //"Net Amt($)";
                    //    worksheet.Cells[6, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 24].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[6, 25].Value = "Web Disc.($)";
                    //    worksheet.Cells[6, 26].Value = "Final Value";
                    //    worksheet.Cells[6, 27].Value = "Final Disc.(%)";

                    //    //worksheet.Cells[6, 25].Value = "Price/Cts";
                    //    worksheet.Cells[6, 28].Value = "Cut";
                    //    worksheet.Cells[6, 29].Value = "Polish";
                    //    worksheet.Cells[6, 30].Value = "Symm";
                    //    worksheet.Cells[6, 31].Value = "Fls";
                    //    worksheet.Cells[6, 32].Value = "Length";
                    //    worksheet.Cells[6, 33].Value = "Width";
                    //    worksheet.Cells[6, 34].Value = "Depth";
                    //    worksheet.Cells[6, 35].Value = "Depth(%)";
                    //    worksheet.Cells[6, 36].Value = "Table(%)";
                    //    worksheet.Cells[6, 37].Value = "Key To Symbol";
                    //    worksheet.Cells[6, 38].Value = "Culet";
                    //    worksheet.Cells[6, 39].Value = "Table Black";
                    //    worksheet.Cells[6, 40].Value = "Crown Black";
                    //    worksheet.Cells[6, 41].Value = "Table White";
                    //    worksheet.Cells[6, 42].Value = "Crown White";
                    //    worksheet.Cells[6, 43].Value = "Cr Ang";
                    //    worksheet.Cells[6, 44].Value = "Cr Ht";
                    //    worksheet.Cells[6, 45].Value = "Pav Ang";
                    //    worksheet.Cells[6, 46].Value = "Pav Ht";
                    //    worksheet.Cells[6, 47].Value = "Girdle(%)";
                    //    worksheet.Cells[6, 48].Value = "Girdle Type";
                    //    worksheet.Cells[6, 49].Value = "Laser Insc";

                    //    worksheet.Cells[6, 1, 6, 49].Style.Border.Left.Style = worksheet.Cells[6, 1, 6, 49].Style.Border.Right.Style
                    //            = worksheet.Cells[6, 1, 6, 49].Style.Border.Top.Style = worksheet.Cells[6, 1, 6, 49].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    #endregion

                    //    #region Set AutoFit and Decimal Number Format

                    //    worksheet.View.FreezePanes(7, 1);

                    //    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    //    worksheet.Cells[6, 2].AutoFitColumns(8.86);
                    //    worksheet.Cells[6, 3].AutoFitColumns(9);
                    //    worksheet.Cells[6, 4].AutoFitColumns(12);
                    //    worksheet.Cells[6, 5].AutoFitColumns(10);
                    //    worksheet.Cells[6, 6].AutoFitColumns(10);
                    //    worksheet.Cells[6, 7].AutoFitColumns(12);
                    //    worksheet.Cells[6, 8].AutoFitColumns(10.14);
                    //    worksheet.Cells[6, 9].AutoFitColumns(16);
                    //    worksheet.Cells[6, 10].AutoFitColumns(10);
                    //    worksheet.Cells[6, 11].AutoFitColumns(10);
                    //    worksheet.Cells[6, 12].AutoFitColumns(10);
                    //    worksheet.Cells[6, 13].AutoFitColumns(9.57);
                    //    worksheet.Cells[6, 14].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 15].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 16].AutoFitColumns(13.5);
                    //    worksheet.Cells[6, 17].AutoFitColumns(8.43);
                    //    worksheet.Cells[6, 18].AutoFitColumns(9.29);
                    //    worksheet.Cells[6, 19].AutoFitColumns(13);
                    //    worksheet.Cells[6, 20].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 21].AutoFitColumns(15);
                    //    worksheet.Cells[6, 22].AutoFitColumns(11);
                    //    worksheet.Cells[6, 23].AutoFitColumns(11); //"Offer Disc.(%)"
                    //    worksheet.Cells[6, 24].AutoFitColumns(17); //"Offer Value($)"
                    //    worksheet.Cells[6, 25].AutoFitColumns(12); //"Web Disc.($)"; 
                    //    worksheet.Cells[6, 26].AutoFitColumns(12); //"Final Value";
                    //    worksheet.Cells[6, 27].AutoFitColumns(12); //"Final Disc.(%)";

                    //    //worksheet.Cells[6, 25].AutoFitColumns(8.14);
                    //    worksheet.Cells[6, 28].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 29].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 30].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 31].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 32].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 33].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 34].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 35].AutoFitColumns(9);
                    //    worksheet.Cells[6, 36].AutoFitColumns(7.9);
                    //    worksheet.Cells[6, 37].AutoFitColumns(35.29);
                    //    worksheet.Cells[6, 38].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 39].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 40].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 41].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 42].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 43].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 44].AutoFitColumns(7.86);
                    //    worksheet.Cells[6, 45].AutoFitColumns(7);
                    //    worksheet.Cells[6, 46].AutoFitColumns(7);
                    //    worksheet.Cells[6, 47].AutoFitColumns(10);
                    //    worksheet.Cells[6, 48].AutoFitColumns(7);
                    //    worksheet.Cells[6, 49].AutoFitColumns(7.9);

                    //    //Set Cell Faoat value with Alignment
                    //    worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    //    #endregion

                    //    worksheet.Cells[inStartIndex, 1, inEndCounter, 49].Style.Font.Size = 9;
                    //    for (i = inStartIndex; i < inEndCounter; i++)
                    //    {
                    //        #region Assigns Value to Cell

                    //        worksheet.Cells[inwrkrow, 1].Value = (i - 6);

                    //        //worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : dtOrders.Rows[i - inStartIndex]["movie_url"]);

                    //        S_Detail = dtOrders.Rows[i - inStartIndex]["view_dna"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_dna"]);

                    //        if (!string.IsNullOrEmpty(S_Detail))
                    //        {
                    //            worksheet.Cells[inwrkrow, 2].Formula = "=HYPERLINK(\"" + S_Detail + "\",\" DNA \")";
                    //            worksheet.Cells[inwrkrow, 2].Style.Font.UnderLine = true;
                    //            worksheet.Cells[inwrkrow, 2].Style.Font.Color.SetColor(Color.Blue);
                    //        }

                    //        if (dtOrders.Rows[i - inStartIndex]["image_url"] != null)
                    //        {
                    //            Image = dtOrders.Rows[i - inStartIndex]["image_url"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["image_url"]);
                    //            if (!string.IsNullOrEmpty(Image))
                    //            {
                    //                worksheet.Cells[inwrkrow, 3].Formula = "=HYPERLINK(\"" + Image + "\",\" Image \")";
                    //                worksheet.Cells[inwrkrow, 3].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 3].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }
                    //        if (dtOrders.Rows[i - inStartIndex]["movie_url"] != null)
                    //        {
                    //            Video = dtOrders.Rows[i - inStartIndex]["movie_url"] == null ? "" : Convert.ToString(dtOrders.Rows[i - inStartIndex]["movie_url"]);
                    //            if (!string.IsNullOrEmpty(Video))
                    //            {
                    //                worksheet.Cells[inwrkrow, 4].Formula = "=HYPERLINK(\"" + Video + "\",\" Video \")";
                    //                worksheet.Cells[inwrkrow, 4].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 4].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }

                    //        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 6].Value = values_2;
                    //        }

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 7].Value = values_2;
                    //        }

                    //        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Location"]);
                    //        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);
                    //        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Exp_Del_Date"]);
                    //        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["PickUp_Status"]);
                    //        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Delivery_Date"]);

                    //        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                    //        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);

                    //        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                    //        worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);

                    //        if (dtOrders.Rows[i - inStartIndex]["view_certi_url"] != null)
                    //        {
                    //            Certificate = Convert.ToString(dtOrders.Rows[i - inStartIndex]["view_certi_url"]);
                    //            if (Certificate != "")
                    //            {
                    //                worksheet.Cells[inwrkrow, 15].Formula = "=HYPERLINK(\"" + Certificate + "\",\"" + dtOrders.Rows[i - inStartIndex]["sLab"] + " \")";
                    //                worksheet.Cells[inwrkrow, 15].Style.Font.UnderLine = true;
                    //                worksheet.Cells[inwrkrow, 15].Style.Font.Color.SetColor(Color.Blue);
                    //            }
                    //        }

                    //        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                    //        success2 = Int64.TryParse(values_2, out number_2);
                    //        if (success2)
                    //        {
                    //            worksheet.Cells[inwrkrow, 16].Value = Convert.ToInt64(values_2);
                    //        }
                    //        else
                    //        {
                    //            worksheet.Cells[inwrkrow, 16].Value = values_2;
                    //        }

                    //        worksheet.Cells[inwrkrow, 17].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                    //        worksheet.Cells[inwrkrow, 18].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                    //        worksheet.Cells[inwrkrow, 19].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);

                    //        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 24].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["Web_Benefit"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["Web_Benefit"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Web_Benefit"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 26].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                    //        //worksheet.Cells[inwrkrow, 25].Value = ((dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"] != null) ?
                    //        //   (dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"].GetType().Name != "DBNull" ?
                    //        //   Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["PRICE_PER_CTS"]) : ((Double?)null)) : null);

                    //        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                    //        worksheet.Cells[inwrkrow, 28].Value = (cut == "FR" ? "F" : cut);
                    //        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                    //        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                    //        if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]) == "3EX")
                    //        {
                    //            worksheet.Cells[inwrkrow, 28].Style.Font.Bold = true;
                    //            worksheet.Cells[inwrkrow, 29].Style.Font.Bold = true;
                    //            worksheet.Cells[inwrkrow, 30].Style.Font.Bold = true;
                    //        }

                    //        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                    //        worksheet.Cells[inwrkrow, 32].Value = ((dtOrders.Rows[i - inStartIndex]["dLength"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dLength"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dLength"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 33].Value = ((dtOrders.Rows[i - inStartIndex]["dWidth"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dWidth"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dWidth"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 34].Value = ((dtOrders.Rows[i - inStartIndex]["dDepth"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDepth"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepth"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 35].Value = ((dtOrders.Rows[i - inStartIndex]["dDepthPer"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dDepthPer"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDepthPer"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 36].Value = ((dtOrders.Rows[i - inStartIndex]["dTablePer"] != null) ?
                    //           (dtOrders.Rows[i - inStartIndex]["dTablePer"].GetType().Name != "DBNull" ?
                    //           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dTablePer"]) : ((Double?)null)) : null);

                    //        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymbol"]);
                    //        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCulet"]);
                    //        worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sTableNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sTableNatts"]);
                    //        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownNatts"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownNatts"]);
                    //        worksheet.Cells[inwrkrow, 41].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInclusion"]);
                    //        worksheet.Cells[inwrkrow, 42].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCrownInclusion"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sCrownInclusion"]);

                    //        worksheet.Cells[inwrkrow, 43].Value = dtOrders.Rows[i - inStartIndex]["dCrAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrAng"];

                    //        worksheet.Cells[inwrkrow, 44].Value = dtOrders.Rows[i - inStartIndex]["dCrHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dCrHt"];

                    //        worksheet.Cells[inwrkrow, 45].Value = dtOrders.Rows[i - inStartIndex]["dPavAng"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavAng"];

                    //        worksheet.Cells[inwrkrow, 46].Value = dtOrders.Rows[i - inStartIndex]["dPavHt"] == null ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"].ToString() == "" ? 0 : dtOrders.Rows[i - inStartIndex]["dPavHt"];

                    //        try
                    //        {
                    //            worksheet.Cells[inwrkrow, 47].Value = Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["girdle_per"]);
                    //        }
                    //        catch { }

                    //        worksheet.Cells[inwrkrow, 48].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sGirdleType"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sGirdleType"]);

                    //        worksheet.Cells[inwrkrow, 49].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sInscription"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sInscription"]);

                    //        inwrkrow++;

                    //        #endregion
                    //    }

                    //    worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 14].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    //    worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 27].Style.Numberformat.Format = "#,##0.00";

                    //    worksheet.Cells[inStartIndex, 23, (inwrkrow - 1), 27].Style.Font.Bold = true;
                    //    worksheet.Cells[inStartIndex, 23, (inwrkrow - 1), 24].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    //    worksheet.Cells[inStartIndex, 25, (inwrkrow - 1), 27].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    //    worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 23, (inwrkrow - 1), 24].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    //    worksheet.Cells[6, 25, (inwrkrow - 1), 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 25, (inwrkrow - 1), 25].Style.Fill.BackgroundColor.SetColor(_PISTA);

                    //    worksheet.Cells[6, 26, (inwrkrow - 1), 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[6, 26, (inwrkrow - 1), 27].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    //    worksheet.Cells[inStartIndex, 32, (inwrkrow - 1), 36].Style.Numberformat.Format = "0.00";
                    //    worksheet.Cells[inStartIndex, 43, (inwrkrow - 1), 47].Style.Numberformat.Format = "0.00";

                    //    worksheet.Cells[5, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 7].Style.Numberformat.Format = "#,##";
                    //    worksheet.Cells[5, 7].Style.Border.Left.Style = worksheet.Cells[5, 7].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 7].Style.Border.Top.Style = worksheet.Cells[5, 7].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0";
                    //    worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                    //    worksheet.Cells[5, 23].Formula = "IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + ")/SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ")))*(-100),2))";
                    //    worksheet.Cells[5, 23].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 23].Style.Border.Left.Style = worksheet.Cells[5, 23].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 23].Style.Border.Top.Style = worksheet.Cells[5, 23].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 24].Formula = "ROUND(SUBTOTAL(109,X" + inStartIndex + ":X" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 24].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 24].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 24].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 24].Style.Border.Left.Style = worksheet.Cells[5, 24].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 24].Style.Border.Top.Style = worksheet.Cells[5, 24].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 25].Formula = "ROUND(SUBTOTAL(109,Y" + inStartIndex + ":Y" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 25].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 25].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 25].Style.Border.Left.Style = worksheet.Cells[5, 25].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 25].Style.Border.Top.Style = worksheet.Cells[5, 25].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    worksheet.Cells[5, 26].Formula = "ROUND(SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + "),2)";
                    //    worksheet.Cells[5, 26].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 26].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 26].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 26].Style.Border.Left.Style = worksheet.Cells[5, 26].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 26].Style.Border.Top.Style = worksheet.Cells[5, 26].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //    //=IF(SUBTOTAL(109,S7: S1020)=0,0,100
                    //    worksheet.Cells[5, 27].Formula = "IF(SUBTOTAL(109,V" + inStartIndex + ": V" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,Z" + inStartIndex + ":Z" + (inwrkrow - 1) + ") / SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "))) * 100,2))";
                    //    worksheet.Cells[5, 27].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //    worksheet.Cells[5, 27].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //    worksheet.Cells[5, 27].Style.Numberformat.Format = "#,##0.00";
                    //    worksheet.Cells[5, 27].Style.Border.Left.Style = worksheet.Cells[5, 27].Style.Border.Right.Style
                    //            = worksheet.Cells[5, 27].Style.Border.Top.Style = worksheet.Cells[5, 27].Style.Border.Bottom.Style
                    //            = ExcelBorderStyle.Medium;

                    //}

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void CreatePurchaseOrderExcel(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "PURCHASE ORDER FROM " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(3).Height = 40;
                    worksheet.Row(4).Height = 40;
                    worksheet.Row(4).Style.WrapText = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color pistaColor = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    int inStartIndex = 5;
                    int inwrkrow = 5;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[3, 1].Value = "Total";
                    worksheet.Cells[3, 1, 3, 34].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[3, 1, 3, 34].Style.Font.Size = 11;

                    worksheet.Cells[3, 1, 4, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 34].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[4, 1, 4, 34].Style.Font.Size = 10;
                    worksheet.Cells[3, 1, 4, 34].Style.Font.Bold = true;
                    worksheet.Cells[4, 1, 4, 34].AutoFilter = true;

                    worksheet.Cells[4, 7, 4, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 9, 4, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[4, 1, 4, 34].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 1, 4, 34].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[4, 1].Value = "Sr. No";
                    worksheet.Cells[4, 2].Value = "Order Date";
                    worksheet.Cells[4, 3].Value = "Order No.";
                    worksheet.Cells[4, 4].Value = "Supp. Status";
                    worksheet.Cells[4, 5].Value = "Company Name";
                    worksheet.Cells[4, 6].Value = "Stock Id";
                    worksheet.Cells[4, 7].Value = "Certi No.";
                    worksheet.Cells[4, 8].Value = "Shape";
                    worksheet.Cells[4, 9].Value = "Lab";
                    worksheet.Cells[4, 10].Value = "Certi Type";
                    worksheet.Cells[4, 11].Value = "BGM";
                    worksheet.Cells[4, 12].Value = "Pointer";
                    worksheet.Cells[4, 13].Value = "Color";
                    worksheet.Cells[4, 14].Value = "Clarity";
                    worksheet.Cells[4, 15].Value = "Cts";
                    worksheet.Cells[4, 16].Value = "Rap Price($)";
                    worksheet.Cells[4, 17].Value = "Rap Amt($)";
                    worksheet.Cells[4, 18].Value = "Profit.(%)";
                    worksheet.Cells[4, 19].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[4, 20].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[4, 21].Value = "Final Disc.(%)";
                    worksheet.Cells[4, 22].Value = "Final Value";
                    worksheet.Cells[4, 23].Value = "Cut";
                    worksheet.Cells[4, 24].Value = "Polish";
                    worksheet.Cells[4, 25].Value = "Symm";
                    worksheet.Cells[4, 26].Value = "Fls";
                    worksheet.Cells[4, 27].Value = "Ratio";
                    worksheet.Cells[4, 28].Value = "Table Open";
                    worksheet.Cells[4, 29].Value = "Crown Open";
                    worksheet.Cells[4, 30].Value = "Pav Open";
                    worksheet.Cells[4, 31].Value = "Girdle Open";
                    worksheet.Cells[4, 32].Value = "User Name";     //26
                    worksheet.Cells[4, 33].Value = "Customer Name"; //27
                    worksheet.Cells[4, 34].Value = "Party Code";    //28


                    ExcelStyle cellStyleHeader1 = worksheet.Cells[4, 1, 4, 34].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(5, 1);

                    worksheet.Cells[4, 1].AutoFitColumns(5.43);
                    worksheet.Cells[4, 2].AutoFitColumns(9);
                    worksheet.Cells[4, 3].AutoFitColumns(9);
                    worksheet.Cells[4, 4].AutoFitColumns(12);
                    worksheet.Cells[4, 5].AutoFitColumns(35);
                    worksheet.Cells[4, 6].AutoFitColumns(12.5);
                    worksheet.Cells[4, 7].AutoFitColumns(12);
                    worksheet.Cells[4, 8].AutoFitColumns(10);
                    worksheet.Cells[4, 9].AutoFitColumns(6.75);//7
                    worksheet.Cells[4, 10].AutoFitColumns(9.50);
                    worksheet.Cells[4, 11].AutoFitColumns(10);
                    worksheet.Cells[4, 12].AutoFitColumns(10);
                    worksheet.Cells[4, 13].AutoFitColumns(8);
                    worksheet.Cells[4, 14].AutoFitColumns(10);
                    worksheet.Cells[4, 15].AutoFitColumns(10);
                    worksheet.Cells[4, 16].AutoFitColumns(10);
                    worksheet.Cells[4, 17].AutoFitColumns(10);
                    worksheet.Cells[4, 18].AutoFitColumns(8.43);
                    worksheet.Cells[4, 19].AutoFitColumns(8.14);
                    worksheet.Cells[4, 20].AutoFitColumns(13.5);
                    worksheet.Cells[4, 21].AutoFitColumns(8.14);
                    worksheet.Cells[4, 22].AutoFitColumns(13.5);
                    worksheet.Cells[4, 23].AutoFitColumns(6.50);
                    worksheet.Cells[4, 24].AutoFitColumns(6.50);
                    worksheet.Cells[4, 25].AutoFitColumns(6.50);
                    worksheet.Cells[4, 26].AutoFitColumns(6.50);
                    worksheet.Cells[4, 27].AutoFitColumns(7.86);
                    worksheet.Cells[4, 28].AutoFitColumns(7.86);
                    worksheet.Cells[4, 29].AutoFitColumns(7.86);
                    worksheet.Cells[4, 30].AutoFitColumns(7.86);
                    worksheet.Cells[4, 31].AutoFitColumns(7.86);
                    worksheet.Cells[4, 32].AutoFitColumns(13.5);    //26
                    worksheet.Cells[4, 33].AutoFitColumns(15);      //27
                    worksheet.Cells[4, 34].AutoFitColumns(13);      //28

                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 11, inEndCounter, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 34].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        string Table_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 7].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = (i - 4);


                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 3].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Supplier_Status"]);

                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 6].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);

                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);

                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                        //worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);

                        if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                        {
                            //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                            var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["sRefNo"];
                            var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                            worksheet.Cells[inwrkrow, 10].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                            worksheet.Cells[inwrkrow, 10].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                        if (worksheet.Cells[inwrkrow, 11].Value.ToString() != "NO BGM")
                        {
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                            worksheet.Cells[inwrkrow, 11].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        if (Convert.ToDecimal(worksheet.Cells[inwrkrow, 18].Value) <= 0)
                        {
                            worksheet.Cells[inwrkrow, 18].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                        if (Convert.ToString(cut) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);
                        worksheet.Cells[inwrkrow, 27].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);


                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[4, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[4, 18, (inwrkrow - 1), 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 18, (inwrkrow - 1), 18].Style.Fill.BackgroundColor.SetColor(pistaColor);

                    worksheet.Cells[4, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    worksheet.Cells[4, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    worksheet.Cells[3, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 6].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[3, 6].Style.Border.Left.Style = worksheet.Cells[3, 6].Style.Border.Right.Style
                            = worksheet.Cells[3, 6].Style.Border.Top.Style = worksheet.Cells[3, 6].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 15].Formula = "ROUND(SUBTOTAL(109,M" + inStartIndex + ":M" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 15].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 15].Style.Border.Left.Style = worksheet.Cells[3, 15].Style.Border.Right.Style
                            = worksheet.Cells[3, 15].Style.Border.Top.Style = worksheet.Cells[3, 15].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 17].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[3, 17].Style.Border.Left.Style = worksheet.Cells[3, 17].Style.Border.Right.Style
                            = worksheet.Cells[3, 17].Style.Border.Top.Style = worksheet.Cells[3, 17].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 19].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[3, 19].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 19].Style.Border.Left.Style = worksheet.Cells[3, 19].Style.Border.Right.Style
                            = worksheet.Cells[3, 19].Style.Border.Top.Style = worksheet.Cells[3, 19].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 20].Style.Border.Left.Style = worksheet.Cells[3, 20].Style.Border.Right.Style
                            = worksheet.Cells[3, 20].Style.Border.Top.Style = worksheet.Cells[3, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 21].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ") / SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[3, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 21].Style.Border.Left.Style = worksheet.Cells[3, 21].Style.Border.Right.Style
                            = worksheet.Cells[3, 21].Style.Border.Top.Style = worksheet.Cells[3, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 22].Style.Border.Left.Style = worksheet.Cells[3, 22].Style.Border.Right.Style
                            = worksheet.Cells[3, 22].Style.Border.Top.Style = worksheet.Cells[3, 22].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void CreatePurchaseOrderExcel_1(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "PURCHASE ORDER FROM " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(3).Height = 40;
                    worksheet.Row(4).Height = 40;
                    worksheet.Row(4).Style.WrapText = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color pistaColor = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    int inStartIndex = 5;
                    int inwrkrow = 5;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[3, 1].Value = "Total";
                    worksheet.Cells[3, 1, 3, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[3, 1, 3, 32].Style.Font.Size = 11;

                    worksheet.Cells[3, 1, 4, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[4, 1, 4, 32].Style.Font.Size = 10;
                    worksheet.Cells[3, 1, 4, 32].Style.Font.Bold = true;
                    worksheet.Cells[4, 1, 4, 32].AutoFilter = true;

                    worksheet.Cells[4, 7, 4, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 9, 4, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[4, 1, 4, 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 1, 4, 32].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[4, 1].Value = "Sr. No";
                    worksheet.Cells[4, 2].Value = "Order Date";
                    worksheet.Cells[4, 3].Value = "Order No.";
                    worksheet.Cells[4, 4].Value = "Supp. Status";
                    worksheet.Cells[4, 5].Value = "Company Name";
                    worksheet.Cells[4, 6].Value = "Stock Id";
                    worksheet.Cells[4, 7].Value = "Certi No.";
                    worksheet.Cells[4, 8].Value = "Shape";
                    worksheet.Cells[4, 9].Value = "Lab";
                    worksheet.Cells[4, 10].Value = "BGM";
                    worksheet.Cells[4, 11].Value = "Pointer";
                    worksheet.Cells[4, 12].Value = "Color";
                    worksheet.Cells[4, 13].Value = "Clarity";
                    worksheet.Cells[4, 14].Value = "Cts";
                    worksheet.Cells[4, 15].Value = "Rap Price($)";
                    worksheet.Cells[4, 16].Value = "Rap Amt($)";
                    worksheet.Cells[4, 17].Value = "Profit.(%)";
                    worksheet.Cells[4, 18].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[4, 19].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[4, 20].Value = "Final Disc.(%)";
                    worksheet.Cells[4, 21].Value = "Final Value";
                    worksheet.Cells[4, 22].Value = "Cut";
                    worksheet.Cells[4, 23].Value = "Polish";
                    worksheet.Cells[4, 24].Value = "Symm";
                    worksheet.Cells[4, 25].Value = "Fls";
                    worksheet.Cells[4, 26].Value = "Table Open";
                    worksheet.Cells[4, 27].Value = "Crown Open";
                    worksheet.Cells[4, 28].Value = "Pav Open";
                    worksheet.Cells[4, 29].Value = "Girdle Open";
                    worksheet.Cells[4, 30].Value = "User Name";     //26
                    worksheet.Cells[4, 31].Value = "Customer Name"; //27
                    worksheet.Cells[4, 32].Value = "Party Code";    //28


                    ExcelStyle cellStyleHeader1 = worksheet.Cells[4, 1, 4, 32].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(5, 1);

                    worksheet.Cells[4, 1].AutoFitColumns(5.43);
                    worksheet.Cells[4, 2].AutoFitColumns(9);
                    worksheet.Cells[4, 3].AutoFitColumns(9);
                    worksheet.Cells[4, 4].AutoFitColumns(12);
                    worksheet.Cells[4, 5].AutoFitColumns(35);
                    worksheet.Cells[4, 6].AutoFitColumns(12.5);
                    worksheet.Cells[4, 7].AutoFitColumns(12);
                    worksheet.Cells[4, 8].AutoFitColumns(10);
                    worksheet.Cells[4, 9].AutoFitColumns(12);//7
                    worksheet.Cells[4, 10].AutoFitColumns(10);
                    worksheet.Cells[4, 11].AutoFitColumns(10);
                    worksheet.Cells[4, 12].AutoFitColumns(8);
                    worksheet.Cells[4, 13].AutoFitColumns(10);
                    worksheet.Cells[4, 14].AutoFitColumns(10);
                    worksheet.Cells[4, 15].AutoFitColumns(10);
                    worksheet.Cells[4, 16].AutoFitColumns(10);
                    worksheet.Cells[4, 17].AutoFitColumns(8.43);
                    worksheet.Cells[4, 18].AutoFitColumns(8.14);
                    worksheet.Cells[4, 19].AutoFitColumns(13.5);
                    worksheet.Cells[4, 20].AutoFitColumns(8.14);
                    worksheet.Cells[4, 21].AutoFitColumns(13.5);
                    worksheet.Cells[4, 22].AutoFitColumns(6.50);
                    worksheet.Cells[4, 23].AutoFitColumns(6.50);
                    worksheet.Cells[4, 24].AutoFitColumns(6.50);
                    worksheet.Cells[4, 25].AutoFitColumns(6.50);
                    worksheet.Cells[4, 26].AutoFitColumns(7.86);
                    worksheet.Cells[4, 27].AutoFitColumns(7.86);
                    worksheet.Cells[4, 28].AutoFitColumns(7.86);
                    worksheet.Cells[4, 29].AutoFitColumns(7.86);
                    worksheet.Cells[4, 30].AutoFitColumns(13.5);    //26
                    worksheet.Cells[4, 31].AutoFitColumns(15);      //27
                    worksheet.Cells[4, 32].AutoFitColumns(13);      //28

                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 10, inEndCounter, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 32].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        string Table_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 7].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = (i - 4);


                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 3].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 3].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Supplier_Status"]);

                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 6].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 6].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);

                        string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]) + certi_type;
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                        if (worksheet.Cells[inwrkrow, 10].Value.ToString() != "NO BGM")
                        {
                            worksheet.Cells[inwrkrow, 10].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                            worksheet.Cells[inwrkrow, 10].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 14].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 15].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        if (Convert.ToDecimal(worksheet.Cells[inwrkrow, 17].Value) <= 0)
                        {
                            worksheet.Cells[inwrkrow, 17].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 22].Value = (cut == "FR" ? "F" : cut);
                        worksheet.Cells[inwrkrow, 23].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);

                        if (Convert.ToString(cut) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 22].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);


                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[4, 11, (inwrkrow - 1), 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 11, (inwrkrow - 1), 11].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 14, (inwrkrow - 1), 21].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 17, (inwrkrow - 1), 21].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[4, 17, (inwrkrow - 1), 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 17, (inwrkrow - 1), 17].Style.Fill.BackgroundColor.SetColor(pistaColor);

                    worksheet.Cells[4, 18, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 18, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    worksheet.Cells[4, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    worksheet.Cells[3, 6].Formula = "ROUND(SUBTOTAL(103,F" + inStartIndex + ":F" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 6].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 6].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[3, 6].Style.Border.Left.Style = worksheet.Cells[3, 6].Style.Border.Right.Style
                            = worksheet.Cells[3, 6].Style.Border.Top.Style = worksheet.Cells[3, 6].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 14].Formula = "ROUND(SUBTOTAL(109,N" + inStartIndex + ":N" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 14].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 14].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 14].Style.Border.Left.Style = worksheet.Cells[3, 14].Style.Border.Right.Style
                            = worksheet.Cells[3, 14].Style.Border.Top.Style = worksheet.Cells[3, 14].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 16].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[3, 16].Style.Border.Left.Style = worksheet.Cells[3, 16].Style.Border.Right.Style
                            = worksheet.Cells[3, 16].Style.Border.Top.Style = worksheet.Cells[3, 16].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 18].Formula = "IF(SUBTOTAL(109,P" + inStartIndex + ": P" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + ")/SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[3, 18].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 18].Style.Border.Left.Style = worksheet.Cells[3, 18].Style.Border.Right.Style
                            = worksheet.Cells[3, 18].Style.Border.Top.Style = worksheet.Cells[3, 18].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 19].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 19].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 19].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 19].Style.Border.Left.Style = worksheet.Cells[3, 19].Style.Border.Right.Style
                            = worksheet.Cells[3, 19].Style.Border.Top.Style = worksheet.Cells[3, 19].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 20].Formula = "IF(SUBTOTAL(109,P" + inStartIndex + ": P" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ") / SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[3, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 20].Style.Border.Left.Style = worksheet.Cells[3, 20].Style.Border.Right.Style
                            = worksheet.Cells[3, 20].Style.Border.Top.Style = worksheet.Cells[3, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[3, 21].Formula = "ROUND(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 21].Style.Border.Left.Style = worksheet.Cells[3, 21].Style.Border.Right.Style
                            = worksheet.Cells[3, 21].Style.Border.Top.Style = worksheet.Cells[3, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void CreateSupplierOrderLogExcel_Old(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderLogHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "SUPPLIER ORDER LOG HISTORY FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(5).Height = 40;
                    worksheet.Row(6).Height = 40;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "All Prices are final Selling Cash Price";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 2, 3, 4].Merge = true;

                    worksheet.Cells[2, 6].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 6].Style.Font.Size = 11;
                    worksheet.Cells[2, 6].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[2, 6, 2, 18].Merge = true;

                    worksheet.Cells[3, 6].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 6].Style.Font.Size = 11;
                    worksheet.Cells[3, 6].Style.Font.Bold = true;
                    worksheet.Cells[3, 6].Style.Font.Color.SetColor(colFromHex_H1);
                    //worksheet.Cells[3, 6, 3, 18].Merge = true;

                    //worksheet.Cells[4, 2].Value = "Table & Crown Inclusion = White Inclusion";
                    //worksheet.Cells[4, 2, 4, 5].Merge = true;
                    //worksheet.Cells[4, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 2].Style.Font.Size = 9;
                    //worksheet.Cells[4, 6].Value = "Table & Crown Natts = Black Inclusion";
                    //worksheet.Cells[4, 6, 4, 9].Merge = true;
                    //worksheet.Cells[4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    //worksheet.Cells[4, 6].Style.Font.Size = 9;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[5, 1].Value = "Total";
                    worksheet.Cells[5, 1, 5, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[5, 1, 5, 32].Style.Font.Size = 11;

                    worksheet.Cells[5, 1, 6, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 32].Style.Font.Size = 10;
                    worksheet.Cells[5, 1, 6, 32].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 32].AutoFilter = true;

                    worksheet.Cells[6, 7, 6, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 1, 6, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[6, 9, 6, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[6, 1, 6, 32].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 32].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr. No";
                    worksheet.Cells[6, 2].Value = "Purchase Date";
                    worksheet.Cells[6, 3].Value = "Purchase Time";
                    worksheet.Cells[6, 4].Value = "Order No.";
                    worksheet.Cells[6, 5].Value = "Status";
                    worksheet.Cells[6, 6].Value = "User Name";
                    worksheet.Cells[6, 7].Value = "Company Name";
                    worksheet.Cells[6, 8].Value = "Stock Id";
                    worksheet.Cells[6, 9].Value = "Certi No.";
                    worksheet.Cells[6, 10].Value = "Shape";
                    worksheet.Cells[6, 11].Value = "Lab";
                    worksheet.Cells[6, 12].Value = "BGM";
                    worksheet.Cells[6, 13].Value = "Pointer";
                    worksheet.Cells[6, 14].Value = "Color";
                    worksheet.Cells[6, 15].Value = "Clarity";
                    worksheet.Cells[6, 16].Value = "Cts";
                    worksheet.Cells[6, 17].Value = "Rap Price($)";
                    worksheet.Cells[6, 18].Value = "Rap Amt($)";
                    worksheet.Cells[6, 19].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[6, 20].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[6, 21].Value = "Final Disc.(%)";
                    worksheet.Cells[6, 22].Value = "Final Value";

                    //worksheet.Cells[6, 22].Value = "Profit.(%)";
                    worksheet.Cells[6, 23].Value = "Cut";
                    worksheet.Cells[6, 24].Value = "Polish";
                    worksheet.Cells[6, 25].Value = "Symm";
                    worksheet.Cells[6, 26].Value = "Fls";
                    worksheet.Cells[6, 27].Value = "Customer Name";
                    worksheet.Cells[6, 28].Value = "Party Code";
                    worksheet.Cells[6, 29].Value = "Device";
                    worksheet.Cells[6, 30].Value = "IP Address";
                    worksheet.Cells[6, 31].Value = "Order By";
                    worksheet.Cells[6, 32].Value = "Lab Status";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[6, 1, 6, 32].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(12);
                    worksheet.Cells[6, 3].AutoFitColumns(12);
                    worksheet.Cells[6, 4].AutoFitColumns(9);
                    worksheet.Cells[6, 5].AutoFitColumns(12);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(10);
                    worksheet.Cells[6, 8].AutoFitColumns(16);
                    worksheet.Cells[6, 9].AutoFitColumns(38);
                    worksheet.Cells[6, 10].AutoFitColumns(10);
                    worksheet.Cells[6, 11].AutoFitColumns(38);
                    worksheet.Cells[6, 12].AutoFitColumns(16);
                    worksheet.Cells[6, 13].AutoFitColumns(12);
                    worksheet.Cells[6, 14].AutoFitColumns(10.14);
                    worksheet.Cells[6, 15].AutoFitColumns(25);
                    worksheet.Cells[6, 16].AutoFitColumns(10);
                    worksheet.Cells[6, 17].AutoFitColumns(10);
                    worksheet.Cells[6, 18].AutoFitColumns(10);
                    worksheet.Cells[6, 19].AutoFitColumns(9.57);
                    worksheet.Cells[6, 20].AutoFitColumns(8.14);
                    worksheet.Cells[6, 21].AutoFitColumns(8.14);
                    worksheet.Cells[6, 22].AutoFitColumns(13.5);
                    worksheet.Cells[6, 23].AutoFitColumns(8.43);
                    worksheet.Cells[6, 24].AutoFitColumns(9.29);
                    worksheet.Cells[6, 25].AutoFitColumns(13);
                    worksheet.Cells[6, 26].AutoFitColumns(8.14);
                    worksheet.Cells[6, 27].AutoFitColumns(15);
                    worksheet.Cells[6, 28].AutoFitColumns(15);
                    worksheet.Cells[6, 29].AutoFitColumns(15);
                    worksheet.Cells[6, 30].AutoFitColumns(20);
                    worksheet.Cells[6, 31].AutoFitColumns(15);
                    worksheet.Cells[6, 32].AutoFitColumns(15);
                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 10, inEndCounter, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 32].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        worksheet.Cells[inwrkrow, 1].Value = (i - 6);


                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["SuppOrderTime"] == null ? "" : dtOrders.Rows[i - inStartIndex]["SuppOrderTime"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 4].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 5].Value = "Confirm";
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);
                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 9].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 9].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);
                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);



                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);


                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);



                        //worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                        // (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                        // Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["DeviceType"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["IpAddress"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderBy"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["LabEntryResponse"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(skyBlueColor);



                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    worksheet.Cells[5, 8].Formula = "ROUND(SUBTOTAL(103,H" + inStartIndex + ":H" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 8].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 8].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[5, 8].Style.Border.Left.Style = worksheet.Cells[5, 8].Style.Border.Right.Style
                            = worksheet.Cells[5, 8].Style.Border.Top.Style = worksheet.Cells[5, 8].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 16].Style.Border.Left.Style = worksheet.Cells[5, 16].Style.Border.Right.Style
                            = worksheet.Cells[5, 16].Style.Border.Top.Style = worksheet.Cells[5, 16].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 18].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[5, 18].Style.Border.Left.Style = worksheet.Cells[5, 18].Style.Border.Right.Style
                            = worksheet.Cells[5, 18].Style.Border.Top.Style = worksheet.Cells[5, 18].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                    //worksheet.Cells[5, 16].Formula = "IF(SUBTOTAL(109,AA" + inStartIndex + ": AA" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,AC" + inStartIndex + ":AC" + (inwrkrow - 1) + ")/SUBTOTAL(109,AA" + inStartIndex + ":AA" + (inwrkrow - 1) + ")))*(-100),2))";
                    //worksheet.Cells[5, 16].Style.Numberformat.Format = "#,##0.00";
                    //worksheet.Cells[5, 16].Style.Border.Left.Style = worksheet.Cells[5, 16].Style.Border.Right.Style
                    //        = worksheet.Cells[5, 16].Style.Border.Top.Style = worksheet.Cells[5, 16].Style.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 20].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 20].Style.Border.Left.Style = worksheet.Cells[5, 20].Style.Border.Right.Style
                            = worksheet.Cells[5, 20].Style.Border.Top.Style = worksheet.Cells[5, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //worksheet.Cells[5, 30].Formula = "ROUND(SUBTOTAL(109,AD" + inStartIndex + ":AD" + (inwrkrow - 1) + "),2)";
                    //worksheet.Cells[5, 30].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    //worksheet.Cells[5, 30].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    //worksheet.Cells[5, 30].Style.Numberformat.Format = "#,##0.00";
                    //worksheet.Cells[5, 30].Style.Border.Left.Style = worksheet.Cells[5, 30].Style.Border.Right.Style
                    //        = worksheet.Cells[5, 30].Style.Border.Top.Style = worksheet.Cells[5, 30].Style.Border.Bottom.Style
                    //        = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 22].Style.Border.Left.Style = worksheet.Cells[5, 22].Style.Border.Right.Style
                            = worksheet.Cells[5, 22].Style.Border.Top.Style = worksheet.Cells[5, 22].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    worksheet.Cells[5, 19].Formula = "IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[5, 19].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 19].Style.Border.Left.Style = worksheet.Cells[5, 19].Style.Border.Right.Style
                            = worksheet.Cells[5, 19].Style.Border.Top.Style = worksheet.Cells[5, 19].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    ////=IF(SUBTOTAL(109,W7: W1020)=0,0,100
                    worksheet.Cells[5, 21].Formula = "IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ") / SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[5, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[5, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[5, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[5, 21].Style.Border.Left.Style = worksheet.Cells[5, 21].Style.Border.Right.Style
                            = worksheet.Cells[5, 21].Style.Border.Top.Style = worksheet.Cells[5, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void CreateSupplierOrderLogExcel(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "PURCHASE ORDER LOG FROM " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(3).Height = 40;
                    worksheet.Row(4).Height = 40;
                    worksheet.Row(4).Style.WrapText = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color pistaColor = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    int inStartIndex = 5;
                    int inwrkrow = 5;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[3, 1].Value = "Total";
                    worksheet.Cells[3, 1, 3, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[3, 1, 3, 40].Style.Font.Size = 11;

                    worksheet.Cells[3, 1, 4, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[4, 1, 4, 40].Style.Font.Size = 10;
                    worksheet.Cells[3, 1, 4, 40].Style.Font.Bold = true;
                    worksheet.Cells[4, 1, 4, 40].AutoFilter = true;

                    worksheet.Cells[4, 7, 4, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 9, 4, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[4, 1, 4, 40].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 1, 4, 40].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[4, 1].Value = "Sr. No";
                    worksheet.Cells[4, 2].Value = "Purchase Date";
                    worksheet.Cells[4, 3].Value = "Purchase Time";
                    worksheet.Cells[4, 4].Value = "Order No.";
                    worksheet.Cells[4, 5].Value = "Status";
                    worksheet.Cells[4, 6].Value = "Company Name";
                    worksheet.Cells[4, 7].Value = "Stock Id";
                    worksheet.Cells[4, 8].Value = "Certi No.";
                    worksheet.Cells[4, 9].Value = "Shape";
                    worksheet.Cells[4, 10].Value = "Lab";
                    worksheet.Cells[4, 11].Value = "Certi Type";
                    worksheet.Cells[4, 12].Value = "BGM";
                    worksheet.Cells[4, 13].Value = "Pointer";
                    worksheet.Cells[4, 14].Value = "Color";
                    worksheet.Cells[4, 15].Value = "Clarity";
                    worksheet.Cells[4, 16].Value = "Cts";
                    worksheet.Cells[4, 17].Value = "Rap Price($)";
                    worksheet.Cells[4, 18].Value = "Rap Amt($)";
                    worksheet.Cells[4, 19].Value = "Profit.(%)";
                    worksheet.Cells[4, 20].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[4, 21].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[4, 22].Value = "Final Disc.(%)";
                    worksheet.Cells[4, 23].Value = "Final Value";
                    worksheet.Cells[4, 24].Value = "Cut";
                    worksheet.Cells[4, 25].Value = "Polish";
                    worksheet.Cells[4, 26].Value = "Symm";
                    worksheet.Cells[4, 27].Value = "Fls";
                    worksheet.Cells[4, 28].Value = "Ratio";
                    worksheet.Cells[4, 29].Value = "Table Open";
                    worksheet.Cells[4, 30].Value = "Crown Open";
                    worksheet.Cells[4, 31].Value = "Pav Open";
                    worksheet.Cells[4, 32].Value = "Girdle Open";
                    worksheet.Cells[4, 33].Value = "User Name";
                    worksheet.Cells[4, 34].Value = "Customer Name";
                    worksheet.Cells[4, 35].Value = "Party Code";
                    worksheet.Cells[4, 36].Value = "Device";
                    worksheet.Cells[4, 37].Value = "IP Address";
                    worksheet.Cells[4, 38].Value = "Order By";
                    worksheet.Cells[4, 39].Value = "Supplier Status";
                    worksheet.Cells[4, 40].Value = "Lab Entry Report Status";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[4, 1, 4, 40].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(5, 1);

                    worksheet.Cells[4, 1].AutoFitColumns(5.43);
                    worksheet.Cells[4, 2].AutoFitColumns(12);
                    worksheet.Cells[4, 3].AutoFitColumns(12);
                    worksheet.Cells[4, 4].AutoFitColumns(9);
                    worksheet.Cells[4, 5].AutoFitColumns(16);
                    worksheet.Cells[4, 6].AutoFitColumns(35);
                    worksheet.Cells[4, 7].AutoFitColumns(12.5);
                    worksheet.Cells[4, 8].AutoFitColumns(12);
                    worksheet.Cells[4, 9].AutoFitColumns(10);
                    worksheet.Cells[4, 10].AutoFitColumns(6.75);//7
                    worksheet.Cells[4, 11].AutoFitColumns(9.50);
                    worksheet.Cells[4, 12].AutoFitColumns(10);
                    worksheet.Cells[4, 13].AutoFitColumns(10);
                    worksheet.Cells[4, 14].AutoFitColumns(8);
                    worksheet.Cells[4, 15].AutoFitColumns(10);
                    worksheet.Cells[4, 16].AutoFitColumns(10);
                    worksheet.Cells[4, 17].AutoFitColumns(10);
                    worksheet.Cells[4, 18].AutoFitColumns(10);
                    worksheet.Cells[4, 19].AutoFitColumns(8.43);
                    worksheet.Cells[4, 20].AutoFitColumns(8.14);
                    worksheet.Cells[4, 21].AutoFitColumns(13.5);
                    worksheet.Cells[4, 22].AutoFitColumns(8.14);
                    worksheet.Cells[4, 23].AutoFitColumns(13.5);
                    worksheet.Cells[4, 24].AutoFitColumns(6.50);
                    worksheet.Cells[4, 25].AutoFitColumns(6.50);
                    worksheet.Cells[4, 26].AutoFitColumns(6.50);
                    worksheet.Cells[4, 27].AutoFitColumns(6.50);
                    worksheet.Cells[4, 28].AutoFitColumns(7.86);
                    worksheet.Cells[4, 29].AutoFitColumns(7.86);
                    worksheet.Cells[4, 30].AutoFitColumns(7.86);
                    worksheet.Cells[4, 31].AutoFitColumns(7.86);
                    worksheet.Cells[4, 32].AutoFitColumns(7.86);
                    worksheet.Cells[4, 33].AutoFitColumns(13.5);
                    worksheet.Cells[4, 34].AutoFitColumns(15);
                    worksheet.Cells[4, 35].AutoFitColumns(13);
                    worksheet.Cells[4, 36].AutoFitColumns(10);
                    worksheet.Cells[4, 37].AutoFitColumns(13);
                    worksheet.Cells[4, 38].AutoFitColumns(13.5);
                    worksheet.Cells[4, 39].AutoFitColumns(20);
                    worksheet.Cells[4, 40].AutoFitColumns(13);

                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 10, inEndCounter, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 40].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        string Table_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 8].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = (i - 4);

                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["SuppOrderTime"] == null ? "" : dtOrders.Rows[i - inStartIndex]["SuppOrderTime"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 4].Value = values_2;
                        }

                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);

                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]);

                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);
                        //worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);

                        if (Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]) != "" && Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]) != "")
                        {
                            //var CertiTypeLink = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CertiTypeLink"]);
                            var CertiTypeLink = External_CertiTypeURL + dtOrders.Rows[i - inStartIndex]["sRefNo"];
                            var Certi_Type = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Certi_Type"]);

                            worksheet.Cells[inwrkrow, 11].Formula = "=HYPERLINK(\"" + CertiTypeLink + "\",\" " + Certi_Type + " \")";
                            worksheet.Cells[inwrkrow, 11].Style.Font.UnderLine = true;
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(Color.Blue);
                        }

                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                        if (worksheet.Cells[inwrkrow, 12].Value.ToString() != "NO BGM")
                        {
                            worksheet.Cells[inwrkrow, 12].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                            worksheet.Cells[inwrkrow, 12].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 15].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        if (Convert.ToDecimal(worksheet.Cells[inwrkrow, 19].Value) <= 0)
                        {
                            worksheet.Cells[inwrkrow, 19].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 23].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 24].Value = (cut == "FR" ? "F" : cut);

                        if (Convert.ToString(cut) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 26].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                        worksheet.Cells[inwrkrow, 28].Value = ((dtOrders.Rows[i - inStartIndex]["RATIO"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["RATIO"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["RATIO"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["DeviceType"]);
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["IpAddress"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderBy"]);
                        worksheet.Cells[inwrkrow, 39].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["API_Status"]);
                        worksheet.Cells[inwrkrow, 40].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["LabEntryResponse"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[4, 13, (inwrkrow - 1), 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 13, (inwrkrow - 1), 13].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 16, (inwrkrow - 1), 23].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 23].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 20, (inwrkrow - 1), 21].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 22, (inwrkrow - 1), 23].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[4, 19, (inwrkrow - 1), 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 19, (inwrkrow - 1), 19].Style.Fill.BackgroundColor.SetColor(pistaColor);

                    worksheet.Cells[4, 20, (inwrkrow - 1), 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 20, (inwrkrow - 1), 21].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    worksheet.Cells[4, 22, (inwrkrow - 1), 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 22, (inwrkrow - 1), 23].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    //Stock Id
                    worksheet.Cells[3, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 7].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[3, 7].Style.Border.Left.Style = worksheet.Cells[3, 7].Style.Border.Right.Style
                            = worksheet.Cells[3, 7].Style.Border.Top.Style = worksheet.Cells[3, 7].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Cts
                    worksheet.Cells[3, 16].Formula = "ROUND(SUBTOTAL(109,P" + inStartIndex + ":P" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 16].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 16].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 16].Style.Border.Left.Style = worksheet.Cells[3, 16].Style.Border.Right.Style
                            = worksheet.Cells[3, 16].Style.Border.Top.Style = worksheet.Cells[3, 16].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Rap Amt
                    worksheet.Cells[3, 18].Formula = "ROUND(SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 18].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 18].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[3, 18].Style.Border.Left.Style = worksheet.Cells[3, 18].Style.Border.Right.Style
                            = worksheet.Cells[3, 18].Style.Border.Top.Style = worksheet.Cells[3, 18].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Offer Value
                    worksheet.Cells[3, 21].Formula = "ROUND(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 21].Style.Border.Left.Style = worksheet.Cells[3, 21].Style.Border.Right.Style
                            = worksheet.Cells[3, 21].Style.Border.Top.Style = worksheet.Cells[3, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Final Value
                    worksheet.Cells[3, 23].Formula = "ROUND(SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 23].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 23].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 23].Style.Border.Left.Style = worksheet.Cells[3, 23].Style.Border.Right.Style
                            = worksheet.Cells[3, 23].Style.Border.Top.Style = worksheet.Cells[3, 23].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Offer Disc
                    worksheet.Cells[3, 20].Formula = "IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,U" + inStartIndex + ":U" + (inwrkrow - 1) + ")/SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[3, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 20].Style.Border.Left.Style = worksheet.Cells[3, 20].Style.Border.Right.Style
                            = worksheet.Cells[3, 20].Style.Border.Top.Style = worksheet.Cells[3, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Final Disc
                    worksheet.Cells[3, 22].Formula = "IF(SUBTOTAL(109,R" + inStartIndex + ": R" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,W" + inStartIndex + ":W" + (inwrkrow - 1) + ") / SUBTOTAL(109,R" + inStartIndex + ":R" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[3, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 22].Style.Border.Left.Style = worksheet.Cells[3, 22].Style.Border.Right.Style
                            = worksheet.Cells[3, 22].Style.Border.Top.Style = worksheet.Cells[3, 22].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void CreateSupplierOrderLogExcel_1(DataTable dtOrders, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate, bool isAdmin, bool isEmp)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("SupplierOrderHistory");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 3, 3, 12].Style.Font.Bold = true;

                    worksheet.Cells[1, 6].Value = "PURCHASE ORDER LOG FROM " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 6].Style.Font.Size = 24;
                    worksheet.Cells[1, 6].Style.Font.Bold = true;
                    //worksheet.Cells[1, 6, 1, 18].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");
                    worksheet.Cells[1, 6].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(3).Height = 40;
                    worksheet.Row(4).Height = 40;
                    worksheet.Row(4).Style.WrapText = true;

                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color pistaColor = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");
                    Color _SKY_BLUE = System.Drawing.ColorTranslator.FromHtml("#4abbce73");
                    Color _PISTA = System.Drawing.ColorTranslator.FromHtml("#ddeedf");
                    Color _LIGHT_YELLOW = System.Drawing.ColorTranslator.FromHtml("#fdfdc1");
                    Color tcpg_bg_clr = System.Drawing.ColorTranslator.FromHtml("#fff2cc");

                    int inStartIndex = 5;
                    int inwrkrow = 5;
                    int inEndCounter = dtOrders.Rows.Count + inStartIndex;
                    int i;

                    string Image, Video, values_2, S_Detail, Certificate, cut;
                    Int64 number_2;
                    bool success2;

                    //if (isAdmin)
                    //{
                    worksheet.Cells[3, 1].Value = "Total";
                    worksheet.Cells[3, 1, 3, 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[3, 1, 3, 38].Style.Font.Size = 11;

                    worksheet.Cells[3, 1, 4, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 38].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[4, 1, 4, 38].Style.Font.Size = 10;
                    worksheet.Cells[3, 1, 4, 38].Style.Font.Bold = true;
                    worksheet.Cells[4, 1, 4, 38].AutoFilter = true;

                    worksheet.Cells[4, 7, 4, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 1, 4, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[4, 9, 4, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    worksheet.Cells[4, 1, 4, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 1, 4, 38].Style.Fill.BackgroundColor.SetColor(colFromHex);

                    #region Header Name Declaration

                    worksheet.Cells[4, 1].Value = "Sr. No";
                    worksheet.Cells[4, 2].Value = "Purchase Date";
                    worksheet.Cells[4, 3].Value = "Purchase Time";
                    worksheet.Cells[4, 4].Value = "Order No.";
                    worksheet.Cells[4, 5].Value = "Status";
                    worksheet.Cells[4, 6].Value = "Company Name";
                    worksheet.Cells[4, 7].Value = "Stock Id";
                    worksheet.Cells[4, 8].Value = "Certi No.";
                    worksheet.Cells[4, 9].Value = "Shape";
                    worksheet.Cells[4, 10].Value = "Lab";
                    worksheet.Cells[4, 11].Value = "BGM";
                    worksheet.Cells[4, 12].Value = "Pointer";
                    worksheet.Cells[4, 13].Value = "Color";
                    worksheet.Cells[4, 14].Value = "Clarity";
                    worksheet.Cells[4, 15].Value = "Cts";
                    worksheet.Cells[4, 16].Value = "Rap Price($)";
                    worksheet.Cells[4, 17].Value = "Rap Amt($)";
                    worksheet.Cells[4, 18].Value = "Profit.(%)";
                    worksheet.Cells[4, 19].Value = "Offer Disc.(%)"; //"Disc(%)";
                    worksheet.Cells[4, 20].Value = "Offer Value($)"; //"Net Amt($)";
                    worksheet.Cells[4, 21].Value = "Final Disc.(%)";
                    worksheet.Cells[4, 22].Value = "Final Value";
                    worksheet.Cells[4, 23].Value = "Cut";
                    worksheet.Cells[4, 24].Value = "Polish";
                    worksheet.Cells[4, 25].Value = "Symm";
                    worksheet.Cells[4, 26].Value = "Fls";
                    worksheet.Cells[4, 27].Value = "Table Open";
                    worksheet.Cells[4, 28].Value = "Crown Open";
                    worksheet.Cells[4, 29].Value = "Pav Open";
                    worksheet.Cells[4, 30].Value = "Girdle Open";
                    worksheet.Cells[4, 31].Value = "User Name";
                    worksheet.Cells[4, 32].Value = "Customer Name";
                    worksheet.Cells[4, 33].Value = "Party Code";
                    worksheet.Cells[4, 34].Value = "Device";
                    worksheet.Cells[4, 35].Value = "IP Address";
                    worksheet.Cells[4, 36].Value = "Order By";
                    worksheet.Cells[4, 37].Value = "Supplier Status";
                    worksheet.Cells[4, 38].Value = "Lab Entry Report Status";

                    ExcelStyle cellStyleHeader1 = worksheet.Cells[4, 1, 4, 38].Style;
                    cellStyleHeader1.Border.Left.Style = cellStyleHeader1.Border.Right.Style
                            = cellStyleHeader1.Border.Top.Style = cellStyleHeader1.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(5, 1);

                    worksheet.Cells[4, 1].AutoFitColumns(5.43);
                    worksheet.Cells[4, 2].AutoFitColumns(12);
                    worksheet.Cells[4, 3].AutoFitColumns(12);
                    worksheet.Cells[4, 4].AutoFitColumns(9);
                    worksheet.Cells[4, 5].AutoFitColumns(16);
                    worksheet.Cells[4, 6].AutoFitColumns(35);
                    worksheet.Cells[4, 7].AutoFitColumns(12.5);
                    worksheet.Cells[4, 8].AutoFitColumns(12);
                    worksheet.Cells[4, 9].AutoFitColumns(10);
                    worksheet.Cells[4, 10].AutoFitColumns(12);//7
                    worksheet.Cells[4, 11].AutoFitColumns(10);
                    worksheet.Cells[4, 12].AutoFitColumns(10);
                    worksheet.Cells[4, 13].AutoFitColumns(8);
                    worksheet.Cells[4, 14].AutoFitColumns(10);
                    worksheet.Cells[4, 15].AutoFitColumns(10);
                    worksheet.Cells[4, 16].AutoFitColumns(10);
                    worksheet.Cells[4, 17].AutoFitColumns(10);
                    worksheet.Cells[4, 18].AutoFitColumns(8.43);
                    worksheet.Cells[4, 19].AutoFitColumns(8.14);
                    worksheet.Cells[4, 20].AutoFitColumns(13.5);
                    worksheet.Cells[4, 21].AutoFitColumns(8.14);
                    worksheet.Cells[4, 22].AutoFitColumns(13.5);
                    worksheet.Cells[4, 23].AutoFitColumns(6.50);
                    worksheet.Cells[4, 24].AutoFitColumns(6.50);
                    worksheet.Cells[4, 25].AutoFitColumns(6.50);
                    worksheet.Cells[4, 26].AutoFitColumns(6.50);
                    worksheet.Cells[4, 27].AutoFitColumns(7.86);
                    worksheet.Cells[4, 28].AutoFitColumns(7.86);
                    worksheet.Cells[4, 29].AutoFitColumns(7.86);
                    worksheet.Cells[4, 30].AutoFitColumns(7.86);
                    worksheet.Cells[4, 31].AutoFitColumns(13.5);
                    worksheet.Cells[4, 32].AutoFitColumns(15);
                    worksheet.Cells[4, 33].AutoFitColumns(13);
                    worksheet.Cells[4, 34].AutoFitColumns(10);
                    worksheet.Cells[4, 35].AutoFitColumns(13);
                    worksheet.Cells[4, 36].AutoFitColumns(13.5);
                    worksheet.Cells[4, 37].AutoFitColumns(20);
                    worksheet.Cells[4, 38].AutoFitColumns(13);

                    worksheet.Cells[inStartIndex, 7, inEndCounter, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 1, inEndCounter, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[inStartIndex, 10, inEndCounter, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 38].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell

                        string Table_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        string Crown_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        string Pav_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        string Girdle_Open = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        if ((Table_Open != "" && Table_Open != "NN") || (Crown_Open != "" && Crown_Open != "NN") ||
                            (Pav_Open != "" && Pav_Open != "NN") || (Girdle_Open != "" && Girdle_Open != "NN"))
                        {
                            var tcpg = worksheet.Cells[inwrkrow, 8].Style.Fill;
                            tcpg.PatternType = ExcelFillStyle.Solid;
                            tcpg.BackgroundColor.SetColor(tcpg_bg_clr);
                        }

                        worksheet.Cells[inwrkrow, 1].Value = (i - 4);

                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderDate"] == null ? "" : dtOrders.Rows[i - inStartIndex]["OrderDate"]);

                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["SuppOrderTime"] == null ? "" : dtOrders.Rows[i - inStartIndex]["SuppOrderTime"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["iOrderid"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 4].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 4].Value = values_2;
                        }

                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sStoneStatus"] == null ? "" : dtOrders.Rows[i - inStartIndex]["sStoneStatus"]);

                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CompanyName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CompanyName"]);

                        values_2 = dtOrders.Rows[i - inStartIndex]["sRefNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 7].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 7].Value = values_2;
                        }
                        values_2 = dtOrders.Rows[i - inStartIndex]["sCertiNo"].ToString();
                        success2 = Int64.TryParse(values_2, out number_2);
                        if (success2)
                        {
                            worksheet.Cells[inwrkrow, 8].Value = Convert.ToInt64(values_2);
                        }
                        else
                        {
                            worksheet.Cells[inwrkrow, 8].Value = values_2;
                        }
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sShape"]);
                        string certi_type = (Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) != "" ? " " + Convert.ToString(dtOrders.Rows[i - inStartIndex]["certi_type"]) : "");
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sLab"]) + certi_type;
                        worksheet.Cells[inwrkrow, 11].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["BGM"]);

                        if (worksheet.Cells[inwrkrow, 11].Value.ToString() != "NO BGM")
                        {
                            worksheet.Cells[inwrkrow, 11].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                            worksheet.Cells[inwrkrow, 11].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 12].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPointer"]);
                        worksheet.Cells[inwrkrow, 13].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sColor"]);
                        worksheet.Cells[inwrkrow, 14].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sClarity"]);
                        worksheet.Cells[inwrkrow, 15].Value = ((dtOrders.Rows[i - inStartIndex]["dCts"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["dCts"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dCts"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 16].Value = ((dtOrders.Rows[i - inStartIndex]["dRepPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRepPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRepPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 17].Value = ((dtOrders.Rows[i - inStartIndex]["dRapAmount"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dRapAmount"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dRapAmount"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 18].Value = ((dtOrders.Rows[i - inStartIndex]["Profit"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Profit"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Profit"]) : ((Double?)null)) : null);

                        if (Convert.ToDecimal(worksheet.Cells[inwrkrow, 18].Value) <= 0)
                        {
                            worksheet.Cells[inwrkrow, 18].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                        }

                        worksheet.Cells[inwrkrow, 19].Value = ((dtOrders.Rows[i - inStartIndex]["dDisc"] != null) ?
                              (dtOrders.Rows[i - inStartIndex]["dDisc"].GetType().Name != "DBNull" ?
                              Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dDisc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 20].Value = ((dtOrders.Rows[i - inStartIndex]["dNetPrice"] != null) ?
                           (dtOrders.Rows[i - inStartIndex]["dNetPrice"].GetType().Name != "DBNull" ?
                           Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["dNetPrice"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 21].Value = ((dtOrders.Rows[i - inStartIndex]["Final_Disc"] != null) ?
                         (dtOrders.Rows[i - inStartIndex]["Final_Disc"].GetType().Name != "DBNull" ?
                         Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Final_Disc"]) : ((Double?)null)) : null);

                        worksheet.Cells[inwrkrow, 22].Value = ((dtOrders.Rows[i - inStartIndex]["Net_Value"] != null) ?
                               (dtOrders.Rows[i - inStartIndex]["Net_Value"].GetType().Name != "DBNull" ?
                               Convert.ToDouble(dtOrders.Rows[i - inStartIndex]["Net_Value"]) : ((Double?)null)) : null);

                        cut = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sCut"]);
                        worksheet.Cells[inwrkrow, 23].Value = (cut == "FR" ? "F" : cut);

                        if (Convert.ToString(cut) == "3EX")
                        {
                            worksheet.Cells[inwrkrow, 23].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 24].Style.Font.Bold = true;
                            worksheet.Cells[inwrkrow, 25].Style.Font.Bold = true;
                        }

                        worksheet.Cells[inwrkrow, 24].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sPolish"]);
                        worksheet.Cells[inwrkrow, 25].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sSymm"]);
                        worksheet.Cells[inwrkrow, 26].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["sFls"]);

                        worksheet.Cells[inwrkrow, 27].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Table_Open"]);
                        worksheet.Cells[inwrkrow, 28].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Crown_Open"]);
                        worksheet.Cells[inwrkrow, 29].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Pav_Open"]);
                        worksheet.Cells[inwrkrow, 30].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["Girdle_Open"]);

                        worksheet.Cells[inwrkrow, 31].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["UserName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["UserName"]);
                        worksheet.Cells[inwrkrow, 32].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["CustomerName"] == null ? "" : dtOrders.Rows[i - inStartIndex]["CustomerName"]);
                        worksheet.Cells[inwrkrow, 33].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtOrders.Rows[i - inStartIndex]["FortunePartyCode"]);
                        worksheet.Cells[inwrkrow, 34].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["DeviceType"]);
                        worksheet.Cells[inwrkrow, 35].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["IpAddress"]);
                        worksheet.Cells[inwrkrow, 36].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["OrderBy"]);
                        worksheet.Cells[inwrkrow, 37].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["API_Status"]);
                        worksheet.Cells[inwrkrow, 38].Value = Convert.ToString(dtOrders.Rows[i - inStartIndex]["LabEntryResponse"]);

                        inwrkrow++;

                        #endregion
                    }

                    worksheet.Cells[4, 12, (inwrkrow - 1), 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 12, (inwrkrow - 1), 12].Style.Fill.BackgroundColor.SetColor(colFromHex_Pointer);

                    worksheet.Cells[inStartIndex, 15, (inwrkrow - 1), 22].Style.Numberformat.Format = "#,##0.00";

                    worksheet.Cells[inStartIndex, 18, (inwrkrow - 1), 22].Style.Font.Bold = true;
                    worksheet.Cells[inStartIndex, 19, (inwrkrow - 1), 20].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                    worksheet.Cells[inStartIndex, 21, (inwrkrow - 1), 22].Style.Font.Color.SetColor(System.Drawing.Color.Blue);

                    worksheet.Cells[4, 18, (inwrkrow - 1), 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 18, (inwrkrow - 1), 18].Style.Fill.BackgroundColor.SetColor(pistaColor);

                    worksheet.Cells[4, 19, (inwrkrow - 1), 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 19, (inwrkrow - 1), 20].Style.Fill.BackgroundColor.SetColor(skyBlueColor);

                    worksheet.Cells[4, 21, (inwrkrow - 1), 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[4, 21, (inwrkrow - 1), 22].Style.Fill.BackgroundColor.SetColor(_LIGHT_YELLOW);

                    //Stock Id
                    worksheet.Cells[3, 7].Formula = "ROUND(SUBTOTAL(103,G" + inStartIndex + ":G" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 7].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 7].Style.Numberformat.Format = "#,##";
                    worksheet.Cells[3, 7].Style.Border.Left.Style = worksheet.Cells[3, 7].Style.Border.Right.Style
                            = worksheet.Cells[3, 7].Style.Border.Top.Style = worksheet.Cells[3, 7].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Cts
                    worksheet.Cells[3, 15].Formula = "ROUND(SUBTOTAL(109,O" + inStartIndex + ":O" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 15].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 15].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 15].Style.Border.Left.Style = worksheet.Cells[3, 15].Style.Border.Right.Style
                            = worksheet.Cells[3, 15].Style.Border.Top.Style = worksheet.Cells[3, 15].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Rap Amt
                    worksheet.Cells[3, 17].Formula = "ROUND(SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 17].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 17].Style.Numberformat.Format = "#,##0";
                    worksheet.Cells[3, 17].Style.Border.Left.Style = worksheet.Cells[3, 17].Style.Border.Right.Style
                            = worksheet.Cells[3, 17].Style.Border.Top.Style = worksheet.Cells[3, 17].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Offer Value
                    worksheet.Cells[3, 20].Formula = "ROUND(SUBTOTAL(109,S" + inStartIndex + ":S" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 20].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 20].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 20].Style.Border.Left.Style = worksheet.Cells[3, 20].Style.Border.Right.Style
                            = worksheet.Cells[3, 20].Style.Border.Top.Style = worksheet.Cells[3, 20].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Final Value
                    worksheet.Cells[3, 22].Formula = "ROUND(SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + "),2)";
                    worksheet.Cells[3, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 22].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 22].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 22].Style.Border.Left.Style = worksheet.Cells[3, 22].Style.Border.Right.Style
                            = worksheet.Cells[3, 22].Style.Border.Top.Style = worksheet.Cells[3, 22].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Offer Disc
                    worksheet.Cells[3, 19].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND((1-(SUBTOTAL(109,T" + inStartIndex + ":T" + (inwrkrow - 1) + ")/SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + ")))*(-100),2))";
                    worksheet.Cells[3, 19].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 19].Style.Border.Left.Style = worksheet.Cells[3, 19].Style.Border.Right.Style
                            = worksheet.Cells[3, 19].Style.Border.Top.Style = worksheet.Cells[3, 19].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;

                    //Final Disc
                    worksheet.Cells[3, 21].Formula = "IF(SUBTOTAL(109,Q" + inStartIndex + ": Q" + (inwrkrow - 1) + ")=0,0,ROUND(-(1 - (SUBTOTAL(109,V" + inStartIndex + ":V" + (inwrkrow - 1) + ") / SUBTOTAL(109,Q" + inStartIndex + ":Q" + (inwrkrow - 1) + "))) * 100,2))";
                    worksheet.Cells[3, 21].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[3, 21].Style.Fill.BackgroundColor.SetColor(colFromHexTotal);
                    worksheet.Cells[3, 21].Style.Numberformat.Format = "#,##0.00";
                    worksheet.Cells[3, 21].Style.Border.Left.Style = worksheet.Cells[3, 21].Style.Border.Right.Style
                            = worksheet.Cells[3, 21].Style.Border.Top.Style = worksheet.Cells[3, 21].Style.Border.Bottom.Style
                            = ExcelBorderStyle.Medium;


                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public static void UserActivityStatusReport(DataTable dtAPIs, string _strFolderPath, string _strFilePath, string LivePath, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                using (ExcelPackage p = new ExcelPackage())
                {
                    #region Company Detail on Header

                    p.Workbook.Properties.Author = "SUNRISE DIAMOND";
                    p.Workbook.Properties.Title = "SUNRISE DIAMOND PVT. LTD.";

                    //Create a sheet
                    p.Workbook.Worksheets.Add("User Status Report");

                    ExcelWorksheet worksheet = p.Workbook.Worksheets[1];
                    worksheet.Name = DateTime.Now.ToString("dd-MM-yyyy");
                    worksheet.Cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells.Style.Font.Size = 11;
                    worksheet.Cells.Style.Font.Name = "Calibri";
                    worksheet.Cells[1, 2, 3, 10].Style.Font.Bold = true;

                    worksheet.Cells[1, 2].Value = "USER STATUS REPORT FROM DATE " + " " + FromDate.ToString("dd-MMM-yyyy") + " TO DATE " + ToDate.ToString("dd-MMM-yyyy");
                    worksheet.Cells[1, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[1, 2].Style.Font.Size = 24;
                    worksheet.Cells[1, 2].Style.Font.Bold = true;
                    worksheet.Cells[1, 2, 1, 10].Merge = true;

                    Color colFromHex_H1 = System.Drawing.ColorTranslator.FromHtml("#8497b0");

                    worksheet.Cells[1, 2].Style.Font.Color.SetColor(colFromHex_H1);//#bec5cf

                    worksheet.Row(6).Height = 30;
                    worksheet.Row(6).Style.WrapText = true;

                    worksheet.Cells[2, 2].Value = "UNIT 1, 14/F, PENINSULA SQUARE, EAST WING, 18 SUNG ON STREET, HUNG HOM, KOWLOON, HONG KONG TEL : +852 - 27235100    FAX : +852 - 2314 9100";
                    worksheet.Cells[2, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[2, 2].Style.Font.Size = 11;
                    worksheet.Cells[2, 2].Style.Font.Bold = true;
                    var cellBackgroundColor1_H2 = worksheet.Cells[1, 6].Style.Fill;
                    worksheet.Cells[2, 2].Style.Font.Color.SetColor(colFromHex_H1);
                    worksheet.Cells[2, 2, 2, 10].Merge = true;

                    worksheet.Cells[3, 2].Value = "Email Id : sales@sunrisediam.com    Web : www.sunrisediamonds.com.hk . Download Apps on Android, IOS and Windows";
                    worksheet.Cells[3, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    worksheet.Cells[3, 2].Style.Font.Size = 11;
                    worksheet.Cells[3, 2].Style.Font.Bold = true;
                    worksheet.Cells[3, 2].Style.Font.Color.SetColor(colFromHex_H1);

                    worksheet.Cells[3, 2, 3, 10].Merge = true;


                    #endregion Company Detail on Header

                    Color colFromHex = System.Drawing.ColorTranslator.FromHtml("#d3d3d3");
                    Color colFromHex_Pointer = System.Drawing.ColorTranslator.FromHtml("#c6e0b4");
                    Color skyBlueColor = System.Drawing.ColorTranslator.FromHtml("#ccffff");
                    Color colFromHexTotal = System.Drawing.ColorTranslator.FromHtml("#d9e1f2");

                    int inStartIndex = 7;
                    int inwrkrow = 7;
                    int inEndCounter = dtAPIs.Rows.Count + inStartIndex;
                    int i;

                    string URL = string.Empty, ExportType = string.Empty;


                    #region Header Name Declaration

                    worksheet.Cells[6, 1].Value = "Sr.";
                    worksheet.Cells[6, 2].Value = "Created Date";
                    worksheet.Cells[6, 3].Value = "Customer Name";
                    worksheet.Cells[6, 4].Value = "User Name";
                    worksheet.Cells[6, 5].Value = "Company Name";
                    worksheet.Cells[6, 6].Value = "Party Code";
                    worksheet.Cells[6, 7].Value = "Assist1";
                    worksheet.Cells[6, 8].Value = "Assist2";
                    worksheet.Cells[6, 9].Value = "Activity";
                    worksheet.Cells[6, 10].Value = "Activity Date";

                    #endregion

                    #region Set AutoFit and Decimal Number Format

                    worksheet.View.FreezePanes(7, 1);

                    worksheet.Cells[6, 1].AutoFitColumns(5.43);
                    worksheet.Cells[6, 2].AutoFitColumns(12);
                    worksheet.Cells[6, 3].AutoFitColumns(18);
                    worksheet.Cells[6, 4].AutoFitColumns(18);
                    worksheet.Cells[6, 5].AutoFitColumns(35);
                    worksheet.Cells[6, 6].AutoFitColumns(10);
                    worksheet.Cells[6, 7].AutoFitColumns(18);
                    worksheet.Cells[6, 8].AutoFitColumns(18);
                    worksheet.Cells[6, 9].AutoFitColumns(11);
                    worksheet.Cells[6, 10].AutoFitColumns(18);

                    //Set Cell Faoat value with Alignment
                    worksheet.Cells[6, 1, 6, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                    worksheet.Cells[6, 1, 6, 10].Style.Font.Size = 10;
                    worksheet.Cells[6, 1, 6, 10].Style.Font.Bold = true;
                    worksheet.Cells[6, 1, 6, 10].AutoFilter = true;
                    worksheet.Cells[6, 1, 6, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[6, 1, 6, 10].Style.Fill.BackgroundColor.SetColor(colFromHex);


                    worksheet.Cells[inStartIndex, 1, inEndCounter, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    #endregion

                    worksheet.Cells[inStartIndex, 1, inEndCounter, 10].Style.Font.Size = 9;
                    for (i = inStartIndex; i < inEndCounter; i++)
                    {
                        #region Assigns Value to Cell


                        worksheet.Cells[inwrkrow, 1].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["iSr"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["iSr"]);
                        worksheet.Cells[inwrkrow, 2].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCreatedDate"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCreatedDate"]);
                        worksheet.Cells[inwrkrow, 3].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sFullName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sFullName"]);
                        worksheet.Cells[inwrkrow, 4].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sUsername"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sUsername"]);
                        worksheet.Cells[inwrkrow, 5].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["sCompName"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["sCompName"]);
                        worksheet.Cells[inwrkrow, 6].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["FortunePartyCode"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["FortunePartyCode"]);
                        worksheet.Cells[inwrkrow, 7].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["AssistBy1"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["AssistBy1"]);
                        worksheet.Cells[inwrkrow, 8].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["AssistBy2"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["AssistBy2"]);
                        worksheet.Cells[inwrkrow, 9].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["Activity"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["Activity"]);
                        worksheet.Cells[inwrkrow, 10].Value = Convert.ToString(dtAPIs.Rows[i - inStartIndex]["ActivityDate"] == null ? "" : dtAPIs.Rows[i - inStartIndex]["ActivityDate"]);

                        inwrkrow++;

                        #endregion
                    }

                    int rowEnd = worksheet.Dimension.End.Row;
                    removingGreenTagWarning(worksheet, worksheet.Cells[1, 1, rowEnd, 100].Address);

                    Byte[] bin = p.GetAsByteArray();

                    if (!Directory.Exists(_strFolderPath))
                    {
                        Directory.CreateDirectory(_strFolderPath);
                    }

                    System.IO.File.WriteAllBytes(_strFilePath, bin);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
